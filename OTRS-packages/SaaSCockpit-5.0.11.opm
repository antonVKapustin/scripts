<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>SaaSCockpit</Name>
    <Version>5.0.11</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2016-01-20 18:25:28" Version="5.0.11">Updated blacklisted subdomains for instance registrations.</ChangeLog>
    <ChangeLog Date="2016-01-14 10:38:49" Version="5.0.10">Fixed unit tests for new states InstanceOrganizationSetPending/Failed.</ChangeLog>
    <ChangeLog Date="2016-01-12 15:37:02" Version="5.0.9">Improved instance organziation changes.</ChangeLog>
    <ChangeLog Date="2016-01-12 14:03:58" Version="5.0.8">Changed handling of empty organization.</ChangeLog>
    <ChangeLog Date="2016-01-11 17:21:34" Version="5.0.7">Added missing user ID.</ChangeLog>
    <ChangeLog Date="2016-01-06 15:07:28" Version="5.0.6">Added operation to set the customer ID of an instance.</ChangeLog>
    <ChangeLog Date="2015-12-01 12:34:38" Version="5.0.5">Increased window reload timeout in agent instance zoom for instances with pending state.</ChangeLog>
    <ChangeLog Date="2015-09-17 14:15:26" Version="5.0.4">Fixed SQL for claiming a job.</ChangeLog>
    <ChangeLog Date="2015-09-15 15:03:54" Version="5.0.3">Fixed log output of job dispatcher.</ChangeLog>
    <ChangeLog Date="2015-09-03 13:33:06" Version="5.0.2">Fixed output filter.</ChangeLog>
    <ChangeLog Date="2015-07-27 15:02:05" Version="5.0.1">Initial release for OTRS 5.</ChangeLog>
    <Description Lang="en">The SaaS Cockpit package.</Description>
    <Description Lang="de">Das SaaS Cockpit Paket.</Description>
    <Framework>5.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to install the OTRS package SaaSCockpit.&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;REQUIRED SAAS PACKAGES&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;SaaSSOAP 1.0.91&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WILLKOMMEN&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Sie sind im Begriff das OTRS-Paket SaaSCockpit zu installieren.&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;BENÖTIGTE SAAS-PAKETE&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;SaaSSOAP 1.0.91&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Install Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;BIENVENIDO&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Usted está a punto de instalar el paquete SaaSCockpit para OTRS.&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;PAQUETES REQUERIDOS PARA SAAS&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;SaaSSOAP 1.0.91&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="en" Title="Installation Information" Type="post">

        &lt;br&gt;
        &lt;b&gt;NOTICE&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        The menu items that were added by this package will be visible after you log-in to the system again.
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="post">

        &lt;br&gt;
        &lt;b&gt;HINWEIS&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Die von diesem Paket hinzugefügten Menü-Punkte sind erst nach einem erneuten Anmeldevorgang im System sichtbar.
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Installation Information" Type="post">

        &lt;br&gt;
        &lt;b&gt;ADVERTENCIA&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Los elementos del menú que se añadieron por este paquete, serán visibles luego de que usted inicie reinicie sesión en el sistema.
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstallation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;ATTENTION&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        If you uninstall this package, all database tables that were created during installation will be deleted.
        All data from these tables will be irrevocably lost!
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUninstall>
    <IntroUninstall Lang="de" Title="Uninstallation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;ACHTUNG&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Bei der Deinstallation werden die von diesem Paket angelegten Datenbank-Tabellen gelöscht.
        Alle darin enthaltenen Daten gehen unwiderruflich verloren!
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUninstall>
    <IntroUninstall Lang="es" Title="Uninstallation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;ADVERTENCIA&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Si usted desinstala este paquete, todas las tablas de la base de datos que se crearon durante la instalación del mismo, se eliminarán.
        Todos los datos de dichas tablas se perderán permanentemente.
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to upgrade the OTRS package SaaSCockpit.
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;REQUIRED SAAS PACKAGES&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;SaaSSOAP 1.0.91&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="de" Title="Upgrade Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WILLKOMMEN&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Sie sind im Begriff das OTRS-Paket SaaSCockpit zu aktualisieren.
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;BENÖTIGTE SAAS-PAKETE&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;SaaSSOAP 1.0.91&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="es" Title="Upgrade Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;BIENVENIDO&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Usted está a punto de actualizar el paquete SaaSCockpit para OTRS.&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;PAQUETES REQUERIDOS PARA SAAS&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;SaaSSOAP 1.0.91&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUpgrade>
    <PackageMerge Name="SaaSCPANModules" TargetVersion="1.4.1"></PackageMerge>
    <PackageRequired Version="5.0.3">SaaSSOAP</PackageRequired>
    <BuildDate>2016-01-20 18:25:28</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="bin/cgi-bin/saas-cockpit-soap.pl" Permission="755" Encode="Base64">IyEvdXNyL2Jpbi9wZXJsCiMgLS0KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNiBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQojIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFGRkVSTyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQojIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiMgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKIyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgojIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKIyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgojCiMgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKIyBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEgVVNBCiMgb3Igc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKIyB1c2UgLi4vLi4vIGFzIGxpYiBsb2NhdGlvbgp1c2UgRmluZEJpbiBxdygkQmluKTsKdXNlIGxpYiAiJEJpbi8uLi8uLiI7CnVzZSBsaWIgIiRCaW4vLi4vLi4vS2VybmVsL2NwYW4tbGliIjsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6V2ViOjpTYWFTU09BUENvcmUnLAopOwoKJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6U2FhU1NPQVBDb3JlJyktPkhhbmRsZSgpOwoKZXhpdCAwOwo=</File>
        <File Location="bin/otrs.SaaSJobDispatch.pl" Permission="755" Encode="Base64">IyEvdXNyL2Jpbi9wZXJsCiMgLS0KIyBiaW4vb3Rycy5TYWFTSm9iRGlzcGF0Y2gucGwgLSBsaXN0ZW4gdG8gdGhlIGpvYiBxdWV1ZSBhbmQgbWFrZSBTT0FQIGNhbGxzCiMgIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNiBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQojIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFGRkVSTyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQojIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiMgYW55IGxhdGVyIHZlcnNpb24uCiMKIyBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKIyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgojIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKIyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgojCiMgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiMgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKIyBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEgVVNBCiMgb3Igc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPWhlYWQxIE5BTUUKCmJpbi9vdHJzLlNhYVNKb2JEaXNwYXRjaC5wbCAtIEpvYiBkaXNwYXRjaGVyIGZvciBTYWFTQ29ja3BpdAoKPWhlYWQxIFNZTk9QU0lTCgpiaW4vb3Rycy5TYWFTSm9iRGlzcGF0Y2gucGwKCj1oZWFkMSBERVNDUklQVElPTgoKSm9iIGRpc3BhdGNoZXIgZm9yIFNhYVNDb2NrcGl0Cgo9Y3V0CgojIyBub2ZpbHRlcihUaWR5QWxsOjpQbHVnaW46Ok9UUlM6OlBlcmw6OkJpblNjcmlwdHMpCgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgojIHVzZSAuLi8uLi8gYXMgbGliIGxvY2F0aW9uCnVzZSBGaW5kQmluIHF3KCRCaW4pOwp1c2UgbGliICIkQmluLy4uIjsKdXNlIGxpYiAiJEJpbi8uLi9LZXJuZWwvY3Bhbi1saWIiOwoKdXNlIEdldG9wdDo6TG9uZzsKdXNlIFByb2M6OkRhZW1vbjsKdXNlIFByb2M6OlBJRDo6RmlsZTsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OkNvbmZpZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpKb2I6OkRpc3BhdGNoZXInLAopOwoKIyBoYW5kbGUgdGhlIG9wdGlvbnMKbXkgJU9wdGlvbiA9ICgKICAgIEhlbHAgICAgPT4gMCwKICAgIFN0b3AgICAgPT4gMCwKICAgIFBJREZpbGUgPT4gJy92YXIvcnVuL290cnMuU2FhU0pvYkRpc3BhdGNoJywKICAgIExvZ2ZpbGUgPT4gJy92YXIvbG9nL290cnMuU2FhU0pvYkRpc3BhdGNoLmxvZycsCik7CgpHZXRPcHRpb25zKAogICAgJ2hlbHAnICAgICAgPT4gXCRPcHRpb257SGVscH0sCiAgICAnc3RvcCcgICAgICA9PiBcJE9wdGlvbntTdG9wfSwKICAgICdwaWRmaWxlPXMnID0+IFwkT3B0aW9ue1BJREZpbGV9LAogICAgJ2xvZ2ZpbGU9cycgPT4gXCRPcHRpb257TG9nZmlsZX0sCik7CgppZiAoICRPcHRpb257SGVscH0gKSB7CiAgICBwcmludCA8PCdFT0YnOwpVc2FnZTogYmluL290cnMuU2FhU0pvYkRpc3BhdGNoLnBsCiAgICBbLS1oZWxwXQogICAgWy0tc3RvcF0KICAgIFstLXBpZGZpbGU9L3Zhci9ydW4vb3Rycy5TYWFTTWFuYWdlbWVudFNlcnZlclNPQVBdCiAgICBbLS1sb2dmaWxlPS92YXIvbG9nL290cnMuU2FhU01hbmFnZW1lbnRTZXJ2ZXJTT0FQLmxvZ10KICAgIFstLWRlYnVnPTFdCgpUaGUgcGlkZmlsZSBpcyBjbGVhbmVkIHVwIG9ubHkgd2hlbiB0aGUgZGFlbW9uIGlzIHN0b3BwZWQgYnkgc2VuZGluZyBpdCBhIFNJR0lOVC4KUGFzc2luZyAtLXN0b3AgaW5kaWNhdGVzIHRoYXQgYSBTSUdJTlQgc2hvdWxkIGJlIHNlbnQgdG8gdGhlIHJ1bm5pbmcgcHJvY2Vzcy4KRU9GCgogICAgZXhpdCAwOwp9CgojIHBhcnNlIGFuZCBzcGxpdCB0aGUgcGF0aCBvZiB0aGUgcGlkZmlsZSwgYmVjYXVzZSBQcm9jOjpQSUQ6OkZpbGUtPm5ldygpIHJlcXVpcmVzCiMgdGhlIHBhdGggdG8gYmUgc3BsaXR0ZWQgaW50byB0aGUgZGlyZWN0b3J5IGFuZCB0aGUgZmlsZW5hbWUKbXkgKCAkUElEVm9sdW1lLCAkUElERGlyLCAkUElERmlsZSApID0gRmlsZTo6U3BlYy0+c3BsaXRwYXRoKCAkT3B0aW9ue1BJREZpbGV9ICk7CgojIGNyZWF0ZSBuZXcgUElEIG9iamVjdCwgZ2l2ZW4gdGhlIHBhdGggb2YgdGhlIHBpZGZpbGUKbXkgJFBJRE9iamVjdCA9IFByb2M6OlBJRDo6RmlsZS0+bmV3KAogICAgZGlyICA9PiAkUElERGlyLAogICAgbmFtZSA9PiAkUElERmlsZSwKKTsKCmlmICggJE9wdGlvbntTdG9wfSApIHsKCiAgICBpZiAoICEkUElET2JqZWN0LT5hbGl2ZSgpICkgewoKICAgICAgICBwcmludCAiRm91bmQgbm8gcHJvY2VzcyB0byBzdG9wXG4iOwoKICAgICAgICBleGl0IDE7CiAgICB9CgogICAgIyBnZXQgdGhlIFBJRCB3aXRoIGFidXNpbmcgYW4gaW50ZXJuYWwgbWV0aG9kCiAgICBteSAkUElEID0gJFBJRE9iamVjdC0+cmVhZCgpOwoKICAgICMgc2VuZCBhIFNJR0lOVCB0byB0aGUgcnVubmluZyBwcm9jZXNzLAogICAgIyBkbyBub3QgY2hlY2sgd2hldGhlciB0aGUgcHJvY2VzcyByZWFsbHkgdGVybWluYXRlcwogICAga2lsbCAyLCAkUElEOwoKICAgIGV4aXQgMDsKfQoKIyBUT0RPIGltcHJvdmUgY2hlY2tpbmcgb2YgQ0xJIGFyZ3VtZW50cwoKIyBkZXRhY2ggZnJvbSB0ZXJtaW5hbCwgY2xvc2UgaW5oZXJpdGVkIGZpbGVoYW5kbGVzLCBkb3VibGUgZm9yaywgLi4KIyBQcm9jOjpEYWVtb246OkluaXQoKTsKCiMgcmVvcGVuIFNURE9VVCBhbmQgU1RERVJSCm15ICRMb2cgPSAkT3B0aW9ue0xvZ2ZpbGV9OwpvcGVuKCBTVERPVVQsICc+PicsICRMb2cgKQogICAgfHwgZGllICJGYWlsZWQgdG8gcmUtb3BlbiBTVERPVVQgdG8gJExvZyI7Cm9wZW4oIFNUREVSUiwgIj4mU1RET1VUIiApCiAgICB8fCBkaWUgIkZhaWxlZCB0byByZS1vcGVuIFNUREVSUiB0byBTVERPVVQiOwoKIyBjcmVhdGUgY29tbW9uIG9iamVjdHMKbXkgJENvbmZpZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyk7CgojIG1hbmlwdWxhdGUgdGhlIHVzZWQgbG9nbW9kdWxlCiRDb25maWdPYmplY3QtPlNldCgKICAgIEtleSAgID0+ICdMb2dNb2R1bGUnLAogICAgVmFsdWUgPT4gJ0tlcm5lbDo6U3lzdGVtOjpMb2c6OkZpbGUnLAopOwoKIyBhbmQgdGhlIHBhdGggb2YgdGhlIGxvZ2ZpbGUKJENvbmZpZ09iamVjdC0+U2V0KAogICAgS2V5ICAgPT4gJ0xvZ01vZHVsZTo6TG9nRmlsZScsCiAgICBWYWx1ZSA9PiAkT3B0aW9ue0xvZ2ZpbGV9LAopOwoKIyBzZXQgbWluaW11bSBsb2cgbGV2ZWwgc28gdGhhdCBhbGwgbG9nIG1lc3NhZ2VzIHdpbGwgYmUgb3V0cHV0IHRvIGxvZ2ZpbGUKJENvbmZpZ09iamVjdC0+U2V0KAogICAgS2V5ICAgPT4gJ01pbmltdW1Mb2dMZXZlbCcsCiAgICBWYWx1ZSA9PiAnbm90aWNlJywKKTsKCiMgb2JqZWN0cyBzcGVjaWZpYyBmb3IgdGhpcyBzY3JpcHQKbXkgJEpvYkRpc3BhdGNoZXJPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OkpvYjo6RGlzcGF0Y2hlcicpOwoKIyBjaGVjaywgd2hldGhlciB0aGVyZSdzIGFuIGFscmVhZHkgcnVubmluZyBpbnN0YW5jZQppZiAoICRQSURPYmplY3QtPmFsaXZlKCkgKSB7CiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgIE1lc3NhZ2UgID0+ICdEYWVtb24gaXMgYWxyZWFkeSBydW5uaW5nJywKICAgICk7Cn0KCiMgd3JpdGUgdGhlIFBJRCBmaWxlIHRvIGRpc2sKaWYgKCAhJFBJRE9iamVjdC0+dG91Y2goKSApIHsKICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgTWVzc2FnZSAgPT4gJ0Vycm9yIHdyaXRpbmcgdGhlIHBpZGZpbGUgdG8gZGlzaycsCiAgICApOwp9CgojIHNldCB1cCBhIHNpZ25hbCBoYW5kbGVyIGZvciBzaHV0dGluZyB0aGUgbG9vcCBkb3duCiRTSUd7SU5UfSA9IHN1YiB7CiAgICAkSm9iRGlzcGF0Y2hlck9iamVjdC0+TG9vcFN0b3AoKTsKfTsKCiRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgUHJpb3JpdHkgPT4gJ25vdGljZScsCiAgICBNZXNzYWdlICA9PiAnc3RhcnRpbmcnLAopOwoKIyBkbyB0aGUgd29yawokSm9iRGlzcGF0Y2hlck9iamVjdC0+TG9vcCgpOwoKIyByZW1vdmUgdGhlIHBpZGZpbGUsIHdoZW4gTG9vcCgpIHJldHVybmVkIGJlY2F1c2Ugc29tZWJvZHkgY2FsbGVkIExvb3BTdG9wKCkKJFBJRE9iamVjdC0+cmVsZWFzZSgpOwoKJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICBQcmlvcml0eSA9PiAnbm90aWNlJywKICAgIE1lc3NhZ2UgID0+ICdleGl0aW5nJywKKTsK</File>
        <File Location="Kernel/Config/Files/SaaSCockpit.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Crypt/CBC.pm" Permission="644" Encode="Base64">cGFja2FnZSBDcnlwdDo6Q0JDOwoKdXNlIERpZ2VzdDo6TUQ1ICdtZDUnOwp1c2UgQ2FycDsKdXNlIHN0cmljdDsKdXNlIGJ5dGVzOwp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gJzIuMzEnOwoKdXNlIGNvbnN0YW50IFJBTkRPTV9ERVZJQ0UgPT4gJy9kZXYvdXJhbmRvbSc7CgpzdWIgbmV3IHsKICAgIG15ICRjbGFzcyA9IHNoaWZ0OwoKICAgIG15ICRvcHRpb25zID0ge307CgogICAgIyBoYXNocmVmIGFyZ3VtZW50cwogICAgaWYgKHJlZiAkX1swXSBlcSAnSEFTSCcpIHsKICAgICAgJG9wdGlvbnMgPSBzaGlmdDsKICAgIH0KCiAgICAjIENHSSBzdHlsZSBhcmd1bWVudHMKICAgIGVsc2lmICgkX1swXSA9fiAvXi1bYS16QS1aX117MSwyMH0kLykgewogICAgICBteSAldG1wID0gQF87CiAgICAgIHdoaWxlICggbXkoJGtleSwkdmFsdWUpID0gZWFjaCAldG1wKSB7Cgkka2V5ID1+IHMvXi0vLzsKCSRvcHRpb25zLT57bGMgJGtleX0gPSAkdmFsdWU7CiAgICAgIH0KICAgIH0KCiAgICBlbHNlIHsKCSRvcHRpb25zLT57a2V5fSAgICA9IHNoaWZ0OwoJJG9wdGlvbnMtPntjaXBoZXJ9ID0gc2hpZnQ7CiAgICB9CgogICAgbXkgJGNpcGhlcl9vYmplY3RfcHJvdmlkZWQgPSAkb3B0aW9ucy0+e2NpcGhlcn0gJiYgcmVmICRvcHRpb25zLT57Y2lwaGVyfTsKCiAgICAjICJrZXkiIGlzIGEgbWlzbm9tZXIgaGVyZSwgYmVjYXVzZSBpdCBpcyBhY3R1YWxseSB1c3VhbGx5IGEgcGFzc3BocmFzZSB0aGF0IGlzIHVzZWQKICAgICMgdG8gZGVyaXZlIHRoZSB0cnVlIGtleQogICAgbXkgJHBhc3MgPSAkb3B0aW9ucy0+e2tleX07CgogICAgaWYgKCRjaXBoZXJfb2JqZWN0X3Byb3ZpZGVkKSB7CiAgICAgIGNhcnAgIkJvdGggYSBrZXkgYW5kIGEgcHJlLWluaXRpYWxpemVkIENyeXB0OjoqIG9iamVjdCB3ZXJlIHBhc3NlZC4gVGhlIGtleSB3aWxsIGJlIGlnbm9yZWQiCglpZiBkZWZpbmVkICRwYXNzOwogICAgICAkcGFzcyB8fD0gJyc7CiAgICB9CiAgICBlbHNpZiAoIWRlZmluZWQgJHBhc3MpIHsKICAgICAgY3JvYWsgIlBsZWFzZSBwcm92aWRlIGFuIGVuY3J5cHRpb24vZGVjcnlwdGlvbiBwYXNzcGhyYXNlIG9yIGtleSB1c2luZyAta2V5IgogICAgfQoKICAgICMgaGVhZGVyIG1vZGUKICAgIG15ICV2YWxpZF9tb2RlcyA9IG1hcCB7JF89PjF9IHF3KG5vbmUgc2FsdCByYW5kb21pdik7CiAgICBteSAkaGVhZGVyX21vZGUgICAgID0gJG9wdGlvbnMtPntoZWFkZXJ9OwogICAgJGhlYWRlcl9tb2RlICAgICAgfHw9ICdub25lJyAgICAgaWYgZXhpc3RzICRvcHRpb25zLT57cHJlcGVuZF9pdn0gJiYgISRvcHRpb25zLT57cHJlcGVuZF9pdn07CiAgICAkaGVhZGVyX21vZGUgICAgICB8fD0gJ25vbmUnICAgICBpZiBleGlzdHMgJG9wdGlvbnMtPnthZGRfaGVhZGVyfSAmJiAhJG9wdGlvbnMtPnthZGRfaGVhZGVyfTsKICAgICRoZWFkZXJfbW9kZSAgICAgIHx8PSAnc2FsdCc7ICAgICMgZGVmYXVsdAogICAgY3JvYWsgIkludmFsaWQgLWhlYWRlciBtb2RlICckaGVhZGVyX21vZGUnIiB1bmxlc3MgJHZhbGlkX21vZGVzeyRoZWFkZXJfbW9kZX07CgogICAgY3JvYWsgIlRoZSAtc2FsdCBhcmd1bWVudCBpcyBpbmNvbXBhdGlibGUgd2l0aCBhIC1oZWFkZXIgbW9kZSBvZiAkaGVhZGVyX21vZGUiCiAgICAgIGlmIGV4aXN0cyAkb3B0aW9ucy0+e3NhbHR9ICYmICRoZWFkZXJfbW9kZSBuZSAnc2FsdCc7CgogICAgbXkgJGNpcGhlciA9ICRvcHRpb25zLT57Y2lwaGVyfTsKICAgICRjaXBoZXIgPSAnQ3J5cHQ6OkRFUycgdW5sZXNzICRjaXBoZXI7CiAgICBteSAkY2lwaGVyY2xhc3MgPSByZWYgJGNpcGhlciB8fCAkY2lwaGVyOwoKICAgIHVubGVzcyAocmVmICRjaXBoZXIpIHsgICMgbXVuZ2UgdGhlIGNsYXNzIG5hbWUgaWYgbm8gb2JqZWN0IHBhc3NlZAogICAgICAkY2lwaGVyID0gJGNpcGhlcj1+L15DcnlwdDo6LyA/ICRjaXBoZXIgOiAiQ3J5cHQ6OiRjaXBoZXIiOwogICAgICAkY2lwaGVyLT5jYW4oJ2VuY3J5cHQnKSBvciBldmFsICJyZXF1aXJlICRjaXBoZXI7IDEiIG9yIGNyb2FrICJDb3VsZG4ndCBsb2FkICRjaXBoZXI6ICRAIjsKICAgICAgIyBzb21lIGNyeXB0IG1vZHVsZXMgdXNlIHRoZSBjbGFzcyBDcnlwdDo6LCBhbmQgb3RoZXJzIGRvbid0CiAgICAgICRjaXBoZXIgPX4gcy9eQ3J5cHQ6Oi8vIHVubGVzcyAkY2lwaGVyLT5jYW4oJ2tleXNpemUnKTsKICAgIH0KCiAgICAjIGFsbG93IHVzZXIgdG8gb3ZlcnJpZGUgdGhlc2UgdmFsdWVzCiAgICBteSAka3MgICAgICAgID0gJG9wdGlvbnMtPntrZXlzaXplfTsKICAgIG15ICRicyAgICAgICAgPSAkb3B0aW9ucy0+e2Jsb2Nrc2l6ZX07CgogICAgIyBvdGhlcndpc2Ugd2UgZ2V0IHRoZSB2YWx1ZXMgZnJvbSB0aGUgY2lwaGVyCiAgICAka3MgfHw9IGV2YWwgeyRjaXBoZXItPmtleXNpemV9OwogICAgJGJzIHx8PSBldmFsIHskY2lwaGVyLT5ibG9ja3NpemV9OwoKICAgICMgU29tZSBvZiB0aGUgY2lwaGVyIG1vZHVsZXMgYXJlIGJ1c3RlZCBhbmQgZG9uJ3QgcmVwb3J0IHRoZQogICAgIyBrZXlzaXplICh3ZWxsLCBDcnlwdDo6Qmxvd2Zpc2ggaW4gYW55IGNhc2UpLiAgSWYgd2UgZGV0ZWN0CiAgICAjIHRoaXMsIGFuZCBmaW5kIHRoZSBibG93ZmlzaCBtb2R1bGUgaW4gdXNlLCB0aGVuIGFzc3VtZSA1Ni4KICAgICMgT3RoZXJ3aXNlIGFzc3VtZSB0aGUgbGVhc3QgY29tbW9uIGRlbm9taW5hdG9yIG9mIDguCiAgICAka3MgfHw9ICRjaXBoZXJjbGFzcyA9fiAvYmxvd2Zpc2gvaSA/IDU2IDogODsKICAgICRicyB8fD0gJGtzOwoKICAgIG15ICRwY2JjID0gJG9wdGlvbnMtPnsncGNiYyd9OwoKICAgICMgRGVmYXVsdCBiZWhhdmlvciBpcyB0byB0cmVhdCAta2V5IGFzIGEgcGFzc3BocmFzZS4KICAgICMgQnV0IGlmIHRoZSBsaXRlcmFsX2tleSBvcHRpb24gaXMgdHJ1ZSwgdGhlbiB1c2Uga2V5IGFzIGlzCiAgICBjcm9hayAiVGhlIG9wdGlvbnMgLWxpdGVyYWxfa2V5IGFuZCAtcmVnZW5lcmF0ZV9rZXkgYXJlIGluY29tcGF0aWJsZSB3aXRoIGVhY2ggb3RoZXIiIAogICAgICBpZiBleGlzdHMgJG9wdGlvbnMtPntsaXRlcmFsX2tleX0gJiYgZXhpc3RzICRvcHRpb25zLT57cmVnZW5lcmF0ZV9rZXl9OwogICAgbXkgJGtleTsKICAgICRrZXkgICAgID0gJHBhc3MgaWYgJG9wdGlvbnMtPntsaXRlcmFsX2tleX07CiAgICAka2V5ICAgICA9ICRwYXNzIGlmIGV4aXN0cyAkb3B0aW9ucy0+e3JlZ2VuZXJhdGVfa2V5fSAmJiAhJG9wdGlvbnMtPntyZWdlbmVyYXRlX2tleX07CgogICAgIyBHZXQgdGhlIHNhbHQuCiAgICBteSAkc2FsdCAgICAgICAgPSAkb3B0aW9ucy0+e3NhbHR9OwogICAgbXkgJHJhbmRvbV9zYWx0ID0gMSB1bmxlc3MgZGVmaW5lZCAkc2FsdCAmJiAkc2FsdCBuZSAnMSc7CiAgICBjcm9hayAiQXJndW1lbnQgdG8gLXNhbHQgbXVzdCBiZSBleGFjdGx5IDggYnl0ZXMgbG9uZyIgaWYgZGVmaW5lZCAkc2FsdCAmJiBsZW5ndGggJHNhbHQgIT0gOCAmJiAkc2FsdCBuZSAnMSc7CgogICAgIyBub3RlOiBpdiB3aWxsIGJlIGF1dG9nZW5lcmF0ZWQgYnkgc3RhcnQoKSBpZiBub3Qgc3BlY2lmaWVkIGluIG9wdGlvbnMKICAgIG15ICRpdiA9ICRvcHRpb25zLT57aXZ9OwogICAgbXkgJHJhbmRvbV9pdiA9IDEgdW5sZXNzIGRlZmluZWQgJGl2OwogICAgY3JvYWsgIkluaXRpYWxpemF0aW9uIHZlY3RvciBtdXN0IGJlIGV4YWN0bHkgJGJzIGJ5dGVzIGxvbmcgd2hlbiB1c2luZyB0aGUgJGNpcGhlcmNsYXNzIGNpcGhlciIgaWYgZGVmaW5lZCAkaXYgYW5kIGxlbmd0aCgkaXYpICE9ICRiczsKCiAgICBteSAkbGl0ZXJhbF9rZXkgPSAkb3B0aW9ucy0+e2xpdGVyYWxfa2V5fSB8fCAoZXhpc3RzICRvcHRpb25zLT57cmVnZW5lcmF0ZV9rZXl9ICYmICEkb3B0aW9ucy0+e3JlZ2VuZXJhdGVfa2V5fSk7CiAgICBteSAkbGVnYWN5X2hhY2sgPSAkb3B0aW9ucy0+e2luc2VjdXJlX2xlZ2FjeV9kZWNyeXB0fTsKICAgIG15ICRwYWRkaW5nICAgICA9ICRvcHRpb25zLT57cGFkZGluZ30gfHwgJ3N0YW5kYXJkJzsKCiAgICBpZiAoJHBhZGRpbmcgJiYgcmVmKCRwYWRkaW5nKSBlcSAnQ09ERScpIHsKICAgICAgIyBjaGVjayB0byBzZWUgdGhhdCB0aGlzIGNvZGUgZG9lcyBpdHMgcGFkZGluZyBjb3JyZWN0bHkKICAgICAgZm9yIG15ICRpICgxLi4kYnMtMSkgewoJbXkgJHJicyA9IGxlbmd0aCgkcGFkZGluZy0+KCIgIngkaSwkYnMsJ2UnKSk7Cgljcm9hayAicGFkZGluZyBtZXRob2QgY2FsbGJhY2sgZG9lcyBub3QgYmVoYXZlIHByb3Blcmx5OiBleHBlY3RlZCAkYnMgYnl0ZXMgYmFjaywgZ290ICRyYnMgYnl0ZXMgYmFjay4iIAoJICB1bmxlc3MgKCRyYnMgPT0gJGJzKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgJHBhZGRpbmcgPSAkcGFkZGluZyBlcSAnbm9uZScgICAgICAgICAgID8gXCZfbm9fcGFkZGluZwoJICAgICAgICA6JHBhZGRpbmcgZXEgJ251bGwnICAgICAgICAgICA/IFwmX251bGxfcGFkZGluZwoJICAgICAgICA6JHBhZGRpbmcgZXEgJ3NwYWNlJyAgICAgICAgICA/IFwmX3NwYWNlX3BhZGRpbmcKCQk6JHBhZGRpbmcgZXEgJ29uZWFuZHplcm9lcycgICA/IFwmX29uZWFuZHplcm9lc19wYWRkaW5nCgkJOiRwYWRkaW5nIGVxICdyaWpuZGFlbF9jb21wYXQnPyBcJl9yaWpuZGFlbF9jb21wYXQKICAgICAgICAgICAgICAgIDokcGFkZGluZyBlcSAnc3RhbmRhcmQnICAgICAgID8gXCZfc3RhbmRhcmRfcGFkZGluZwoJICAgICAgICA6Y3JvYWsgIickcGFkZGluZycgcGFkZGluZyBub3Qgc3VwcG9ydGVkLiAgU2VlIHBlcmxkb2MgQ3J5cHQ6OkNCQyBmb3IgaW5zdHJ1Y3Rpb25zIG9uIGNyZWF0aW5nIHlvdXIgb3duLiI7CiAgICB9CgogICAgIyBDT05TSVNURU5DWSBDSEVDS1MKICAgICMgSEVBREVSIGNvbnNpc3RlbmN5CiAgICBpZiAoJGhlYWRlcl9tb2RlIGVxICdzYWx0JykgewogICAgICBjcm9hayAiQ2Fubm90IHVzZSBzYWx0LWJhc2VkIGtleSBnZW5lcmF0aW9uIGlmIGxpdGVyYWwga2V5IGlzIHNwZWNpZmllZCIKCWlmICRvcHRpb25zLT57bGl0ZXJhbF9rZXl9OwogICAgICBjcm9hayAiQ2Fubm90IHVzZSBzYWx0LWJhc2VkIElWIGdlbmVyYXRpb24gaWYgbGl0ZXJhbCBJViBpcyBzcGVjaWZpZWQiCglpZiBleGlzdHMgJG9wdGlvbnMtPntpdn07CiAgICB9CiAgICBlbHNpZiAoJGhlYWRlcl9tb2RlIGVxICdyYW5kb21pdicpIHsKICAgICAgY3JvYWsgIkNhbm5vdCBlbmNyeXB0IHVzaW5nIGEgbm9uLTggYnl0ZSBibG9ja3NpemUgY2lwaGVyIHdoZW4gdXNpbmcgcmFuZG9taXYgaGVhZGVyIG1vZGUiCgl1bmxlc3MgJGJzID09IDggfHwgJGxlZ2FjeV9oYWNrOwogICAgfQogICAgZWxzaWYgKCRoZWFkZXJfbW9kZSBlcSAnbm9uZScpIHsKICAgICAgY3JvYWsgIllvdSBtdXN0IHByb3ZpZGUgYW4gaW5pdGlhbGl6YXRpb24gdmVjdG9yIHVzaW5nIC1pdiB3aGVuIHVzaW5nIC1oZWFkZXI9Pidub25lJyIKCXVubGVzcyBleGlzdHMgJG9wdGlvbnMtPntpdn07CiAgICB9CgogICAgIyBLRVlTSVpFIGNvbnNpc3RlbmN5CiAgICBpZiAoZGVmaW5lZCAka2V5ICYmIGxlbmd0aCgka2V5KSAhPSAka3MpIHsKICAgICAgY3JvYWsgIklmIHNwZWNpZmllZCBieSAtbGl0ZXJhbF9rZXksIHRoZW4gdGhlIGtleSBsZW5ndGggbXVzdCBiZSBlcXVhbCB0byB0aGUgY2hvc2VuIGNpcGhlcidzIGtleSBsZW5ndGggb2YgJGtzIGJ5dGVzIjsKICAgIH0KCiAgICAjIElWIGNvbnNpc3RlbmN5CiAgICBpZiAoZGVmaW5lZCAkaXYgJiYgbGVuZ3RoKCRpdikgIT0gJGJzKSB7CiAgICAgIGNyb2FrICJJZiBzcGVjaWZpZWQgYnkgLWl2LCB0aGVuIHRoZSBpbml0aWFsaXphdGlvbiB2ZWN0b3IgbGVuZ3RoIG11c3QgYmUgZXF1YWwgdG8gdGhlIGNob3NlbiBjaXBoZXIncyBibG9ja3NpemUgb2YgJGJzIGJ5dGVzIjsKICAgIH0KCgogICAgcmV0dXJuIGJsZXNzIHsnY2lwaGVyJyAgICAgID0+ICRjaXBoZXIsCgkJICAncGFzc3BocmFzZScgID0+ICRwYXNzLAoJCSAgJ2tleScgICAgICAgICA9PiAka2V5LAoJCSAgJ2l2JyAgICAgICAgICA9PiAkaXYsCgkJICAnc2FsdCcgICAgICAgID0+ICRzYWx0LAoJCSAgJ3BhZGRpbmcnICAgICA9PiAkcGFkZGluZywKCQkgICdibG9ja3NpemUnICAgPT4gJGJzLAoJCSAgJ2tleXNpemUnICAgICA9PiAka3MsCiAgICAgICAgICAgICAgICAgICdoZWFkZXJfbW9kZScgPT4gJGhlYWRlcl9tb2RlLAoJCSAgJ2xlZ2FjeV9oYWNrJyA9PiAkbGVnYWN5X2hhY2ssCiAgICAgICAgICAgICAgICAgICdsaXRlcmFsX2tleScgPT4gJGxpdGVyYWxfa2V5LAogICAgICAgICAgICAgICAgICAncGNiYycgICAgICAgID0+ICRwY2JjLAoJCSAgJ21ha2VfcmFuZG9tX3NhbHQnID0+ICRyYW5kb21fc2FsdCwKCQkgICdtYWtlX3JhbmRvbV9pdicgICA9PiAkcmFuZG9tX2l2LAoJCSAgfSwkY2xhc3M7Cn0KCnN1YiBlbmNyeXB0IChcJCQpIHsKICAgIG15ICgkc2VsZiwkZGF0YSkgPSBAXzsKICAgICRzZWxmLT5zdGFydCgnZW5jcnlwdGluZycpOwogICAgbXkgJHJlc3VsdCA9ICRzZWxmLT5jcnlwdCgkZGF0YSk7CiAgICAkcmVzdWx0IC49ICRzZWxmLT5maW5pc2g7CiAgICAkcmVzdWx0Owp9CgpzdWIgZGVjcnlwdCAoXCQkKXsKICAgIG15ICgkc2VsZiwkZGF0YSkgPSBAXzsKICAgICRzZWxmLT5zdGFydCgnZGVjcnlwdGluZycpOwogICAgbXkgJHJlc3VsdCA9ICRzZWxmLT5jcnlwdCgkZGF0YSk7CiAgICAkcmVzdWx0IC49ICRzZWxmLT5maW5pc2g7CiAgICAkcmVzdWx0Owp9CgpzdWIgZW5jcnlwdF9oZXggKFwkJCkgewogICAgbXkgKCRzZWxmLCRkYXRhKSA9IEBfOwogICAgcmV0dXJuIGpvaW4oJycsdW5wYWNrICdIKicsJHNlbGYtPmVuY3J5cHQoJGRhdGEpKTsKfQoKc3ViIGRlY3J5cHRfaGV4IChcJCQpIHsKICAgIG15ICgkc2VsZiwkZGF0YSkgPSBAXzsKICAgIHJldHVybiAkc2VsZi0+ZGVjcnlwdChwYWNrJ0gqJywkZGF0YSk7Cn0KCiMgY2FsbCB0byBzdGFydCBhIHNlcmllcyBvZiBlbmNyeXB0aW9uL2RlY3J5cHRpb24gb3BlcmF0aW9ucwpzdWIgc3RhcnQgKFwkJCkgewogICAgbXkgJHNlbGYgPSBzaGlmdDsKICAgIG15ICRvcGVyYXRpb24gPSBzaGlmdDsKICAgIGNyb2FrICJTcGVjaWZ5IDxlPm5jcnlwdGlvbiBvciA8ZD5lY3J5cHRpb24iIHVubGVzcyAkb3BlcmF0aW9uPX4vXltlZF0vaTsKCiAgICAkc2VsZi0+eydidWZmZXInfSA9ICcnOwogICAgJHNlbGYtPnsnZGVjcnlwdCd9ID0gJG9wZXJhdGlvbj1+L15kL2k7Cn0KCiMgY2FsbCB0byBlbmNyeXB0L2RlY3J5cHQgYSBiaXQgb2YgZGF0YQpzdWIgY3J5cHQgKFwkJCl7CiAgICBteSAkc2VsZiA9IHNoaWZ0OwogICAgbXkgJGRhdGEgPSBzaGlmdDsKCiAgICBteSAkcmVzdWx0OwoKICAgIGNyb2FrICJjcnlwdCgpIGNhbGxlZCB3aXRob3V0IGEgcHJlY2VkaW5nIHN0YXJ0KCkiCiAgICAgIHVubGVzcyBleGlzdHMgJHNlbGYtPnsnYnVmZmVyJ307CgogICAgbXkgJGQgPSAkc2VsZi0+eydkZWNyeXB0J307CgogICAgdW5sZXNzICgkc2VsZi0+e2Npdn0pIHsgIyBibG9jayBjaXBoZXIgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZAogICAgICAkcmVzdWx0ID0gJHNlbGYtPl9nZW5lcmF0ZV9pdl9hbmRfY2lwaGVyX2Zyb21fZGF0YXN0cmVhbShcJGRhdGEpICAgICAgaWYgJGQ7CiAgICAgICRyZXN1bHQgPSAkc2VsZi0+X2dlbmVyYXRlX2l2X2FuZF9jaXBoZXJfZnJvbV9vcHRpb25zKCkgICAgICAgICAgIHVubGVzcyAkZDsKICAgIH0KCiAgICBteSAkaXYgPSAkc2VsZi0+eydjaXYnfTsKICAgICRzZWxmLT57J2J1ZmZlcid9IC49ICRkYXRhOwoKICAgIG15ICRicyA9ICRzZWxmLT57J2Jsb2Nrc2l6ZSd9OwoKICAgIGNyb2FrICJXaGVuIHVzaW5nIG5vIHBhZGRpbmcsIHBsYWludGV4dCBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAkYnMiCiAgICAgIGlmICRzZWxmLT57J3BhZGRpbmcnfSBlcSBcJl9ub19wYWRkaW5nCglhbmQgbGVuZ3RoKCRkYXRhKSAlICRiczsKCiAgICBjcm9hayAiV2hlbiB1c2luZyByaWpuZGFlbF9jb21wYXQgcGFkZGluZywgcGxhaW50ZXh0IHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mICRicyIKICAgICAgaWYgJHNlbGYtPnsncGFkZGluZyd9IGVxIFwmX3Jpam5kYWVsX2NvbXBhdAoJYW5kIGxlbmd0aCgkZGF0YSkgJSAkYnM7CgogICAgcmV0dXJuICRyZXN1bHQgdW5sZXNzIChsZW5ndGgoJHNlbGYtPnsnYnVmZmVyJ30pID49ICRicyk7CgogICAgbXkgQGJsb2NrcyA9IHVucGFjaygiYSRicyAieChpbnQobGVuZ3RoKCRzZWxmLT57J2J1ZmZlcid9KS8kYnMpKSAuICJhKiIsICRzZWxmLT57J2J1ZmZlcid9KTsKICAgICRzZWxmLT57J2J1ZmZlcid9ID0gJyc7CgogICAgaWYgKCRkKSB7ICAjIHdoZW4gZGVjcnlwdGluZywgYWx3YXlzIGxlYXZlIGEgZnJlZSBibG9jayBhdCB0aGUgZW5kCiAgICAgICRzZWxmLT57J2J1ZmZlcid9ID0gbGVuZ3RoKCRibG9ja3NbLTFdKSA8ICRicyA/IGpvaW4gJycsc3BsaWNlKEBibG9ja3MsLTIpIDogcG9wKEBibG9ja3MpOwogICAgfSBlbHNlIHsKICAgICAgJHNlbGYtPnsnYnVmZmVyJ30gPSBwb3AgQGJsb2NrcyBpZiBsZW5ndGgoJGJsb2Nrc1stMV0pIDwgJGJzOyAgIyB3aGF0J3MgbGVmdCBvdmVyCiAgICB9CgogICAgZm9yZWFjaCBteSAkYmxvY2sgKEBibG9ja3MpIHsKICAgICAgaWYgKCRkKSB7ICMgZGVjcnlwdGluZwoJJHJlc3VsdCAuPSAkaXYgPSAkaXYgXiAkc2VsZi0+eydjcnlwdCd9LT5kZWNyeXB0KCRibG9jayk7CgkkaXYgPSAkYmxvY2sgdW5sZXNzICRzZWxmLT57cGNiY307CiAgICAgIH0gZWxzZSB7ICMgZW5jcnlwdGluZwoJJHJlc3VsdCAuPSAkaXYgPSAkc2VsZi0+eydjcnlwdCd9LT5lbmNyeXB0KCRpdiBeICRibG9jayk7CiAgICAgIH0KICAgICAgJGl2ID0gJGl2IF4gJGJsb2NrIGlmICRzZWxmLT57cGNiY307CiAgICB9CiAgICAkc2VsZi0+eydjaXYnfSA9ICRpdjsJICAgICAgICAjIHJlbWVtYmVyIHRoZSBpdgogICAgcmV0dXJuICRyZXN1bHQ7Cn0KCiMgdGhpcyBpcyBjYWxsZWQgYXQgdGhlIGVuZCB0byBmbHVzaCB3aGF0ZXZlcidzIGxlZnQKc3ViIGZpbmlzaCAoXCQpIHsKICAgIG15ICRzZWxmID0gc2hpZnQ7CiAgICBteSAkYnMgICAgPSAkc2VsZi0+eydibG9ja3NpemUnfTsKICAgIG15ICRibG9jayA9IGRlZmluZWQgJHNlbGYtPnsnYnVmZmVyJ30gPyAkc2VsZi0+eydidWZmZXInfSA6ICcnOwoKICAgICRzZWxmLT57Y2l2fSB8fD0gJyc7CgogICAgbXkgJHJlc3VsdDsKICAgIGlmICgkc2VsZi0+eydkZWNyeXB0J30pIHsgI2RlY3J5cHRpbmcKCSRibG9jayA9IGxlbmd0aCAkYmxvY2sgPyBwYWNrKCJhJGJzIiwkYmxvY2spIDogJyc7ICMgcGFkIGFuZCB0cnVuY2F0ZSB0byBibG9jayBzaXplCgkKCWlmIChsZW5ndGgoJGJsb2NrKSkgewoJICAkcmVzdWx0ID0gJHNlbGYtPnsnY2l2J30gXiAkc2VsZi0+eydjcnlwdCd9LT5kZWNyeXB0KCRibG9jayk7CgkgICRyZXN1bHQgPSAkc2VsZi0+eydwYWRkaW5nJ30tPigkcmVzdWx0LCAkYnMsICdkJyk7Cgl9IGVsc2UgewoJICAkcmVzdWx0ID0gJyc7Cgl9CgogICAgfSBlbHNlIHsgIyBlbmNyeXB0aW5nCiAgICAgICRibG9jayAgPSAkc2VsZi0+eydwYWRkaW5nJ30tPigkYmxvY2ssJGJzLCdlJykgfHwgJyc7CiAgICAgICRyZXN1bHQgPSBsZW5ndGggJGJsb2NrID8gJHNlbGYtPnsnY3J5cHQnfS0+ZW5jcnlwdCgkc2VsZi0+eydjaXYnfSBeICRibG9jaykgOiAnJzsKICAgIH0KICAgIGRlbGV0ZSAkc2VsZi0+eydjaXYnfTsKICAgIGRlbGV0ZSAkc2VsZi0+eydidWZmZXInfTsKICAgIHJldHVybiAkcmVzdWx0Owp9CgojIHRoaXMgc3Vicm91dGluZSB3aWxsIGdlbmVyYXRlIHRoZSBhY3R1YWwge2VuLGRlfWNyeXB0aW9uIGtleSwgdGhlIGl2CiMgYW5kIHRoZSBibG9jayBjaXBoZXIgb2JqZWN0LiAgVGhpcyBpcyBjYWxsZWQgd2hlbiByZWFkaW5nIGZyb20gYSBkYXRhc3RyZWFtCiMgYW5kIHNvIGl0IHVzZXMgcHJldmlvdXMgdmFsdWVzIG9mIHNhbHQgb3IgaXYgaWYgdGhleSBhcmUgZW5jb2RlZCBpbiBkYXRhc3RyZWFtCiMgaGVhZGVyCnN1YiBfZ2VuZXJhdGVfaXZfYW5kX2NpcGhlcl9mcm9tX2RhdGFzdHJlYW0gewogIG15ICRzZWxmICAgICAgICAgPSBzaGlmdDsKICBteSAkaW5wdXRfc3RyZWFtID0gc2hpZnQ7CiAgbXkgJGJzICAgICAgICAgICA9ICRzZWxmLT5ibG9ja3NpemU7CgogICMgdXNlIG91ciBoZWFkZXIgbW9kZSB0byBmaWd1cmUgb3V0IHdoYXQgdG8gZG8gd2l0aCB0aGUgZGF0YSBzdHJlYW0KICBteSAkaGVhZGVyX21vZGUgPSAkc2VsZi0+aGVhZGVyX21vZGU7CgogIGlmICgkaGVhZGVyX21vZGUgZXEgJ25vbmUnKSB7CiAgICBjcm9hayAiWW91IG11c3Qgc3BlY2lmeSBhICRicyBieXRlIGluaXRpYWxpemF0aW9uIHZlY3RvciBieSBwYXNzaW5nIHRoZSAtaXYgb3B0aW9uIHRvIG5ldygpIHdoZW4gdXNpbmcgLWhlYWRlcl9tb2RlPT4nbm9uZSciCiAgICAgIHVubGVzcyBleGlzdHMgJHNlbGYtPntpdn07CiAgICAkc2VsZi0+e2Npdn0gICA9ICRzZWxmLT57aXZ9OyAgICMgY3VycmVudCBJViBlcXVhbHMgc2F2ZWQgSVYKICAgICRzZWxmLT57a2V5fSB8fD0gJHNlbGYtPl9rZXlfZnJvbV9rZXkoJHNlbGYtPntwYXNzcGhyYXNlfSk7CiAgfQoKICBlbHNpZiAoJGhlYWRlcl9tb2RlIGVxICdzYWx0JykgewogICAgbXkgKCRzYWx0KSA9ICQkaW5wdXRfc3RyZWFtID1+IC9eU2FsdGVkX18oLns4fSkvczsKICAgIGNyb2FrICJDaXBoZXJ0ZXh0IGRvZXMgbm90IGJlZ2luIHdpdGggYSB2YWxpZCBoZWFkZXIgZm9yICdzYWx0JyBoZWFkZXIgbW9kZSIgdW5sZXNzIGRlZmluZWQgJHNhbHQ7CiAgICAkc2VsZi0+e3NhbHR9ID0gJHNhbHQ7ICAgICAgICAgICMgbmV3IHNhbHQKICAgIHN1YnN0cigkJGlucHV0X3N0cmVhbSwwLDE2KSA9ICcnOwogICAgbXkgKCRrZXksJGl2KSA9ICRzZWxmLT5fc2FsdGVkX2tleV9hbmRfaXYoJHNlbGYtPntwYXNzcGhyYXNlfSwkc2FsdCk7CiAgICAkc2VsZi0+e2l2fSA9ICRzZWxmLT57Y2l2fSAgPSAkaXY7CiAgICAkc2VsZi0+e2tleX0gID0gJGtleTsKICB9CgogIGVsc2lmICgkaGVhZGVyX21vZGUgZXEgJ3JhbmRvbWl2JykgewogICAgbXkgKCRpdikgPSAkJGlucHV0X3N0cmVhbSA9fiAvXlJhbmRvbUlWKC57OH0pL3M7CiAgICBjcm9hayAiQ2lwaGVydGV4dCBkb2VzIG5vdCBiZWdpbiB3aXRoIGEgdmFsaWQgaGVhZGVyIGZvciAncmFuZG9taXYnIGhlYWRlciBtb2RlIiB1bmxlc3MgZGVmaW5lZCAkaXY7CiAgICBjcm9hayAicmFuZG9taXYgaGVhZGVyIG1vZGUgY2Fubm90IGJlIHVzZWQgc2VjdXJlbHkgd2hlbiBkZWNyeXB0aW5nIHdpdGggYSA+OCBieXRlIGJsb2NrIGNpcGhlci5cblVzZSB0aGUgLWluc2VjdXJlX2xlZ2FjeV9kZWNyeXB0IGZsYWcgaWYgeW91IGFyZSBzdXJlIHlvdSB3YW50IHRvIGRvIHRoaXMiIHVubGVzcyAkc2VsZi0+YmxvY2tzaXplID09IDggfHwgJHNlbGYtPmxlZ2FjeV9oYWNrOwogICAgJHNlbGYtPntpdn0gPSAkc2VsZi0+e2Npdn0gPSAkaXY7CiAgICAkc2VsZi0+e2tleX0gPSAkc2VsZi0+X2tleV9mcm9tX2tleSgkc2VsZi0+e3Bhc3NwaHJhc2V9KTsKICAgIHVuZGVmICRzZWxmLT57c2FsdH07ICAjIHBhcmFub2lhCiAgICBzdWJzdHIoJCRpbnB1dF9zdHJlYW0sMCwxNikgPSAnJzsgIyB0cnVuY2F0ZQogIH0KCiAgZWxzZSB7CiAgICBjcm9hayAiSW52YWxpZCBoZWFkZXIgbW9kZSAnJGhlYWRlcl9tb2RlJyI7CiAgfQoKICAjIHdlIHNob3VsZCBoYXZlIHRoZSBrZXkgYW5kIGl2IG5vdywgb3Igd2UgYXJlIGRlYWQgaW4gdGhlIHdhdGVyCiAgY3JvYWsgIkNpcGhlciBzdHJlYW0gZGlkIG5vdCBjb250YWluIElWIG9yIHNhbHQsIGFuZCB5b3UgZGlkIG5vdCBzcGVjaWZ5IHRoZXNlIHZhbHVlcyBpbiBuZXcoKSIKICAgIHVubGVzcyAkc2VsZi0+e2tleX0gJiYgJHNlbGYtPntjaXZ9OwoKICAjIG5vdyB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGNyeXB0IG9iamVjdCBpdHNlbGYKICAkc2VsZi0+e2NyeXB0fSA9IHJlZiAkc2VsZi0+e2NpcGhlcn0gPyAkc2VsZi0+e2NpcGhlcn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2VsZi0+e2NpcGhlcn0tPm5ldygkc2VsZi0+e2tleX0pCgkJCQkJIG9yIGNyb2FrICJDb3VsZCBub3QgY3JlYXRlICRzZWxmLT57Y2lwaGVyfSBvYmplY3Q6ICRAIjsKICByZXR1cm4gJyc7Cn0KCnN1YiBfZ2VuZXJhdGVfaXZfYW5kX2NpcGhlcl9mcm9tX29wdGlvbnMgewogIG15ICRzZWxmICAgPSBzaGlmdDsKICBteSAkYmxvY2tzaXplID0gJHNlbGYtPmJsb2Nrc2l6ZTsKCiAgbXkgJHJlc3VsdCA9ICcnOwoKICBteSAkaGVhZGVyX21vZGUgPSAkc2VsZi0+aGVhZGVyX21vZGU7CiAgaWYgKCRoZWFkZXJfbW9kZSBlcSAnbm9uZScpIHsKICAgIGNyb2FrICJZb3UgbXVzdCBzcGVjaWZ5IGEgJGJsb2Nrc2l6ZSBieXRlIGluaXRpYWxpemF0aW9uIHZlY3RvciBieSBwYXNzaW5nIHRoZSAtaXYgb3B0aW9uIHRvIG5ldygpIHdoZW4gdXNpbmcgLWhlYWRlcl9tb2RlPT4nbm9uZSciCiAgICAgIHVubGVzcyBleGlzdHMgJHNlbGYtPntpdn07CiAgICAkc2VsZi0+e2Npdn0gICA9ICRzZWxmLT57aXZ9OwogICAgJHNlbGYtPntrZXl9IHx8PSAkc2VsZi0+X2tleV9mcm9tX2tleSgkc2VsZi0+e3Bhc3NwaHJhc2V9KTsKICB9CgogIGVsc2lmICgkaGVhZGVyX21vZGUgZXEgJ3NhbHQnKSB7CiAgICAkc2VsZi0+e3NhbHR9ID0gJHNlbGYtPl9nZXRfcmFuZG9tX2J5dGVzKDgpIGlmICRzZWxmLT57bWFrZV9yYW5kb21fc2FsdH07CiAgICBkZWZpbmVkIChteSAkc2FsdCA9ICRzZWxmLT57c2FsdH0pIG9yIGNyb2FrICJObyBoZWFkZXJfbW9kZSBvZiAnc2FsdCcgc3BlY2lmaWVkLCBidXQgbm8gc2FsdCB2YWx1ZSBwcm92aWRlZCI7ICMgc2hvdWxkbid0IGhhcHBlbgogICAgbGVuZ3RoKCRzYWx0KSA9PSA4IG9yIGNyb2FrICJTYWx0IG11c3QgYmUgZXhhY3RseSA4IGJ5dGVzIGxvbmciOwogICAgbXkgKCRrZXksJGl2KSA9ICRzZWxmLT5fc2FsdGVkX2tleV9hbmRfaXYoJHNlbGYtPntwYXNzcGhyYXNlfSwkc2FsdCk7CiAgICAkc2VsZi0+e2tleX0gID0gJGtleTsKICAgICRzZWxmLT57Y2l2fSAgPSAkc2VsZi0+e2l2fSA9ICRpdjsKICAgICRyZXN1bHQgID0gIlNhbHRlZF9fJHtzYWx0fSI7CiAgfQoKICBlbHNpZiAoJGhlYWRlcl9tb2RlIGVxICdyYW5kb21pdicpIHsKICAgIGNyb2FrICJyYW5kb21pdiBoZWFkZXIgbW9kZSBjYW5ub3QgYmUgdXNlZCB3aGVuIGVuY3J5cHRpbmcgd2l0aCBhID44IGJ5dGUgYmxvY2sgY2lwaGVyLiBUaGVyZSBpcyBubyBvcHRpb24gdG8gYWxsb3cgdGhpcyIKICAgICAgdW5sZXNzICRibG9ja3NpemUgPT0gODsKICAgICRzZWxmLT57a2V5fSB8fD0gJHNlbGYtPl9rZXlfZnJvbV9rZXkoJHNlbGYtPntwYXNzcGhyYXNlfSk7CiAgICAkc2VsZi0+e2l2fSAgICA9ICRzZWxmLT5fZ2V0X3JhbmRvbV9ieXRlcyg4KSBpZiAkc2VsZi0+e21ha2VfcmFuZG9tX2l2fTsKICAgIGxlbmd0aCgkc2VsZi0+e2l2fSkgPT0gOCBvciBjcm9hayAiSVYgbXVzdCBiZSBleGFjdGx5IDggYnl0ZXMgbG9uZyB3aGVuIHVzZWQgd2l0aCBoZWFkZXIgbW9kZSBvZiAncmFuZG9taXYnIjsKICAgICRzZWxmLT57Y2l2fSAgID0gJHNlbGYtPntpdn07CiAgICAkcmVzdWx0ID0gIlJhbmRvbUlWJHNlbGYtPntpdn0iOwogIH0KCiAgY3JvYWsgImtleSBhbmQvb3IgaXYgYXJlIG1pc3NpbmciIHVubGVzcyBkZWZpbmVkICRzZWxmLT57a2V5fSAmJiBkZWZpbmVkICRzZWxmLT57Y2l2fTsKCiAgJHNlbGYtPl90YWludGNoZWNrKCRzZWxmLT57a2V5fSk7CiAgJHNlbGYtPntjcnlwdH0gPSByZWYgJHNlbGYtPntjaXBoZXJ9ID8gJHNlbGYtPntjaXBoZXJ9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNlbGYtPntjaXBoZXJ9LT5uZXcoJHNlbGYtPntrZXl9KQoJCQkJCSBvciBjcm9hayAiQ291bGQgbm90IGNyZWF0ZSAkc2VsZi0+e2NpcGhlcn0gb2JqZWN0OiAkQCI7CiAgcmV0dXJuICRyZXN1bHQ7Cn0KCnN1YiBfdGFpbnRjaGVjayB7CiAgICBteSAkc2VsZiA9IHNoaWZ0OwogICAgbXkgJGtleSAgPSBzaGlmdDsKICAgIHJldHVybiB1bmxlc3MgJHteVEFJTlR9OwoKICAgIG15ICRoYXNfc2NhbGFyX3V0aWwgPSBldmFsICJyZXF1aXJlIFNjYWxhcjo6VXRpbDsgMSI7CiAgICBteSAkdGFpbnRlZDsKCiAgICBpZiAoJGhhc19zY2FsYXJfdXRpbCkgewoJJHRhaW50ZWQgPSBTY2FsYXI6OlV0aWw6OnRhaW50ZWQoJGtleSk7CiAgICB9IGVsc2UgewoJbG9jYWwoJEAsICRTSUd7X19ESUVfX30sICRTSUd7X19XQVJOX199KTsKCWxvY2FsICReVyA9IDA7CglldmFsIHsga2lsbCAwICogJGtleSB9OwoJJHRhaW50ZWQgPSAkQCA9fiAvXkluc2VjdXJlLzsKICAgIH0KCiAgICBjcm9hayAiVGFpbnQgY2hlY2tzIGFyZSB0dXJuZWQgb24gYW5kIHlvdXIga2V5IGlzIHRhaW50ZWQuIFBsZWFzZSB1bnRhaW50IHRoZSBrZXkgYW5kIHRyeSBhZ2FpbiIKCWlmICR0YWludGVkOwp9CgpzdWIgX2tleV9mcm9tX2tleSB7CiAgbXkgJHNlbGYgID0gc2hpZnQ7CiAgbXkgJHBhc3MgID0gc2hpZnQ7CiAgbXkgJGtzICAgID0gJHNlbGYtPntrZXlzaXplfTsKCiAgcmV0dXJuICRwYXNzIGlmICRzZWxmLT57bGl0ZXJhbF9rZXl9OwoKICBteSAkbWF0ZXJpYWwgPSBtZDUoJHBhc3MpOwogIHdoaWxlIChsZW5ndGgoJG1hdGVyaWFsKSA8ICRrcykgIHsKICAgICRtYXRlcmlhbCAuPSBtZDUoJG1hdGVyaWFsKTsKICB9CiAgcmV0dXJuIHN1YnN0cigkbWF0ZXJpYWwsMCwka3MpOwp9CgpzdWIgX3NhbHRlZF9rZXlfYW5kX2l2IHsKICBteSAkc2VsZiA9IHNoaWZ0OwogIG15ICgkcGFzcywkc2FsdCkgID0gQF87CgogIGNyb2FrICJTYWx0IG11c3QgYmUgOCBieXRlcyBsb25nIiB1bmxlc3MgbGVuZ3RoICRzYWx0ID09IDg7CgogIG15ICRrZXlfbGVuID0gJHNlbGYtPntrZXlzaXplfTsKICBteSAkaXZfbGVuICA9ICRzZWxmLT57YmxvY2tzaXplfTsKCiAgbXkgJGRlc2lyZWRfbGVuID0gJGtleV9sZW4rJGl2X2xlbjsKCiAgbXkgJGRhdGEgID0gJyc7CiAgbXkgJGQgPSAnJzsKCiAgd2hpbGUgKGxlbmd0aCAkZGF0YSA8ICRkZXNpcmVkX2xlbikgewogICAgJGQgPSBtZDUoJGQgLiAkcGFzcyAuICRzYWx0KTsKICAgICRkYXRhIC49ICRkOwogIH0KICByZXR1cm4gKHN1YnN0cigkZGF0YSwwLCRrZXlfbGVuKSxzdWJzdHIoJGRhdGEsJGtleV9sZW4sJGl2X2xlbikpOwp9CgpzdWIgcmFuZG9tX2J5dGVzIHsKICBteSAkc2VsZiAgPSBzaGlmdDsKICBteSAkYnl0ZXMgPSBzaGlmdCBvciBjcm9hayAidXNhZ2U6IHJhbmRvbV9ieXRlcyhcJGJ5dGVfbGVuZ3RoKSI7CiAgJHNlbGYtPl9nZXRfcmFuZG9tX2J5dGVzKCRieXRlcyk7Cn0KCnN1YiBfZ2V0X3JhbmRvbV9ieXRlcyB7CiAgbXkgJHNlbGYgICA9IHNoaWZ0OwogIG15ICRsZW5ndGggPSBzaGlmdDsKICBteSAkcmVzdWx0OwoKICBpZiAoLXIgUkFORE9NX0RFVklDRSAmJiBvcGVuKEYsUkFORE9NX0RFVklDRSkpIHsKICAgIHJlYWQoRiwkcmVzdWx0LCRsZW5ndGgpOwogICAgY2xvc2UgRjsKICB9IGVsc2UgewogICAgJHJlc3VsdCA9IHBhY2soIkMqIixtYXAge3JhbmQoMjU2KX0gMS4uJGxlbmd0aCk7CiAgfQogICMgQ2xlYXIgdGFpbnQgYW5kIGNoZWNrIGxlbmd0aAogIGxlbmd0aCgkcmVzdWx0KSA9PSAkbGVuZ3RoIG9yIGNyb2FrICJJbnZhbGlkIGxlbmd0aCB3aGlsZSBnYXRoZXJpbmcgJGxlbmd0aCByYW5kb20gYnl0ZXMiOwogIHJldHVybiAkcmVzdWx0Owp9CgpzdWIgX3N0YW5kYXJkX3BhZGRpbmcgKCQkJCkgewogIG15ICgkYiwkYnMsJGRlY3J5cHQpID0gQF87CiAgJGIgPSBsZW5ndGggJGIgPyAkYiA6ICcnOwogIGlmICgkZGVjcnlwdCBlcSAnZCcpIHsKICAgIG15ICRwYWRfbGVuZ3RoID0gdW5wYWNrKCJDIixzdWJzdHIoJGIsLTEpKTsKCiAgICAjIHNhbml0eSBjaGVjayBmb3IgaW1wbGVtZW50YXRpb25zIHRoYXQgZG9uJ3QgcGFkIGNvcnJlY3RseQogICAgcmV0dXJuICRiIHVubGVzcyAkcGFkX2xlbmd0aCA+PSAwICYmICRwYWRfbGVuZ3RoIDw9ICRiczsKICAgIG15IEBwYWRfY2hhcnMgPSB1bnBhY2soIkMqIixzdWJzdHIoJGIsLSRwYWRfbGVuZ3RoKSk7CiAgICByZXR1cm4gJGIgaWYgZ3JlcCB7JHBhZF9sZW5ndGggIT0gJF99IEBwYWRfY2hhcnM7CgogICAgcmV0dXJuIHN1YnN0cigkYiwwLCRicy0kcGFkX2xlbmd0aCk7CiAgfQogIG15ICRwYWQgPSAkYnMgLSBsZW5ndGgoJGIpICUgJGJzOwogIHJldHVybiAkYiAuIHBhY2soIkMqIiwoJHBhZCl4JHBhZCk7Cn0KCnN1YiBfc3BhY2VfcGFkZGluZyAoJCQkKSB7CiAgbXkgKCRiLCRicywkZGVjcnlwdCkgPSBAXzsKICByZXR1cm4gdW5sZXNzIGxlbmd0aCAkYjsKICAkYiA9IGxlbmd0aCAkYiA/ICRiIDogJyc7CiAgaWYgKCRkZWNyeXB0IGVxICdkJykgewogICAgICRiPX4gcy8gKlx6Ly9zOwogICAgIHJldHVybiAkYjsKICB9CiAgcmV0dXJuICRiIC4gcGFjaygiQyoiLCAoMzIpIHggKCRicyAtIGxlbmd0aCgkYikgJSAkYnMpKTsKfQoKc3ViIF9ub19wYWRkaW5nICgkJCQpIHsKICBteSAoJGIsJGJzLCRkZWNyeXB0KSA9IEBfOwogIHJldHVybiAkYjsKfQoKc3ViIF9udWxsX3BhZGRpbmcgKCQkJCkgewogIG15ICgkYiwkYnMsJGRlY3J5cHQpID0gQF87CiAgcmV0dXJuIHVubGVzcyBsZW5ndGggJGI7CiAgJGIgPSBsZW5ndGggJGIgPyAkYiA6ICcnOwogIGlmICgkZGVjcnlwdCBlcSAnZCcpIHsKICAgICAkYj1+IHMvXDAqXHovL3M7CiAgICAgcmV0dXJuICRiOwogIH0KICByZXR1cm4gJGIgLiBwYWNrKCJDKiIsICgwKSB4ICgkYnMgLSBsZW5ndGgoJGIpICUgJGJzKSk7Cn0KCnN1YiBfb25lYW5kemVyb2VzX3BhZGRpbmcgKCQkJCkgewogIG15ICgkYiwkYnMsJGRlY3J5cHQpID0gQF87CiAgJGIgPSBsZW5ndGggJGIgPyAkYiA6ICcnOwogIGlmICgkZGVjcnlwdCBlcSAnZCcpIHsKICAgICAkYj1+IHMvXHg4MFwwKlx6Ly9zOwogICAgIHJldHVybiAkYjsKICB9CiAgcmV0dXJuICRiIC4gcGFjaygiQyoiLCAxMjgsICgwKSB4ICgkYnMgLSBsZW5ndGgoJGIpICUgJGJzIC0gMSkgKTsKfQoKc3ViIF9yaWpuZGFlbF9jb21wYXQgKCQkJCkgewogIG15ICgkYiwkYnMsJGRlY3J5cHQpID0gQF87CiAgcmV0dXJuIHVubGVzcyBsZW5ndGggJGI7CiAgaWYgKCRkZWNyeXB0IGVxICdkJykgewogICAgICRiPX4gcy9ceDgwXDAqXHovL3M7CiAgICAgcmV0dXJuICRiOwogIH0KICByZXR1cm4gJGIgLiBwYWNrKCJDKiIsIDEyOCwgKDApIHggKCRicyAtIGxlbmd0aCgkYikgJSAkYnMgLSAxKSApOwp9CgpzdWIgZ2V0X2luaXRpYWxpemF0aW9uX3ZlY3RvciAoXCQpIHsKICBteSAkc2VsZiA9IHNoaWZ0OwogICRzZWxmLT5pdigpOwp9CgpzdWIgc2V0X2luaXRpYWxpemF0aW9uX3ZlY3RvciAoXCQkKSB7CiAgbXkgJHNlbGYgPSBzaGlmdDsKICBteSAkaXYgICA9IHNoaWZ0OwogIG15ICRicyAgID0gJHNlbGYtPmJsb2Nrc2l6ZTsKICBjcm9hayAiSW5pdGlhbGl6YXRpb24gdmVjdG9yIG11c3QgYmUgJGJzIGJ5dGVzIGluIGxlbmd0aCIgdW5sZXNzIGxlbmd0aCgkaXYpID09ICRiczsKICAkc2VsZi0+aXYoJGl2KTsKfQoKc3ViIHNhbHQgewogIG15ICRzZWxmID0gc2hpZnQ7CiAgbXkgJGQgICAgPSAkc2VsZi0+e3NhbHR9OwogICRzZWxmLT57c2FsdH0gPSBzaGlmdCBpZiBAXzsKICAkZDsKfQoKc3ViIGl2IHsKICBteSAkc2VsZiA9IHNoaWZ0OwogIG15ICRkICAgID0gJHNlbGYtPntpdn07CiAgJHNlbGYtPntpdn0gPSBzaGlmdCBpZiBAXzsKICAkZDsKfQoKc3ViIGtleSB7CiAgbXkgJHNlbGYgPSBzaGlmdDsKICBteSAkZCAgICA9ICRzZWxmLT57a2V5fTsKICAkc2VsZi0+e2tleX0gPSBzaGlmdCBpZiBAXzsKICAkZDsKfQoKc3ViIHBhc3NwaHJhc2UgewogIG15ICRzZWxmID0gc2hpZnQ7CiAgbXkgJGQgICAgPSAkc2VsZi0+e3Bhc3NwaHJhc2V9OwogIGlmIChAXykgewogICAgdW5kZWYgJHNlbGYtPntrZXl9OwogICAgdW5kZWYgJHNlbGYtPntpdn07CiAgICAkc2VsZi0+e3Bhc3NwaHJhc2V9ID0gc2hpZnQ7CiAgfQogICRkOwp9CgpzdWIgY2lwaGVyICAgIHsgc2hpZnQtPntjaXBoZXJ9ICAgIH0Kc3ViIHBhZGRpbmcgICB7IHNoaWZ0LT57cGFkZGluZ30gICB9CnN1YiBrZXlzaXplICAgeyBzaGlmdC0+e2tleXNpemV9ICAgfQpzdWIgYmxvY2tzaXplIHsgc2hpZnQtPntibG9ja3NpemV9IH0Kc3ViIHBjYmMgICAgICB7IHNoaWZ0LT57cGNiY30gICAgICB9CnN1YiBoZWFkZXJfbW9kZSB7c2hpZnQtPntoZWFkZXJfbW9kZX0gfQpzdWIgbGVnYWN5X2hhY2sgeyBzaGlmdC0+e2xlZ2FjeV9oYWNrfSB9CgoxOwpfX0VORF9fCgo9aGVhZDEgTkFNRQoKQ3J5cHQ6OkNCQyAtIEVuY3J5cHQgRGF0YSB3aXRoIENpcGhlciBCbG9jayBDaGFpbmluZyBNb2RlCgo9aGVhZDEgU1lOT1BTSVMKCiAgdXNlIENyeXB0OjpDQkM7CiAgJGNpcGhlciA9IENyeXB0OjpDQkMtPm5ldyggLWtleSAgICA9PiAnbXkgc2VjcmV0IGtleScsCgkJCSAgICAgLWNpcGhlciA9PiAnQmxvd2Zpc2gnCgkJCSAgICApOwoKICAkY2lwaGVydGV4dCA9ICRjaXBoZXItPmVuY3J5cHQoIlRoaXMgZGF0YSBpcyBodXNoIGh1c2giKTsKICAkcGxhaW50ZXh0ICA9ICRjaXBoZXItPmRlY3J5cHQoJGNpcGhlcnRleHQpOwoKICAkY2lwaGVyLT5zdGFydCgnZW5jcnlwdGluZycpOwogIG9wZW4oRiwiLi9CSUdfRklMRSIpOwogIHdoaWxlIChyZWFkKEYsJGJ1ZmZlciwxMDI0KSkgewogICAgICBwcmludCAkY2lwaGVyLT5jcnlwdCgkYnVmZmVyKTsKICB9CiAgcHJpbnQgJGNpcGhlci0+ZmluaXNoOwoKICAjIGRvLWl0LXlvdXJzZWxmIG1vZGUgLS0gc3BlY2lmeSBrZXksIGluaXRpYWxpemF0aW9uIHZlY3RvciB5b3Vyc2VsZgogICRrZXkgICAgPSBDcnlwdDo6Q0JDLT5yYW5kb21fYnl0ZXMoOCk7ICAjIGFzc3VtaW5nIGEgOC1ieXRlIGJsb2NrIGNpcGhlcgogICRpdiAgICAgPSBDcnlwdDo6Q0JDLT5yYW5kb21fYnl0ZXMoOCk7CiAgJGNpcGhlciA9IENyeXB0OjpDQkMtPm5ldygtbGl0ZXJhbF9rZXkgPT4gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1rZXkgICAgICAgICA9PiAka2V5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLWl2ICAgICAgICAgID0+ICRpdiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1oZWFkZXIgICAgICA9PiAnbm9uZScpOwoKICAkY2lwaGVydGV4dCA9ICRjaXBoZXItPmVuY3J5cHQoIlRoaXMgZGF0YSBpcyBodXNoIGh1c2giKTsKICAkcGxhaW50ZXh0ICA9ICRjaXBoZXItPmRlY3J5cHQoJGNpcGhlcnRleHQpOwoKICAjIFJBTkRPTUlWLWNvbXBhdGlibGUgbW9kZQogICRjaXBoZXIgPSBDcnlwdDo6Q0JDLT5uZXcoLWtleSAgICAgICAgID0+ICdTdXBlciBTZWNyZXQhJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLWhlYWRlciAgICAgID0+ICdyYW5kb21pdicpOwoKCj1oZWFkMSBERVNDUklQVElPTgoKVGhpcyBtb2R1bGUgaXMgYSBQZXJsLW9ubHkgaW1wbGVtZW50YXRpb24gb2YgdGhlIGNyeXB0b2dyYXBoaWMgY2lwaGVyCmJsb2NrIGNoYWluaW5nIG1vZGUgKENCQykuICBJbiBjb21iaW5hdGlvbiB3aXRoIGEgYmxvY2sgY2lwaGVyIHN1Y2ggYXMKREVTIG9yIElERUEsIHlvdSBjYW4gZW5jcnlwdCBhbmQgZGVjcnlwdCBtZXNzYWdlcyBvZiBhcmJpdHJhcmlseSBsb25nCmxlbmd0aC4gIFRoZSBlbmNyeXB0ZWQgbWVzc2FnZXMgYXJlIGNvbXBhdGlibGUgd2l0aCB0aGUgZW5jcnlwdGlvbgpmb3JtYXQgdXNlZCBieSB0aGUgQjxPcGVuU1NMPiBwYWNrYWdlLgoKVG8gdXNlIHRoaXMgbW9kdWxlLCB5b3Ugd2lsbCBmaXJzdCBjcmVhdGUgYSBDcnlwdDo6Q0JDIGNpcGhlciBvYmplY3QKd2l0aCBuZXcoKS4gIEF0IHRoZSB0aW1lIG9mIGNpcGhlciBjcmVhdGlvbiwgeW91IHNwZWNpZnkgYW4gZW5jcnlwdGlvbgprZXkgdG8gdXNlIGFuZCwgb3B0aW9uYWxseSwgYSBibG9jayBlbmNyeXB0aW9uIGFsZ29yaXRobS4gIFlvdSB3aWxsCnRoZW4gY2FsbCB0aGUgc3RhcnQoKSBtZXRob2QgdG8gaW5pdGlhbGl6ZSB0aGUgZW5jcnlwdGlvbiBvcgpkZWNyeXB0aW9uIHByb2Nlc3MsIGNyeXB0KCkgdG8gZW5jcnlwdCBvciBkZWNyeXB0IG9uZSBvciBtb3JlIGJsb2NrcwpvZiBkYXRhLCBhbmQgbGFzdGx5IGZpbmlzaCgpLCB0byBwYWQgYW5kIGVuY3J5cHQgdGhlIGZpbmFsIGJsb2NrLiAgRm9yCnlvdXIgY29udmVuaWVuY2UsIHlvdSBjYW4gY2FsbCB0aGUgZW5jcnlwdCgpIGFuZCBkZWNyeXB0KCkgbWV0aG9kcyB0bwpvcGVyYXRlIG9uIGEgd2hvbGUgZGF0YSB2YWx1ZSBhdCBvbmNlLgoKPWhlYWQyIG5ldygpCgogICRjaXBoZXIgPSBDcnlwdDo6Q0JDLT5uZXcoIC1rZXkgICAgPT4gJ215IHNlY3JldCBrZXknLAoJCQkgICAgIC1jaXBoZXIgPT4gJ0Jsb3dmaXNoJywKCQkJICAgKTsKCiAgIyBvciAoZm9yIGNvbXBhdGliaWxpdHkgd2l0aCB2ZXJzaW9ucyBwcmlvciB0byAyLjEzKQogICRjaXBoZXIgPSBDcnlwdDo6Q0JDLT5uZXcoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICAgID0+ICdteSBzZWNyZXQga2V5JywKCQkJICAgICAgY2lwaGVyID0+ICdCbG93ZmlzaCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgkJCSAgICk7CgoKICAjIG9yIChmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHZlcnNpb25zIHByaW9yIHRvIDIuMCkKICAkY2lwaGVyID0gbmV3IENyeXB0OjpDQkMoJ215IHNlY3JldCBrZXknID0+ICdCbG93ZmlzaCcpOwoKVGhlIG5ldygpIG1ldGhvZCBjcmVhdGVzIGEgbmV3IENyeXB0OjpDQkMgb2JqZWN0LiBJdCBhY2NlcHRzIGEgbGlzdCBvZgotYXJndW1lbnQgPT4gdmFsdWUgcGFpcnMgc2VsZWN0ZWQgZnJvbSB0aGUgZm9sbG93aW5nIGxpc3Q6CgogIEFyZ3VtZW50ICAgICAgICBEZXNjcmlwdGlvbgogIC0tLS0tLS0tICAgICAgICAtLS0tLS0tLS0tLQoKICAta2V5ICAgICAgICAgICAgVGhlIGVuY3J5cHRpb24vZGVjcnlwdGlvbiBrZXkgKHJlcXVpcmVkKQoKICAtY2lwaGVyICAgICAgICAgVGhlIGNpcGhlciBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIENyeXB0OjpERVMpLCBvcgogICAgICAgICAgICAgICAgICAgICBhIHByZWV4aXN0aW5nIGNpcGhlciBvYmplY3QuCgogIC1zYWx0ICAgICAgICAgICBFbmFibGVzIE9wZW5TU0wtY29tcGF0aWJpbGl0eS4gSWYgZXF1YWwgdG8gYSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIG9mICIxIiB0aGVuIGNhdXNlcyBhIHJhbmRvbSBzYWx0IHRvIGJlIGdlbmVyYXRlZAogICAgICAgICAgICAgICAgICAgIGFuZCB1c2VkIHRvIGRlcml2ZSB0aGUgZW5jcnlwdGlvbiBrZXkgYW5kIElWLiBPdGhlcgogICAgICAgICAgICAgICAgICAgIHRydWUgdmFsdWVzIGFyZSB0YWtlbiB0byBiZSB0aGUgbGl0ZXJhbCBzYWx0LgoKICAtaXYgICAgICAgICAgICAgVGhlIGluaXRpYWxpemF0aW9uIHZlY3RvciAoSVYpCgogIC1oZWFkZXIgICAgICAgICBXaGF0IHR5cGUgb2YgaGVhZGVyIHRvIHByZXBlbmQgdG8gY2lwaGVydGV4dC4gT25lIG9mCiAgICAgICAgICAgICAgICAgICAgJ3NhbHQnICAgLS0gdXNlIE9wZW5TU0wtY29tcGF0aWJsZSBzYWx0ZWQgaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgJ3JhbmRvbWl2JyAtLSBSYW5kb21pdi1jb21wYXRpYmxlICJSYW5kb21JViIgaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgJ25vbmUnICAgLS0gcHJlcGVuZCBubyBoZWFkZXIgYXQgYWxsCgogIC1wYWRkaW5nICAgICAgICBUaGUgcGFkZGluZyBtZXRob2QsIG9uZSBvZiAic3RhbmRhcmQiIChkZWZhdWx0KSwKICAgICAgICAgICAgICAgICAgICAgInNwYWNlIiwgIm9uZWFuZHplcm9lcyIsICJyaWpuZGFlbF9jb21wYXQiLAogICAgICAgICAgICAgICAgICAgICAibnVsbCIsIG9yICJub25lIiAoZGVmYXVsdCAic3RhbmRhcmQiKS4KCiAgLWxpdGVyYWxfa2V5ICAgIElmIHRydWUsIHRoZSBrZXkgcHJvdmlkZWQgYnkgImtleSIgaXMgdXNlZCBkaXJlY3RseQogICAgICAgICAgICAgICAgICAgICAgZm9yIGVuY3J5cHRpb24vZGVjcnlwdGlvbi4gIE90aGVyd2lzZSB0aGUgYWN0dWFsCiAgICAgICAgICAgICAgICAgICAgICBrZXkgdXNlZCB3aWxsIGJlIGEgaGFzaCBvZiB0aGUgcHJvdmlkZWQga2V5LgoJCSAgICAgIChkZWZhdWx0IGZhbHNlKQoKICAtcGNiYyAgICAgICAgICAgV2hldGhlciB0byB1c2UgdGhlIFBDQkMgY2hhaW5pbmcgYWxnb3JpdGhtIHJhdGhlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YW5kYXJkIENCQyBhbGdvcml0aG0gKGRlZmF1bHQgZmFsc2UpLgoKICAta2V5c2l6ZSAgICAgICAgRm9yY2UgdGhlIGNpcGhlciBrZXlzaXplIHRvIHRoZSBpbmRpY2F0ZWQgbnVtYmVyIG9mIGJ5dGVzLgoKICAtYmxvY2tzaXplICAgICAgRm9yY2UgdGhlIGNpcGhlciBibG9ja3NpemUgdG8gdGhlIGluZGljYXRlZCBudW1iZXIgb2YgYnl0ZXMuCgogIC1pbnNlY3VyZV9sZWdhY3lfZGVjcnlwdAogICAgICAgICAgICAgICAgICBBbGxvdyBkZWNyeXB0aW9uIG9mIGRhdGEgZW5jcnlwdGVkIHVzaW5nIHRoZSAiUmFuZG9tSVYiIGhlYWRlcgogICAgICAgICAgICAgICAgICAgIHByb2R1Y2VkIGJ5IHByZS0yLjE3IHZlcnNpb25zIG9mIENyeXB0OjpDQkMuCgogIC1hZGRfaGVhZGVyICAgICBbZGVwcmVjYXRlZDsgdXNlIC1oZWFkZXIgaW5zdHJlYWRdCiAgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIGFkZCB0aGUgc2FsdCBhbmQgSVYgdG8gdGhlIGhlYWRlciBvZiB0aGUgb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgY2lwaGVyIHRleHQuCgogIC1yZWdlbmVyYXRlX2tleSBbZGVwcmVjYXRlZDsgdXNlIGxpdGVyYWxfa2V5IGluc3RlYWRdCiAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdG8gdXNlIGEgaGFzaCBvZiB0aGUgcHJvdmlkZWQga2V5IHRvIGdlbmVyYXRlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjdHVhbCBlbmNyeXB0aW9uIGtleSAoZGVmYXVsdCB0cnVlKQoKICAtcHJlcGVuZF9pdiAgICAgW2RlcHJlY2F0ZWQ7IHVzZSBhZGRfaGVhZGVyIGluc3RlYWRdCiAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdG8gcHJlcGVuZCB0aGUgSVYgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlbmNyeXB0ZWQgc3RyZWFtIChkZWZhdWx0IHRydWUpCgpDcnlwdDo6Q0JDIHJlcXVpcmVzIHRocmVlIHBpZWNlcyBvZiBpbmZvcm1hdGlvbiB0byBkbyBpdHMgam9iLiBGaXJzdAppdCBuZWVkcyB0aGUgbmFtZSBvZiB0aGUgYmxvY2sgY2lwaGVyIGFsZ29yaXRobSB0aGF0IHdpbGwgZW5jcnlwdCBvcgpkZWNyeXB0IHRoZSBkYXRhIGluIGJsb2NrcyBvZiBmaXhlZCBsZW5ndGgga25vd24gYXMgdGhlIGNpcGhlcidzCiJibG9ja3NpemUuIiBTZWNvbmQsIGl0IG5lZWRzIGFuIGVuY3J5cHRpb24vZGVjcnlwdGlvbiBrZXkgdG8gcGFzcyB0bwp0aGUgYmxvY2sgY2lwaGVyLiBUaGlyZCwgaXQgbmVlZHMgYW4gaW5pdGlhbGl6YXRpb24gdmVjdG9yIChJVikgdGhhdAp3aWxsIGJlIHVzZWQgdG8gcHJvcGFnYXRlIGluZm9ybWF0aW9uIGZyb20gb25lIGVuY3J5cHRlZCBibG9jayB0byB0aGUKbmV4dC4gQm90aCB0aGUga2V5IGFuZCB0aGUgSVYgbXVzdCBiZSBleGFjdGx5IHRoZSBzYW1lIGxlbmd0aCBhcyB0aGUKY2hvc2VuIGNpcGhlcidzIGJsb2Nrc2l6ZS4KCkNyeXB0OjpDQkMgY2FuIGRlcml2ZSB0aGUga2V5IGFuZCB0aGUgSVYgZnJvbSBhIHBhc3NwaHJhc2UgdGhhdCB5b3UKcHJvdmlkZSwgb3IgY2FuIGxldCB5b3Ugc3BlY2lmeSB0aGUgdHJ1ZSBrZXkgYW5kIElWIG1hbnVhbGx5LiBJbgphZGRpdGlvbiwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiBlbWJlZGRpbmcgZW5vdWdoIGluZm9ybWF0aW9uIHRvCnJlZ2VuZXJhdGUgdGhlIElWIGluIGEgc2hvcnQgaGVhZGVyIHRoYXQgaXMgZW1pdHRlZCBhdCB0aGUgc3RhcnQgb2YKdGhlIGVuY3J5cHRlZCBzdHJlYW0sIG9yIG91dHB1dHRpbmcgYSBoZWFkZXJsZXNzIGVuY3J5cHRpb24gc3RyZWFtLiBJbgp0aGUgZmlyc3QgY2FzZSwgQ3J5cHQ6OkNCQyB3aWxsIGJlIGFibGUgdG8gZGVjcnlwdCB0aGUgc3RyZWFtIGdpdmVuCmp1c3QgdGhlIG9yaWdpbmFsIGtleSBvciBwYXNzcGhyYXNlLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHlvdSB3aWxsIGhhdmUKdG8gcHJvdmlkZSB0aGUgb3JpZ2luYWwgSVYgYXMgd2VsbCBhcyB0aGUga2V5L3Bhc3NwaHJhc2UuCgpUaGUgQjwtY2lwaGVyPiBvcHRpb24gc3BlY2lmaWVzIHdoaWNoIGJsb2NrIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlIHRvCmVuY29kZSBlYWNoIHNlY3Rpb24gb2YgdGhlIG1lc3NhZ2UuICBUaGlzIGFyZ3VtZW50IGlzIG9wdGlvbmFsIGFuZAp3aWxsIGRlZmF1bHQgdG8gdGhlIHF1aWNrLWJ1dC1ub3QtdmVyeS1zZWN1cmUgREVTIGFsZ29yaXRobSB1bmxlc3MKc3BlY2lmaWVkIG90aGVyd2lzZS4gWW91IG1heSB1c2UgYW55IGNvbXBhdGlibGUgYmxvY2sgZW5jcnlwdGlvbgphbGdvcml0aG0gdGhhdCB5b3UgaGF2ZSBpbnN0YWxsZWQuIEN1cnJlbnRseSwgdGhpcyBpbmNsdWRlcwpDcnlwdDo6REVTLCBDcnlwdDo6REVTX0VERTMsIENyeXB0OjpJREVBLCBDcnlwdDo6Qmxvd2Zpc2gsCkNyeXB0OjpDQVNUNSBhbmQgQ3J5cHQ6OlJpam5kYWVsLiBZb3UgbWF5IHJlZmVyIHRvIHRoZW0gdXNpbmcgdGhlaXIKZnVsbCBuYW1lcyAoIkNyeXB0OjpJREVBIikgb3IgaW4gYWJicmV2aWF0ZWQgZm9ybSAoIklERUEiKS4KCkluc3RlYWQgb2YgcGFzc2luZyB0aGUgbmFtZSBvZiBhIGNpcGhlciBjbGFzcywgeW91IG1heSBwYXNzIGFuCmFscmVhZHktY3JlYXRlZCBibG9jayBjaXBoZXIgb2JqZWN0LiBUaGlzIGFsbG93cyB5b3UgdG8gdGFrZSBhZHZhbnRhZ2UKb2YgY2lwaGVyIGFsZ29yaXRobXMgdGhhdCBoYXZlIHBhcmFtZXRlcml6ZWQgbmV3KCkgbWV0aG9kcywgc3VjaCBhcwpDcnlwdDo6RWtzYmxvd2Zpc2g6CgogIG15ICRla3NibG93ZmlzaCA9IENyeXB0OjpFa3NibG93ZmlzaC0+bmV3KDgsJHNhbHQsJGtleSk7CiAgbXkgJGNiYyAgICAgICAgID0gQ3J5cHQ6OkNCQy0+bmV3KC1jaXBoZXI9PiRla3NibG93ZmlzaCk7CgpUaGUgQjwta2V5PiBhcmd1bWVudCBwcm92aWRlcyBlaXRoZXIgYSBwYXNzcGhyYXNlIHRvIHVzZSB0byBnZW5lcmF0ZQp0aGUgZW5jcnlwdGlvbiBrZXksIG9yIHRoZSBsaXRlcmFsIHZhbHVlIG9mIHRoZSBibG9jayBjaXBoZXIga2V5LiBJZgp1c2VkIGluIHBhc3NwaHJhc2UgbW9kZSAod2hpY2ggaXMgdGhlIGRlZmF1bHQpLCBCPC1rZXk+IGNhbiBiZSBhbnkKbnVtYmVyIG9mIGNoYXJhY3RlcnM7IHRoZSBhY3R1YWwga2V5IHdpbGwgYmUgZGVyaXZlZCBieSBwYXNzaW5nIHRoZQpwYXNzcGhyYXNlIHRocm91Z2ggYSBzZXJpZXMgb2YgTUQ1IGhhc2ggb3BlcmF0aW9ucy4gVG8gdGFrZSBmdWxsCmFkdmFudGFnZSBvZiBhIGdpdmVuIGJsb2NrIGNpcGhlciwgdGhlIGxlbmd0aCBvZiB0aGUgcGFzc3BocmFzZSBzaG91bGQKYmUgYXQgbGVhc3QgZXF1YWwgdG8gdGhlIGNpcGhlcidzIGJsb2Nrc2l6ZS4gVG8gc2tpcCB0aGlzIGhhc2hpbmcKb3BlcmF0aW9uIGFuZCBzcGVjaWZ5IHRoZSBrZXkgZGlyZWN0bHksIHBhc3MgYSB0cnVlIHZhbHVlIHRvIHRoZQpCPC1saXRlcmFsX2tleT4gb3B0aW9uLiBJbiB0aGlzIGNhc2UsIHlvdSBzaG91bGQgY2hvb3NlIGEga2V5IG9mCmxlbmd0aCBleGFjdGx5IGVxdWFsIHRvIHRoZSBjaXBoZXIncyBrZXkgbGVuZ3RoLiBZb3Ugc2hvdWxkIGFsc28Kc3BlY2lmeSB0aGUgSVYgeW91cnNlbGYgYW5kIGEgLWhlYWRlciBtb2RlIG9mICdub25lJy4KCklmIHlvdSBwYXNzIGFuIGV4aXN0aW5nIENyeXB0OjoqIG9iamVjdCB0byBuZXcoKSwgdGhlbiB0aGUgLWtleQphcmd1bWVudCBpcyBpZ25vcmVkIGFuZCB0aGUgbW9kdWxlIHdpbGwgZ2VuZXJhdGUgYSB3YXJuaW5nLgoKVGhlIEI8LWhlYWRlcj4gYXJndW1lbnQgc3BlY2lmaWVzIHdoYXQgdHlwZSBvZiBoZWFkZXIsIGlmIGFueSwgdG8KcHJlcGVuZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBlbmNyeXB0ZWQgZGF0YSBzdHJlYW0uIFRoZSBoZWFkZXIKYWxsb3dzIENyeXB0OjpDQkMgdG8gcmVnZW5lcmF0ZSB0aGUgb3JpZ2luYWwgSVYgYW5kIGNvcnJlY3RseSBkZWNyeXB0CnRoZSBkYXRhIHdpdGhvdXQgeW91ciBoYXZpbmcgdG8gcHJvdmlkZSB0aGUgc2FtZSBJViB1c2VkIHRvIGVuY3J5cHQKdGhlIGRhdGEuIFZhbGlkIHZhbHVlcyBmb3IgdGhlIEI8LWhlYWRlcj4gYXJlOgoKICJzYWx0IiAtLSBDb21iaW5lIHRoZSBwYXNzcGhyYXNlIHdpdGggYW4gOC1ieXRlIHJhbmRvbSB2YWx1ZSB0bwogICAgICAgICAgIGdlbmVyYXRlIGJvdGggdGhlIGJsb2NrIGNpcGhlciBrZXkgYW5kIHRoZSBJViBmcm9tIHRoZQogICAgICAgICAgIHByb3ZpZGVkIHBhc3NwaHJhc2UuIFRoZSBzYWx0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlCiAgICAgICAgICAgYmVnaW5uaW5nIG9mIHRoZSBkYXRhIHN0cmVhbSBhbGxvd2luZyBkZWNyeXB0aW9uIHRvCiAgICAgICAgICAgcmVnZW5lcmF0ZSBib3RoIHRoZSBrZXkgYW5kIElWIGdpdmVuIHRoZSBjb3JyZWN0IHBhc3NwaHJhc2UuCiAgICAgICAgICAgVGhpcyBtZXRob2QgaXMgY29tcGF0aWJsZSB3aXRoIGN1cnJlbnQgdmVyc2lvbnMgb2YgT3BlblNTTC4KCiAicmFuZG9taXYiIC0tIEdlbmVyYXRlIHRoZSBibG9jayBjaXBoZXIga2V5IGZyb20gdGhlIHBhc3NwaHJhc2UsIGFuZAogICAgICAgICAgIGNob29zZSBhIHJhbmRvbSA4LWJ5dGUgdmFsdWUgdG8gdXNlIGFzIHRoZSBJVi4gVGhlIElWIHdpbGwKICAgICAgICAgICBiZSBwcmVwZW5kZWQgdG8gdGhlIGRhdGEgc3RyZWFtLiBUaGlzIG1ldGhvZCBpcyBjb21wYXRpYmxlCiAgICAgICAgICAgd2l0aCBjaXBoZXJ0ZXh0IHByb2R1Y2VkIGJ5IHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5IHByaW9yIHRvCiAgICAgICAgICAgMi4xNywgYnV0IGlzIGluY29tcGF0aWJsZSB3aXRoIGJsb2NrIGNpcGhlcnMgdGhhdCBoYXZlIG5vbgogICAgICAgICAgIDgtYnl0ZSBibG9jayBzaXplcywgc3VjaCBhcyBSaWpuZGFlbC4gQ3J5cHQ6OkNCQyB3aWxsIGV4aXQKICAgICAgICAgICB3aXRoIGEgZmF0YWwgZXJyb3IgaWYgeW91IHRyeSB0byB1c2UgdGhpcyBoZWFkZXIgbW9kZSB3aXRoIGEKICAgICAgICAgICBub24gOC1ieXRlIGNpcGhlci4KCiAibm9uZSIgICAtLSBEbyBub3QgZ2VuZXJhdGUgYSBoZWFkZXIuIFRvIGRlY3J5cHQgYSBzdHJlYW0gZW5jcnlwdGVkCiAgICAgICAgICAgaW4gdGhpcyB3YXksIHlvdSB3aWxsIGhhdmUgdG8gcHJvdmlkZSB0aGUgb3JpZ2luYWwgSVYKICAgICAgICAgICBtYW51YWxseS4KCkI8VGhlICJzYWx0IiBoZWFkZXIgaXMgbm93IHRoZSBkZWZhdWx0IGFzIG9mIENyeXB0OjpDQkMgdmVyc2lvbiAyLjE3LiBJbgphbGwgZWFybGllciB2ZXJzaW9ucyAicmFuZG9taXYiIHdhcyB0aGUgZGVmYXVsdC4+CgpXaGVuIHVzaW5nIGEgInNhbHQiIGhlYWRlciwgeW91IG1heSBzcGVjaWZ5IHlvdXIgb3duIHZhbHVlIG9mIHRoZQpzYWx0LCBieSBwYXNzaW5nIHRoZSBkZXNpcmVkIDgtYnl0ZSBzYWx0IHRvIHRoZSBCPC1zYWx0Pgphcmd1bWVudC4gT3RoZXJ3aXNlLCB0aGUgbW9kdWxlIHdpbGwgZ2VuZXJhdGUgYSByYW5kb20gc2FsdCBmb3IKeW91LiBDcnlwdDo6Q0JDIHdpbGwgZ2VuZXJhdGUgYSBmYXRhbCBlcnJvciBpZiB5b3Ugc3BlY2lmeSBhIHNhbHQKdmFsdWUgdGhhdCBpc24ndCBleGFjdGx5IDggYnl0ZXMgbG9uZy4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkKcmVhc29ucywgcGFzc2luZyBhIHZhbHVlIG9mICIxIiB3aWxsIGdlbmVyYXRlIGEgcmFuZG9tIHNhbHQsIHRoZSBzYW1lCmFzIGlmIG5vIEI8LXNhbHQ+IGFyZ3VtZW50IHdhcyBwcm92aWRlZC4KClRoZSBCPC1wYWRkaW5nPiBhcmd1bWVudCBjb250cm9scyBob3cgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZQplbmNyeXB0ZWQgc3RyZWFtIGFyZSBkZWFsdCB3aXRoIHdoZW4gdGhleSBub3QgYW4gZXhhY3QgbXVsdGlwbGUgb2YgdGhlCmNpcGhlciBibG9jayBsZW5ndGguIFRoZSBkZWZhdWx0IGlzICJzdGFuZGFyZCIsIHRoZSBtZXRob2Qgc3BlY2lmaWVkCmluIFBLQ1MjNS4KClRoZSBCPC1wY2JjPiBhcmd1bWVudCwgaWYgdHJ1ZSwgYWN0aXZhdGVzIGEgbW9kaWZpZWQgY2hhaW5pbmcgbW9kZQprbm93biBhcyBQQ0JDLiBJdCBwcm92aWRlcyBiZXR0ZXIgZXJyb3IgcHJvcGFnYXRpb24gY2hhcmFjdGVyaXN0aWNzCnRoYW4gdGhlIGRlZmF1bHQgQ0JDIGVuY3J5cHRpb24gYW5kIGlzIHJlcXVpcmVkIGZvciBhdXRoZW50aWNhdGluZyB0bwpLZXJiZXJvczQgc3lzdGVtcyAoc2VlIFJGQyAyMjIyKS4KClRoZSBCPC1rZXlzaXplPiBhbmQgQjwtYmxvY2tzaXplPiBhcmd1bWVudHMgY2FuIGJlIHVzZWQgdG8gZm9yY2UgdGhlCmNpcGhlcidzIGtleXNpemUgYW5kL29yIGJsb2Nrc2l6ZS4gVGhpcyBpcyBvbmx5IGN1cnJlbnRseSB1c2VmdWwgZm9yCnRoZSBDcnlwdDo6Qmxvd2Zpc2ggbW9kdWxlLCB3aGljaCBhY2NlcHRzIGEgdmFyaWFibGUgbGVuZ3RoCmtleXNpemUuIElmIC1rZXlzaXplIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gQ3J5cHQ6OkNCQyB3aWxsIHVzZSB0aGUKbWF4aW11bSBsZW5ndGggQmxvd2Zpc2gga2V5IHNpemUgb2YgNTYgYnl0ZXMgKDQ0OCBiaXRzKS4gVGhlIE9wZW5zc2wKbGlicmFyeSBkZWZhdWx0cyB0byAxNiBieXRlIEJsb3dmaXNoIGtleSBzaXplcywgc28gZm9yIGNvbXBhdGliaWxpdHkKd2l0aCBPcGVuc3NsIHlvdSBtYXkgd2lzaCB0byBzZXQgLWtleXNpemU9PjE2LiBUaGVyZSBhcmUgY3VycmVudGx5IG5vCkNyeXB0OjoqIG1vZHVsZXMgdGhhdCBoYXZlIHZhcmlhYmxlIGJsb2NrIHNpemVzLCBidXQgYW4gb3B0aW9uIHRvCmNoYW5nZSB0aGUgYmxvY2sgc2l6ZSBpcyBwcm92aWRlZCBqdXN0IGluIGNhc2UuCgpGb3IgY29tcGF0aWJpbGl0eSB3aXRoIGVhcmxpZXIgdmVyc2lvbnMgb2YgdGhpcyBtb2R1bGUsIHlvdSBjYW4KcHJvdmlkZSBuZXcoKSB3aXRoIGEgaGFzaHJlZiBjb250YWluaW5nIGtleS92YWx1ZSBwYWlycy4gVGhlIGtleSBuYW1lcwphcmUgdGhlIHNhbWUgYXMgdGhlIGFyZ3VtZW50cyBkZXNjcmliZWQgZWFybGllciwgYnV0IHdpdGhvdXQgdGhlCmluaXRpYWwgaHlwaGVuLiAgWW91IG1heSBhbHNvIGNhbGwgbmV3KCkgd2l0aCBvbmUgb3IgdHdvIHBvc2l0aW9uYWwKYXJndW1lbnRzLCBpbiB3aGljaCBjYXNlIHRoZSBmaXJzdCBhcmd1bWVudCBpcyB0YWtlbiB0byBiZSB0aGUga2V5IGFuZAp0aGUgc2Vjb25kIHRvIGJlIHRoZSBvcHRpb25hbCBibG9jayBjaXBoZXIgYWxnb3JpdGhtLgoKQjxJTVBPUlRBTlQgTk9URTo+IFZlcnNpb25zIG9mIHRoaXMgbW9kdWxlIHByaW9yIHRvIDIuMTcgd2VyZQppbmNvcnJlY3RseSB1c2luZyA4LWJ5dGUgSVZzIHdoZW4gZ2VuZXJhdGluZyB0aGUgInJhbmRvbWl2IiBzdHlsZSBvZgpoZWFkZXIsIGV2ZW4gd2hlbiB0aGUgY2hvc2VuIGNpcGhlcidzIGJsb2Nrc2l6ZSB3YXMgZ3JlYXRlciB0aGFuIDgKYnl0ZXMuIFRoaXMgcHJpbWFyaWx5IGFmZmVjdHMgdGhlIFJpam5kYWVsIGFsZ29yaXRobS4gU3VjaCBlbmNyeXB0ZWQKZGF0YSBzdHJlYW1zIHdlcmUgQjxub3Qgc2VjdXJlPi4gRnJvbSB2ZXJzaW9ucyAyLjE3IG9ud2FyZCwgQ3J5cHQ6OkNCQwp3aWxsIHJlZnVzZSB0byBlbmNyeXB0IG9yIGRlY3J5cHQgdXNpbmcgdGhlICJyYW5kb21pdiIgaGVhZGVyIGFuZCBub24tOApieXRlIGJsb2NrIGNpcGhlcnMuIFRvIGRlY3J5cHQgbGVnYWN5IGRhdGEgZW5jcnlwdGVkIHdpdGggZWFybGllcgp2ZXJzaW9ucyBvZiB0aGUgbW9kdWxlLCB5b3UgY2FuIG92ZXJyaWRlIHRoZSBjaGVjayB1c2luZyB0aGUKQjwtaW5zZWN1cmVfbGVnYWN5X2RlY3J5cHQ+IG9wdGlvbi4gSXQgaXMgbm90IHBvc3NpYmxlIHRvIG92ZXJyaWRlCmVuY3J5cHRpb24uIFBsZWFzZSB1c2UgdGhlIGRlZmF1bHQgInNhbHQiIGhlYWRlciBzdHlsZSwgb3Igbm8gaGVhZGVycwphdCBhbGwuCgo9aGVhZDIgc3RhcnQoKQoKICAgJGNpcGhlci0+c3RhcnQoJ2VuY3J5cHRpbmcnKTsKICAgJGNpcGhlci0+c3RhcnQoJ2RlY3J5cHRpbmcnKTsKClRoZSBzdGFydCgpIG1ldGhvZCBwcmVwYXJlcyB0aGUgY2lwaGVyIGZvciBhIHNlcmllcyBvZiBlbmNyeXB0aW9uIG9yCmRlY3J5cHRpb24gc3RlcHMsIHJlc2V0dGluZyB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGNpcGhlciBpZgpuZWNlc3NhcnkuICBZb3UgbXVzdCBwcm92aWRlIGEgc3RyaW5nIGluZGljYXRpbmcgd2hldGhlciB5b3Ugd2lzaCB0bwplbmNyeXB0IG9yIGRlY3J5cHQuICAiRSIgb3IgYW55IHdvcmQgdGhhdCBiZWdpbnMgd2l0aCBhbiAiZSIgaW5kaWNhdGVzCmVuY3J5cHRpb24uICAiRCIgb3IgYW55IHdvcmQgdGhhdCBiZWdpbnMgd2l0aCBhICJkIiBpbmRpY2F0ZXMKZGVjcnlwdGlvbi4KCj1oZWFkMiBjcnlwdCgpCgogICAkY2lwaGVydGV4dCA9ICRjaXBoZXItPmNyeXB0KCRwbGFpbnRleHQpOwoKQWZ0ZXIgY2FsbGluZyBzdGFydCgpLCB5b3Ugc2hvdWxkIGNhbGwgY3J5cHQoKSBhcyBtYW55IHRpbWVzIGFzCm5lY2Vzc2FyeSB0byBlbmNyeXB0IHRoZSBkZXNpcmVkIGRhdGEuICAKCj1oZWFkMiAgZmluaXNoKCkKCiAgICRjaXBoZXJ0ZXh0ID0gJGNpcGhlci0+ZmluaXNoKCk7CgpUaGUgQ0JDIGFsZ29yaXRobSBtdXN0IGJ1ZmZlciBkYXRhIGJsb2NrcyBpbmVybmFsbHkgdW50aWwgdGhleSBhcmUKZXZlbiBtdWx0aXBsZXMgb2YgdGhlIGVuY3J5cHRpb24gYWxnb3JpdGhtJ3MgYmxvY2tzaXplICh0eXBpY2FsbHkgOApieXRlcykuICBBZnRlciB0aGUgbGFzdCBjYWxsIHRvIGNyeXB0KCkgeW91IHNob3VsZCBjYWxsIGZpbmlzaCgpLgpUaGlzIGZsdXNoZXMgdGhlIGludGVybmFsIGJ1ZmZlciBhbmQgcmV0dXJucyBhbnkgbGVmdG92ZXIgY2lwaGVydGV4dC4KCkluIGEgdHlwaWNhbCBhcHBsaWNhdGlvbiB5b3Ugd2lsbCByZWFkIHRoZSBwbGFpbnRleHQgZnJvbSBhIGZpbGUgb3IKaW5wdXQgc3RyZWFtIGFuZCB3cml0ZSB0aGUgcmVzdWx0IHRvIHN0YW5kYXJkIG91dHB1dCBpbiBhIGxvb3AgdGhhdAptaWdodCBsb29rIGxpa2UgdGhpczoKCiAgJGNpcGhlciA9IG5ldyBDcnlwdDo6Q0JDKCdoZXkganVkZSEnKTsKICAkY2lwaGVyLT5zdGFydCgnZW5jcnlwdGluZycpOwogIHByaW50ICRjaXBoZXItPmNyeXB0KCRfKSB3aGlsZSA8PjsKICBwcmludCAkY2lwaGVyLT5maW5pc2goKTsKCj1oZWFkMiBlbmNyeXB0KCkKCiAgJGNpcGhlcnRleHQgPSAkY2lwaGVyLT5lbmNyeXB0KCRwbGFpbnRleHQpCgpUaGlzIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHJ1bnMgdGhlIGVudGlyZSBzZXF1ZW5jZSBvZiBzdGFydCgpLCBjcnlwdCgpCmFuZCBmaW5pc2goKSBmb3IgeW91LCBwcm9jZXNzaW5nIHRoZSBwcm92aWRlZCBwbGFpbnRleHQgYW5kIHJldHVybmluZwp0aGUgY29ycmVzcG9uZGluZyBjaXBoZXJ0ZXh0LgoKPWhlYWQyIGRlY3J5cHQoKQoKICAkcGxhaW50ZXh0ID0gJGNpcGhlci0+ZGVjcnlwdCgkY2lwaGVydGV4dCkKClRoaXMgY29udmVuaWVuY2UgZnVuY3Rpb24gcnVucyB0aGUgZW50aXJlIHNlcXVlbmNlIG9mIHN0YXJ0KCksIGNyeXB0KCkKYW5kIGZpbmlzaCgpIGZvciB5b3UsIHByb2Nlc3NpbmcgdGhlIHByb3ZpZGVkIGNpcGhlcnRleHQgYW5kIHJldHVybmluZwp0aGUgY29ycmVzcG9uZGluZyBwbGFpbnRleHQuCgo9aGVhZDIgZW5jcnlwdF9oZXgoKSwgZGVjcnlwdF9oZXgoKQoKICAkY2lwaGVydGV4dCA9ICRjaXBoZXItPmVuY3J5cHRfaGV4KCRwbGFpbnRleHQpCiAgJHBsYWludGV4dCAgPSAkY2lwaGVyLT5kZWNyeXB0X2hleCgkY2lwaGVydGV4dCkKClRoZXNlIGFyZSBjb252ZW5pZW5jZSBmdW5jdGlvbnMgdGhhdCBvcGVyYXRlIG9uIGNpcGhlcnRleHQgaW4gYQpoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbi4gIEI8ZW5jcnlwdF9oZXgoJHBsYWludGV4dCk+IGlzIGV4YWN0bHkKZXF1aXZhbGVudCB0byBCPHVucGFjaygnSConLGVuY3J5cHQoJHBsYWludGV4dCkpPi4gIFRoZXNlIGZ1bmN0aW9ucwpjYW4gYmUgdXNlZnVsIGlmLCBmb3IgZXhhbXBsZSwgeW91IHdpc2ggdG8gcGxhY2UgdGhlIGVuY3J5cHRlZCBpbiBhbgplbWFpbCBtZXNzYWdlLgoKPWhlYWQyIGdldF9pbml0aWFsaXphdGlvbl92ZWN0b3IoKQoKICAkaXYgPSAkY2lwaGVyLT5nZXRfaW5pdGlhbGl6YXRpb25fdmVjdG9yKCkKClRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIElWIHVzZWQgaW4gZW5jcnlwdGlvbiBhbmQgb3IgZGVjcnlwdGlvbi4KVGhlIElWIGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIHNldCB3aGVuIGVuY3J5cHRpbmcgdW50aWwgc3RhcnQoKSBpcwpjYWxsZWQsIGFuZCB3aGVuIGRlY3J5cHRpbmcgdW50aWwgY3J5cHQoKSBpcyBjYWxsZWQgdGhlIGZpcnN0CnRpbWUuIFVubGVzcyB0aGUgSVYgd2FzIG1hbnVhbGx5IHNwZWNpZmllZCBpbiB0aGUgbmV3KCkgY2FsbCwgdGhlIElWCndpbGwgY2hhbmdlIHdpdGggZXZlcnkgY29tcGxldGUgZW5jcnlwdGlvbiBvcGVyYXRpb24uCgo9aGVhZDIgc2V0X2luaXRpYWxpemF0aW9uX3ZlY3RvcigpCgogICRjaXBoZXItPnNldF9pbml0aWFsaXphdGlvbl92ZWN0b3IoJzc2NTQzMjEwJykKClRoaXMgZnVuY3Rpb24gc2V0cyB0aGUgSVYgdXNlZCBpbiBlbmNyeXB0aW9uIGFuZC9vciBkZWNyeXB0aW9uLiBUaGlzCmZ1bmN0aW9uIG1heSBiZSB1c2VmdWwgaWYgdGhlIElWIGlzIG5vdCBjb250YWluZWQgd2l0aGluIHRoZQpjaXBoZXJ0ZXh0IHN0cmluZyBiZWluZyBkZWNyeXB0ZWQsIG9yIGlmIGEgcGFydGljdWxhciBJViBpcyBkZXNpcmVkCmZvciBlbmNyeXB0aW9uLiAgTm90ZSB0aGF0IHRoZSBJViBtdXN0IG1hdGNoIHRoZSBjaG9zZW4gY2lwaGVyJ3MKYmxvY2tzaXplIGJ5dGVzIGluIGxlbmd0aC4KCj1oZWFkMiBpdigpCgogICRpdiA9ICRjaXBoZXItPml2KCk7CiAgJGNpcGhlci0+aXYoJG5ld19pdik7CgpBcyBhYm92ZSwgYnV0IHVzaW5nIGEgc2luZ2xlIG1ldGhvZCBjYWxsLgoKPWhlYWQyIGtleSgpCgogICRrZXkgPSAkY2lwaGVyLT5rZXkoKTsKICAkY2lwaGVyLT5rZXkoJG5ld19rZXkpOwoKR2V0IG9yIHNldCB0aGUgYmxvY2sgY2lwaGVyIGtleSB1c2VkIGZvciBlbmNyeXB0aW9uL2RlY3J5cHRpb24uICBXaGVuCmVuY3J5cHRpbmcsIHRoZSBrZXkgaXMgbm90IGd1YXJhbnRlZWQgdG8gZXhpc3QgdW50aWwgc3RhcnQoKSBpcwpjYWxsZWQsIGFuZCB3aGVuIGRlY3J5cHRpbmcsIHRoZSBrZXkgaXMgbm90IGd1YXJhbnRlZWQgdG8gZXhpc3QgdW50aWwKYWZ0ZXIgdGhlIGZpcnN0IGNhbGwgdG8gY3J5cHQoKS4gVGhlIGtleSBtdXN0IG1hdGNoIHRoZSBsZW5ndGgKcmVxdWlyZWQgYnkgdGhlIHVuZGVybHlpbmcgYmxvY2sgY2lwaGVyLgoKV2hlbiBzYWx0ZWQgaGVhZGVycyBhcmUgdXNlZCwgdGhlIGJsb2NrIGNpcGhlciBrZXkgd2lsbCBjaGFuZ2UgYWZ0ZXIKZWFjaCBjb21wbGV0ZSBzZXF1ZW5jZSBvZiBlbmNyeXB0aW9uIG9wZXJhdGlvbnMuCgo9aGVhZDIgc2FsdCgpCgogICRzYWx0ID0gJGNpcGhlci0+c2FsdCgpOwogICRjaXBoZXItPnNhbHQoJG5ld19zYWx0KTsKCkdldCBvciBzZXQgdGhlIHNhbHQgdXNlZCBmb3IgZGVyaXZpbmcgdGhlIGVuY3J5cHRpb24ga2V5IGFuZCBJViB3aGVuCmluIE9wZW5TU0wgY29tcGF0aWJpbGl0eSBtb2RlLgoKPWhlYWQyIHBhc3NwaHJhc2UoKQoKICAkcGFzc3BocmFzZSA9ICRjaXBoZXItPnBhc3NwaHJhc2UoKTsKICAkY2lwaGVyLT5wYXNzcGhyYXNlKCRuZXdfcGFzc3BocmFzZSk7CgpUaGlzIGdldHMgb3Igc2V0cyB0aGUgdmFsdWUgb2YgdGhlIEI8a2V5PiBwYXNzZWQgdG8gbmV3KCkgd2hlbgpCPGxpdGVyYWxfa2V5PiBpcyBmYWxzZS4KCj1oZWFkMiAkZGF0YSA9IGdldF9yYW5kb21fYnl0ZXMoJG51bWJ5dGVzKQoKUmV0dXJuICRudW1ieXRlcyB3b3J0aCBvZiByYW5kb20gZGF0YS4gT24gc3lzdGVtcyB0aGF0IHN1cHBvcnQgdGhlCiIvZGV2L3VyYW5kb20iIGRldmljZSBmaWxlLCB0aGlzIGRhdGEgd2lsbCBiZSByZWFkIGZyb20gdGhlCmRldmljZS4gT3RoZXJ3aXNlLCBpdCB3aWxsIGJlIGdlbmVyYXRlZCBieSByZXBlYXRlZCBjYWxscyB0byB0aGUgUGVybApyYW5kKCkgZnVuY3Rpb24uCgo9aGVhZDIgY2lwaGVyKCksIHBhZGRpbmcoKSwga2V5c2l6ZSgpLCBibG9ja3NpemUoKSwgcGNiYygpCgpUaGVzZSByZWFkLW9ubHkgbWV0aG9kcyByZXR1cm4gdGhlIGlkZW50aXR5IG9mIHRoZSBjaG9zZW4gYmxvY2sgY2lwaGVyCmFsZ29yaXRobSwgcGFkZGluZyBtZXRob2QsIGtleSBhbmQgYmxvY2sgc2l6ZSBvZiB0aGUgY2hvc2VuIGJsb2NrCmNpcGhlciwgYW5kIHdoZXRoZXIgUENCQyBjaGFpbmluZyBpcyBpbiBlZmZlY3QuCgo9aGVhZDIgUGFkZGluZyBtZXRob2RzCgpVc2UgdGhlICdwYWRkaW5nJyBvcHRpb24gdG8gY2hhbmdlIHRoZSBwYWRkaW5nIG1ldGhvZC4KCldoZW4gdGhlIGxhc3QgYmxvY2sgb2YgcGxhaW50ZXh0IGlzIHNob3J0ZXIgdGhhbiB0aGUgYmxvY2sgc2l6ZSwKaXQgbXVzdCBiZSBwYWRkZWQuIFBhZGRpbmcgbWV0aG9kcyBpbmNsdWRlOiAic3RhbmRhcmQiIChpLmUuLCBQS0NTIzUpLAoib25lYW5kemVyb2VzIiwgInNwYWNlIiwgInJpam5kYWVsX2NvbXBhdCIsICJudWxsIiwgYW5kICJub25lIi4KCiAgIHN0YW5kYXJkOiAoZGVmYXVsdCkgQmluYXJ5IHNhZmUKICAgICAgcGFkcyB3aXRoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCBzaG91bGQgYmUgdHJ1bmNhdGVkLiBTbywgaWYgCiAgICAgIGJsb2Nrc2l6ZSBpcyA4LCB0aGVuICIwQTBCMEMiIHdpbGwgYmUgcGFkZGVkIHdpdGggIjA1IiwgcmVzdWx0aW5nCiAgICAgIGluICIwQTBCMEMwNTA1MDUwNTA1Ii4gSWYgdGhlIGZpbmFsIGJsb2NrIGlzIGEgZnVsbCBibG9jayBvZiA4IAogICAgICBieXRlcywgdGhlbiBhIHdob2xlIGJsb2NrIG9mICIwODA4MDgwODA4MDgwODA4IiBpcyBhcHBlbmRlZC4KCiAgIG9uZWFuZHplcm9lczogQmluYXJ5IHNhZmUKICAgICAgcGFkcyB3aXRoICI4MCIgZm9sbG93ZWQgYnkgYXMgbWFueSAiMDAiIG5lY2Vzc2FyeSB0byBmaWxsIHRoZQogICAgICBibG9jay4gSWYgdGhlIGxhc3QgYmxvY2sgaXMgYSBmdWxsIGJsb2NrIGFuZCBibG9ja3NpemUgaXMgOCwgYQogICAgICBibG9jayBvZiAiODAwMDAwMDAwMDAwMDAwMCIgd2lsbCBiZSBhcHBlbmRlZC4KCiAgIHJpam5kYWVsX2NvbXBhdDogQmluYXJ5IHNhZmUsIHdpdGggY2F2ZWF0cwogICAgICBzaW1pbGFyIHRvIG9uZWFuZHplcm9lcywgZXhjZXB0IHRoYXQgbm8gcGFkZGluZyBpcyBwZXJmb3JtZWQgaWYKICAgICAgdGhlIGxhc3QgYmxvY2sgaXMgYSBmdWxsIGJsb2NrLiBUaGlzIGlzIHByb3ZpZGVkIGZvcgogICAgICBjb21wYXRpYmlsaXR5IHdpdGggQ3J5cHQ6OlJpam5kYWVsIG9ubHkgYW5kIGNhbiBvbmx5IGJlIHVzZWQKICAgICAgd2l0aCBtZXNzYWdlcyB0aGF0IGFyZSBhIG11bHRpcGxlIG9mIHRoZSBSaWpuZGFlbCBibG9ja3NpemUKICAgICAgb2YgMTYgYnl0ZXMuCgogICBudWxsOiB0ZXh0IG9ubHkKICAgICAgcGFkcyB3aXRoIGFzIG1hbnkgIjAwIiBuZWNlc3NhcnkgdG8gZmlsbCB0aGUgYmxvY2suIElmIHRoZSBsYXN0IAogICAgICBibG9jayBpcyBhIGZ1bGwgYmxvY2sgYW5kIGJsb2Nrc2l6ZSBpcyA4LCBhIGJsb2NrIG9mCiAgICAgICIwMDAwMDAwMDAwMDAwMDAwIiB3aWxsIGJlIGFwcGVuZGVkLgoKICAgc3BhY2U6IHRleHQgb25seQogICAgICBzYW1lIGFzICJudWxsIiwgYnV0IHdpdGggIjIwIi4KCiAgIG5vbmU6CiAgICAgIG5vIHBhZGRpbmcgYWRkZWQuIFVzZWZ1bCBmb3Igc3BlY2lhbC1wdXJwb3NlIGFwcGxpY2F0aW9ucyB3aGVyZQogICAgICB5b3Ugd2lzaCB0byBhZGQgY3VzdG9tIHBhZGRpbmcgdG8gdGhlIG1lc3NhZ2UuCgpCb3RoIHRoZSBzdGFuZGFyZCBhbmQgb25lYW5kemVyb2VzIHBhZGRpbmdzIGFyZSBiaW5hcnkgc2FmZS4gIFRoZQpzcGFjZSBhbmQgbnVsbCBwYWRkaW5ncyBhcmUgcmVjb21tZW5kZWQgb25seSBmb3IgdGV4dCBkYXRhLiAgV2hpY2gKdHlwZSBvZiBwYWRkaW5nIHlvdSB1c2UgZGVwZW5kcyBvbiB3aGV0aGVyIHlvdSB3aXNoIHRvIGNvbW11bmljYXRlCndpdGggYW4gZXh0ZXJuYWwgKG5vbiBDcnlwdDo6Q0JDIGxpYnJhcnkpLiAgSWYgdGhpcyBpcyB0aGUgY2FzZSwgdXNlCndoYXRldmVyIHBhZGRpbmcgbWV0aG9kIGlzIGNvbXBhdGlibGUuCgpZb3UgY2FuIGFsc28gcGFzcyBpbiBhIGN1c3RvbSBwYWRkaW5nIGZ1bmN0aW9uLiAgVG8gZG8gdGhpcywgY3JlYXRlIGEKZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgYXJndW1lbnRzOgoKICAgJHBhZGRlZF9ibG9jayA9IGZ1bmN0aW9uKCRibG9jaywkYmxvY2tzaXplLCRkaXJlY3Rpb24pOwoKd2hlcmUgJGJsb2NrIGlzIHRoZSBjdXJyZW50IGJsb2NrIG9mIGRhdGEsICRibG9ja3NpemUgaXMgdGhlIHNpemUgdG8KcGFkIGl0IHRvLCAkZGlyZWN0aW9uIGlzICJlIiBmb3IgZW5jcnlwdGluZyBhbmQgImQiIGZvciBkZWNyeXB0aW5nLAphbmQgJHBhZGRlZF9ibG9jayBpcyB0aGUgcmVzdWx0IGFmdGVyIHBhZGRpbmcgb3IgZGVwYWRkaW5nLgoKV2hlbiBlbmNyeXB0aW5nLCB0aGUgZnVuY3Rpb24gc2hvdWxkIGFsd2F5cyByZXR1cm4gYSBzdHJpbmcgb2YKPGJsb2Nrc2l6ZT4gbGVuZ3RoLCBhbmQgd2hlbiBkZWNyeXB0aW5nLCBjYW4gZXhwZWN0IHRoZSBzdHJpbmcgY29taW5nCmluIHRvIGFsd2F5cyBiZSB0aGF0IGxlbmd0aC4gU2VlIF9zdGFuZGFyZF9wYWRkaW5nKCksIF9zcGFjZV9wYWRkaW5nKCksCl9udWxsX3BhZGRpbmcoKSwgb3IgX29uZWFuZHplcm9lc19wYWRkaW5nKCkgaW4gdGhlIHNvdXJjZSBmb3IgZXhhbXBsZXMuCgpTdGFuZGFyZCBhbmQgb25lYW5kemVyb2VzIHBhZGRpbmcgYXJlIHJlY29tbWVuZGVkLCBhcyBib3RoIHNwYWNlIGFuZApudWxsIHBhZGRpbmcgY2FuIHBvdGVudGlhbGx5IHRydW5jYXRlIG1vcmUgY2hhcmFjdGVycyB0aGFuIHRoZXkgc2hvdWxkLiAKCj1oZWFkMSBFWEFNUExFUwoKVHdvIGV4YW1wbGVzLCBkZXMucGwgYW5kIGlkZWEucGwgY2FuIGJlIGZvdW5kIGluIHRoZSBlZy8gc3ViZGlyZWN0b3J5Cm9mIHRoZSBDcnlwdC1DQkMgZGlzdHJpYnV0aW9uLiAgVGhlc2UgaW1wbGVtZW50IGNvbW1hbmQtbGluZSBERVMgYW5kCklERUEgZW5jcnlwdGlvbiBhbGdvcml0aG1zLgoKPWhlYWQxIExJTUlUQVRJT05TCgpUaGUgZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBwcm9jZXNzIGlzIGFib3V0IGEgdGVudGggdGhlIHNwZWVkIG9mCnRoZSBlcXVpdmFsZW50IFNTTGVheSBwcm9ncmFtcyAoY29tcGlsZWQgQykuICBUaGlzIGNvdWxkIGJlIGltcHJvdmVkCmJ5IGltcGxlbWVudGluZyB0aGlzIG1vZHVsZSBpbiBDLiAgSXQgbWF5IGFsc28gYmUgd29ydGh3aGlsZSB0bwpvcHRpbWl6ZSB0aGUgREVTIGFuZCBJREVBIGJsb2NrIGFsZ29yaXRobXMgZnVydGhlci4KCj1oZWFkMSBCVUdTCgpQbGVhc2UgcmVwb3J0IHRoZW0uCgo9aGVhZDEgQVVUSE9SCgpMaW5jb2xuIFN0ZWluLCBsc3RlaW5AY3NobC5vcmcKClRoaXMgbW9kdWxlIGlzIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBBUlRJU1RJQyBMSUNFTlNFIHVzaW5nIHRoZSBzYW1lCnRlcm1zIGFzIFBlcmwgaXRzZWxmLgoKPWhlYWQxIFNFRSBBTFNPCgpwZXJsKDEpLCBDcnlwdDo6REVTKDMpLCBDcnlwdDo6SURFQSgzKSwgcmZjMjg5OCAoUEtDUyM1KQoKPWN1dAo=</File>
        <File Location="Kernel/cpan-lib/Crypt/Rijndael_PP.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Data/Validate/Domain.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Data/Validate/IP.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Data/Validate/URI.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Geo/IP.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Geo/Mirror.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Geo/IP/Record.pod" Permission="644" Encode="Base64">PWhlYWQxIE5BTUUKCiAgR2VvOjpJUDo6UmVjb3JkIC0gQ29udGFpbnMgY2l0eSBpbmZvcm1hdGlvbiBmb3IgR2VvSVAgTGVnYWN5IENpdHkgRWRpdGlvbgoKPWhlYWQxIFNZTk9QU0lTCgogIHVzZSBHZW86OklQOwoKICBteSAkZ2kgPSBHZW86OklQLT5vcGVuKCIvdXNyL2xvY2FsL3NoYXJlL0dlb0lQL0dlb0lQQ2l0eS5kYXQiLCBHRU9JUF9TVEFOREFSRCk7CgogIG15ICRyZWNvcmQgPSAkZ2ktPnJlY29yZF9ieV9hZGRyKCcyNC4yNC4yNC4yNCcpOwoKICBwcmludCAkcmVjb3JkLT5jb3VudHJ5X2NvZGUsCgkkcmVjb3JkLT5jb3VudHJ5X2NvZGUzLAoJJHJlY29yZC0+Y291bnRyeV9uYW1lLAoJJHJlY29yZC0+cmVnaW9uLAoJJHJlY29yZC0+cmVnaW9uX25hbWUsCgkkcmVjb3JkLT5jaXR5LAoJJHJlY29yZC0+cG9zdGFsX2NvZGUsCgkkcmVjb3JkLT5sYXRpdHVkZSwKCSRyZWNvcmQtPmxvbmdpdHVkZSwKCSRyZWNvcmQtPnRpbWVfem9uZSwKCSRyZWNvcmQtPmFyZWFfY29kZSwKICAgICRyZWNvcmQtPmNvbnRpbmVudF9jb2RlLAoJJHJlY29yZC0+bWV0cm9fY29kZTsKCj1oZWFkMSBERVNDUklQVElPTgoKR2VvOjpJUDo6UmVjb3JkIHJlcHJlc2VudHMgb2JqZWN0cyBjb250YWluaW5nIGxvY2F0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGJ5CnRoZSBHZW9JUCBMZWdhY3kgQ2l0eSBkYXRhYmFzZS4gIEl0IHdvcmtzIHdpdGggYm90aCB0aGUgY29tbWVyY2lhbCBHZW9JUApMZWdhY3kgQ2l0eSBhbmQgZnJlZSBHZW9MaXRlIExlZ2FjeSBDaXR5IGRhdGFiYXNlcy4KCj1oZWFkMSBPQkpFQ1QgTUVUSE9EUwoKPW92ZXIgNAoKPWl0ZW0gJGNvZGUgPSAkcmVjb3JkLT5jb3VudHJ5X2NvZGU7CgpSZXR1cm5zIHRoZSBJU08gMzE2NiBjb3VudHJ5IGNvZGUgZnJvbSB0aGUgbG9jYXRpb24gb2JqZWN0LgoKPWl0ZW0gJGNvZGUzID0gJHJlY29yZC0+Y291bnRyeV9jb2RlMzsKClJldHVybnMgdGhlIElTTyAzMTY2IDMgbGV0dGVyIGNvdW50cnkgY29kZSBmcm9tIHRoZSBsb2NhdGlvbiBvYmplY3QuCgo9aXRlbSAkbmFtZSA9ICRyZWNvcmQtPmNvdW50cnlfbmFtZTsKClJldHVybnMgdGhlIGNvdW50cnkgbmFtZSBmcm9tIHRoZSBsb2NhdGlvbiBvYmplY3QuCgo9aXRlbSAkcmVnaW9uID0gJHJlY29yZC0+cmVnaW9uOwoKUmV0dXJucyB0aGUgcmVnaW9uIGNvZGUgZnJvbSB0aGUgbG9jYXRpb24gb2JqZWN0LgoKPWl0ZW0gJHJlZ2lvbiA9ICRyZWNvcmQtPnJlZ2lvbl9uYW1lOwoKUmV0dXJucyB0aGUgcmVnaW9uIG5hbWUgZnJvbSB0aGUgbG9jYXRpb24gb2JqZWN0LgoKPWl0ZW0gJGNpdHkgPSAkcmVjb3JkLT5jaXR5OwoKUmV0dXJucyB0aGUgY2l0eSBmcm9tIHRoZSBsb2NhdGlvbiBvYmplY3QuCgo9aXRlbSAkcG9zdGFsX2NvZGUgPSAkcmVjb3JkLT5wb3N0YWxfY29kZTsKClJldHVybnMgdGhlIHBvc3RhbCBjb2RlIGZyb20gdGhlIGxvY2F0aW9uIG9iamVjdC4KCj1pdGVtICRsYXQgPSAkcmVjb3JkLT5sYXRpdHVkZTsKClJldHVybnMgdGhlIGxhdGl0dWRlIGZyb20gdGhlIGxvY2F0aW9uIG9iamVjdC4KCj1pdGVtICRsb24gPSAkcmVjb3JkLT5sb25naXR1ZGU7CgpSZXR1cm5zIHRoZSBsb25naXR1ZGUgZnJvbSB0aGUgbG9jYXRpb24gb2JqZWN0LgoKPWl0ZW0gJHRpbWVfem9uZSA9ICRyZWNvcmQtPnRpbWVfem9uZTsKClJldHVybnMgdGhlIHRpbWUgem9uZSBmcm9tIHRoZSBsb2NhdGlvbiBvYmplY3QuCgo9aXRlbSAkYXJlYV9jb2RlID0gJHJlY29yZC0+YXJlYV9jb2RlOwoKUmV0dXJucyB0aGUgYXJlYSBjb2RlIGZyb20gdGhlIGxvY2F0aW9uIG9iamVjdCAoZm9yIGNpdHktbGV2ZWwgVVMgbG9jYXRpb25zIG9ubHkpCgo9aXRlbSAkbWV0cm9fY29kZSA9ICRyZWNvcmQtPm1ldHJvX2NvZGU7CgpSZXR1cm5zIHRoZSBtZXRybyBjb2RlIGZyb20gdGhlIGxvY2F0aW9uIG9iamVjdCAoZm9yIGNpdHktbGV2ZWwgVVMgbG9jYXRpb25zIG9ubHkpCgoKPWl0ZW0gJGNvbnRpbmVudF9jb2RlID0gJHJlY29yZC0+Y29udGluZW50X2NvZGU7CgogUmV0dXJucyB0aGUgY29udGluZW50IGNvZGUgZnJvbSB0aGUgbG9jYXRpb24gb2JqZWN0LgogUG9zc2libGUgY29udGluZW50IGNvZGVzIGFyZSBBRiwgQVMsIEVVLCBOQSwgT0MsIFNBIGZvciBBZnJpY2EsIEFzaWEsIEV1cm9wZSwgTm9ydGggQW1lcmljYSwgT2NlYW5pYSAgYW5kIFNvdXRoIEFtZXJpY2EuCgo9YmFjawoKPWhlYWQxIFZFUlNJT04KCjEuNDUKCj1oZWFkMSBBVVRIT1IKCkNvcHlyaWdodCAoYykgMjAxNCwgTWF4TWluZCBMTEMKCkFsbCByaWdodHMgcmVzZXJ2ZWQuICBUaGlzIHBhY2thZ2UgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQKYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgc2FtZSB0ZXJtcyBhcyBQZXJsIGl0c2VsZi4KCj1jdXQK</File>
        <File Location="Kernel/cpan-lib/Geo/IP/Record.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Net/Domain/TLD.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Net/Netmask.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Proc/PID/File.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_AgentSaaSCockpit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_CustomerSaaSCockpit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/en_CustomerSaaSCockpit.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpMYW5ndWFnZTo6ZW5fQ3VzdG9tZXJTYWFTQ29ja3BpdDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB1dGY4OwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTYWFTQ29ja3BpdDo6YWdlbnQnfSA9ICdhZ2VudCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTYWFTQ29ja3BpdDo6YWdlbnRzJ30gPSAnYWdlbnRzJzsKfQoKMTsK</File>
        <File Location="Kernel/Language/es_AgentSaaSCockpit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/es_CustomerSaaSCockpit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitHost.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitHostHistory.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFNhYVNDb2NrcGl0SG9zdEhpc3Rvcnk7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okhpc3RvcnknLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgICMgcGVybWlzc2lvbiBjaGVjawogICAgJFNlbGYtPntBY2Nlc3NSd30gfHwgcmV0dXJuICRMYXlvdXRPYmplY3QtPk5vUGVybWlzc2lvbiggV2l0aEhlYWRlciA9PiAneWVzJyApOwoKICAgICMgZ2V0IGhvc3QKICAgICRTZWxmLT57SG9zdElEfSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKS0+R2V0UGFyYW0oCiAgICAgICAgUGFyYW0gPT4gJ0hvc3RJRCcsCiAgICApOwoKICAgICMgZXJyb3IgY2hlY2sKICAgIGlmICggISRTZWxmLT57SG9zdElEfSApIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5GYXRhbEVycm9yKAogICAgICAgICAgICBNZXNzYWdlID0+ICdHb3Qgbm8gSG9zdElEIScsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBoaXN0b3J5IGxpc3QKICAgIG15ICRIaXN0b3J5RW50cmllcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SGlzdG9yeScpLT5Ib3N0SGlzdG9yeUdldCgKICAgICAgICBIb3N0SUQgPT4gJFNlbGYtPntIb3N0SUR9LAogICAgKTsKCiAgICAjIGVycm9yIGNoZWNrCiAgICBpZiAoICEkSGlzdG9yeUVudHJpZXMgfHwgcmVmICRIaXN0b3J5RW50cmllcyBuZSAnQVJSQVknICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBoaXN0b3J5IGVudHJpZXMhJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2VuZXJhdGUgZWFjaCBoaXN0b3J5IHJvdwogICAgZm9yIG15ICRIaXN0b3J5RW50cnkgKCBAeyRIaXN0b3J5RW50cmllc30gKSB7CiAgICAgICAgJFNlbGYtPl9BZGRIaXN0b3J5RW50cnkoCiAgICAgICAgICAgIEhpc3RvcnlFbnRyeSA9PiAkSGlzdG9yeUVudHJ5CiAgICAgICAgKTsKICAgIH0KCiAgICAjIG91dHB1dCBoZWFkZXIKICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5IZWFkZXIoCiAgICAgICAgVGl0bGUgPT4gJ0hvc3RIaXN0b3J5JywKICAgICAgICBUeXBlICA9PiAnU21hbGwnLAogICAgKTsKCiAgICAjIGdlbmVyYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudFNhYVNDb2NrcGl0SG9zdEhpc3RvcnknLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgIEhvc3RJRCA9PiAkU2VsZi0+e0hvc3RJRH0sCiAgICAgICAgfSwKICAgICk7CgogICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5Gb290ZXIoCiAgICAgICAgVHlwZSA9PiAnU21hbGwnLAogICAgKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKc3ViIF9BZGRIaXN0b3J5RW50cnkgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17SGlzdG9yeUVudHJ5fSB8fCByZWYgJFBhcmFte0hpc3RvcnlFbnRyeX0gbmUgJ0hBU0gnICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBoaXN0b3J5IGVudHJ5IScsCiAgICAgICAgKTsKICAgIH0KCiAgICBteSAkTWVzc2FnZSA9ICRTZWxmLT5fR2VuZXJhdGVNZXNzYWdlKAogICAgICAgICV7ICRQYXJhbXtIaXN0b3J5RW50cnl9IH0sCiAgICApOwoKICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgIE5hbWUgPT4gJ0hpc3RvcnlJdGVtJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgSGlzdG9yeVR5cGUgICA9PiAkUGFyYW17SGlzdG9yeUVudHJ5fS0+e0hpc3RvcnlUeXBlfSwKICAgICAgICAgICAgTWVzc2FnZSAgICAgICA9PiAkTWVzc2FnZSwKICAgICAgICAgICAgVXNlckxvZ2luICAgICA9PiAkUGFyYW17SGlzdG9yeUVudHJ5fS0+e1VzZXJMb2dpbn0sCiAgICAgICAgICAgIFVzZXJGaXJzdG5hbWUgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntVc2VyRmlyc3RuYW1lfSwKICAgICAgICAgICAgVXNlckxhc3RuYW1lICA9PiAkUGFyYW17SGlzdG9yeUVudHJ5fS0+e1VzZXJMYXN0bmFtZX0sCiAgICAgICAgICAgIENyZWF0ZVRpbWUgICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntDcmVhdGVUaW1lfSwKICAgICAgICAgICAgSm9iSUQgICAgICAgICA9PiAkUGFyYW17SGlzdG9yeUVudHJ5fS0+e0pvYklEfSwKICAgICAgICB9LAogICAgKTsKCiAgICByZXR1cm47Cn0KCnN1YiBfR2VuZXJhdGVNZXNzYWdlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgaWYgKCAkUGFyYW17Q29udGVudE5ld30gJiYgJFBhcmFte0NvbnRlbnRPbGR9ICkgewogICAgICAgIHJldHVybiAiJFBhcmFte0NvbnRlbnRPbGR9IC0+ICRQYXJhbXtDb250ZW50TmV3fSI7CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtDb250ZW50TmV3fSApIHsKICAgICAgICByZXR1cm4gJFBhcmFte0NvbnRlbnROZXd9OwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17Q29udGVudE9sZH0gKSB7CiAgICAgICAgcmV0dXJuICRQYXJhbXtDb250ZW50T2xkfTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentSaaSCockpitInstanceEdit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitInstanceHistory.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFNhYVNDb2NrcGl0SW5zdGFuY2VIaXN0b3J5OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcsCiAgICAnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpIaXN0b3J5JywKICAgICdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0JywKKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICAjIHBlcm1pc3Npb24gY2hlY2sKICAgICRTZWxmLT57QWNjZXNzUnd9IHx8IHJldHVybiAkTGF5b3V0T2JqZWN0LT5Ob1Blcm1pc3Npb24oIFdpdGhIZWFkZXIgPT4gJ3llcycgKTsKCiAgICAjIGdldCBpbnN0YW5jZQogICAgJFNlbGYtPntJbnN0YW5jZUlEfSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKS0+R2V0UGFyYW0oCiAgICAgICAgUGFyYW0gPT4gJ0luc3RhbmNlSUQnLAogICAgKTsKCiAgICAjIGVycm9yIGNoZWNrCiAgICBpZiAoICEkU2VsZi0+e0luc3RhbmNlSUR9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBJbnN0YW5jZUlEIScsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBoaXN0b3J5IGxpc3QKICAgIG15ICRIaXN0b3J5RW50cmllcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SGlzdG9yeScpLT5JbnN0YW5jZUhpc3RvcnlHZXQoCiAgICAgICAgSW5zdGFuY2VJRCA9PiAkU2VsZi0+e0luc3RhbmNlSUR9LAogICAgKTsKCiAgICAjIGVycm9yIGNoZWNrCiAgICBpZiAoICEkSGlzdG9yeUVudHJpZXMgfHwgcmVmICRIaXN0b3J5RW50cmllcyBuZSAnQVJSQVknICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBoaXN0b3J5IGVudHJpZXMhJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2VuZXJhdGUgZWFjaCBoaXN0b3J5IHJvdwogICAgZm9yIG15ICRIaXN0b3J5RW50cnkgKCBAeyRIaXN0b3J5RW50cmllc30gKSB7CiAgICAgICAgJFNlbGYtPl9BZGRIaXN0b3J5RW50cnkoCiAgICAgICAgICAgIEhpc3RvcnlFbnRyeSA9PiAkSGlzdG9yeUVudHJ5CiAgICAgICAgKTsKICAgIH0KCiAgICAjIG91dHB1dCBoZWFkZXIKICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5IZWFkZXIoCiAgICAgICAgVGl0bGUgPT4gJ0luc3RhbmNlSGlzdG9yeScsCiAgICAgICAgVHlwZSAgPT4gJ1NtYWxsJywKICAgICk7CgogICAgIyBnZW5lcmF0ZSBvdXRwdXQKICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+T3V0cHV0KAogICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWdlbnRTYWFTQ29ja3BpdEluc3RhbmNlSGlzdG9yeScsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgSW5zdGFuY2VJRCA9PiAkU2VsZi0+e0luc3RhbmNlSUR9LAogICAgICAgIH0sCiAgICApOwoKICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Rm9vdGVyKCBUeXBlID0+ICdTbWFsbCcgKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKc3ViIF9BZGRIaXN0b3J5RW50cnkgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17SGlzdG9yeUVudHJ5fSB8fCByZWYgJFBhcmFte0hpc3RvcnlFbnRyeX0gbmUgJ0hBU0gnICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBoaXN0b3J5IGVudHJ5IScsCiAgICAgICAgKTsKICAgIH0KCiAgICBteSAkTWVzc2FnZSA9ICRTZWxmLT5fR2VuZXJhdGVNZXNzYWdlKAogICAgICAgICV7ICRQYXJhbXtIaXN0b3J5RW50cnl9IH0sCiAgICApOwoKICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgIE5hbWUgPT4gJ0hpc3RvcnlJdGVtJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgSGlzdG9yeVR5cGUgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntIaXN0b3J5VHlwZX0sCiAgICAgICAgICAgIE1lc3NhZ2UgICAgID0+ICRNZXNzYWdlLAogICAgICAgICAgICBVc2VyICAgICAgICA9PiAkUGFyYW17SGlzdG9yeUVudHJ5fS0+e1VzZXJMb2dpbn0sCiAgICAgICAgICAgIENyZWF0ZVRpbWUgID0+ICRQYXJhbXtIaXN0b3J5RW50cnl9LT57Q3JlYXRlVGltZX0sCiAgICAgICAgICAgIEpvYklEICAgICAgID0+ICRQYXJhbXtIaXN0b3J5RW50cnl9LT57Sm9iSUR9LAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybjsKfQoKc3ViIF9HZW5lcmF0ZU1lc3NhZ2UgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBpZiAoICRQYXJhbXtDb250ZW50TmV3fSAmJiAkUGFyYW17Q29udGVudE9sZH0gKSB7CiAgICAgICAgcmV0dXJuICIkUGFyYW17Q29udGVudE9sZH0gLT4gJFBhcmFte0NvbnRlbnROZXd9IjsKICAgIH0KICAgIGVsc2lmICggJFBhcmFte0NvbnRlbnROZXd9ICkgewogICAgICAgIHJldHVybiAkUGFyYW17Q29udGVudE5ld307CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtDb250ZW50T2xkfSApIHsKICAgICAgICByZXR1cm4gJFBhcmFte0NvbnRlbnRPbGR9OwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgfQp9CgoxOwo=</File>
        <File Location="Kernel/Modules/AgentSaaSCockpitInstanceZoom.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitJob.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitLocation.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitLocationHistory.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFNhYVNDb2NrcGl0TG9jYXRpb25IaXN0b3J5OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcsCiAgICAnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpIaXN0b3J5JywKICAgICdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0JywKKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICAjIHBlcm1pc3Npb24gY2hlY2sKICAgICRTZWxmLT57QWNjZXNzUnd9IHx8IHJldHVybiAkTGF5b3V0T2JqZWN0LT5Ob1Blcm1pc3Npb24oIFdpdGhIZWFkZXIgPT4gJ3llcycgKTsKCiAgICAjIGdldCBsb2NhdGlvbgogICAgJFNlbGYtPntMb2NhdGlvbklEfSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKS0+R2V0UGFyYW0oCiAgICAgICAgUGFyYW0gPT4gJ0xvY2F0aW9uSUQnLAogICAgKTsKCiAgICAjIGVycm9yIGNoZWNrCiAgICBpZiAoICEkU2VsZi0+e0xvY2F0aW9uSUR9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBMb2NhdGlvbklEIScsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBoaXN0b3J5IGxpc3QKICAgIG15ICRIaXN0b3J5RW50cmllcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SGlzdG9yeScpLT5Mb2NhdGlvbkhpc3RvcnlHZXQoCiAgICAgICAgTG9jYXRpb25JRCA9PiAkU2VsZi0+e0xvY2F0aW9uSUR9LAogICAgKTsKCiAgICAjIGVycm9yIGNoZWNrCiAgICBpZiAoICEkSGlzdG9yeUVudHJpZXMgfHwgcmVmICRIaXN0b3J5RW50cmllcyBuZSAnQVJSQVknICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBoaXN0b3J5IGVudHJpZXMhJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2VuZXJhdGUgZWFjaCBoaXN0b3J5IHJvdwogICAgZm9yIG15ICRIaXN0b3J5RW50cnkgKCBAeyRIaXN0b3J5RW50cmllc30gKSB7CiAgICAgICAgJFNlbGYtPl9BZGRIaXN0b3J5RW50cnkoCiAgICAgICAgICAgIEhpc3RvcnlFbnRyeSA9PiAkSGlzdG9yeUVudHJ5CiAgICAgICAgKTsKICAgIH0KCiAgICAjIG91dHB1dCBoZWFkZXIKICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5IZWFkZXIoCiAgICAgICAgVGl0bGUgPT4gJ0xvY2F0aW9uSGlzdG9yeScsCiAgICAgICAgVHlwZSAgPT4gJ1NtYWxsJywKICAgICk7CgogICAgIyBzaG93IG5vIGRhdGEgZm91bmQgbWVzc2FnZQogICAgaWYgKCAhQHskSGlzdG9yeUVudHJpZXN9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdOb0hpc3RvcnlJdGVtJywKICAgICAgICAgICAgRGF0YSA9PiB7fSwKICAgICAgICApOwogICAgfQoKICAgICMgZ2VuZXJhdGUgb3V0cHV0CiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50U2FhU0NvY2twaXRMb2NhdGlvbkhpc3RvcnknLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgIExvY2F0aW9uSUQgPT4gJFNlbGYtPntMb2NhdGlvbklEfSwKICAgICAgICB9LAogICAgKTsKCiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPkZvb3RlciggVHlwZSA9PiAnU21hbGwnICk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCnN1YiBfQWRkSGlzdG9yeUVudHJ5IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0hpc3RvcnlFbnRyeX0gfHwgcmVmICRQYXJhbXtIaXN0b3J5RW50cnl9IG5lICdIQVNIJyApIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5GYXRhbEVycm9yKAogICAgICAgICAgICBNZXNzYWdlID0+ICdHb3Qgbm8gaGlzdG9yeSBlbnRyeSEnLAogICAgICAgICk7CiAgICB9CgogICAgbXkgJE1lc3NhZ2UgPSAkU2VsZi0+X0dlbmVyYXRlTWVzc2FnZSgKICAgICAgICAleyAkUGFyYW17SGlzdG9yeUVudHJ5fSB9LAogICAgKTsKCiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdIaXN0b3J5SXRlbScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgIEhpc3RvcnlUeXBlICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntIaXN0b3J5VHlwZX0sCiAgICAgICAgICAgIE1lc3NhZ2UgICAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgICAgIFVzZXJMb2dpbiAgICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntVc2VyTG9naW59LAogICAgICAgICAgICBVc2VyRmlyc3RuYW1lID0+ICRQYXJhbXtIaXN0b3J5RW50cnl9LT57VXNlckZpcnN0bmFtZX0sCiAgICAgICAgICAgIFVzZXJMYXN0bmFtZSAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntVc2VyTGFzdG5hbWV9LAogICAgICAgICAgICBDcmVhdGVUaW1lICAgID0+ICRQYXJhbXtIaXN0b3J5RW50cnl9LT57Q3JlYXRlVGltZX0sCiAgICAgICAgICAgIEpvYklEICAgICAgICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntKb2JJRH0sCiAgICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgX0dlbmVyYXRlTWVzc2FnZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIGlmICggJFBhcmFte0NvbnRlbnROZXd9ICYmICRQYXJhbXtDb250ZW50T2xkfSApIHsKICAgICAgICByZXR1cm4gIiRQYXJhbXtDb250ZW50T2xkfSAtPiAkUGFyYW17Q29udGVudE5ld30iOwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17Q29udGVudE5ld30gKSB7CiAgICAgICAgcmV0dXJuICRQYXJhbXtDb250ZW50TmV3fTsKICAgIH0KICAgIGVsc2lmICggJFBhcmFte0NvbnRlbnRPbGR9ICkgewogICAgICAgIHJldHVybiAkUGFyYW17Q29udGVudE9sZH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9Cn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentSaaSCockpitMgmtServer.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitMgmtServerHistory.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFNhYVNDb2NrcGl0TWdtdFNlcnZlckhpc3Rvcnk7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okhpc3RvcnknLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgICMgcGVybWlzc2lvbiBjaGVjawogICAgJFNlbGYtPntBY2Nlc3NSd30gfHwgcmV0dXJuICRMYXlvdXRPYmplY3QtPk5vUGVybWlzc2lvbiggV2l0aEhlYWRlciA9PiAneWVzJyApOwoKICAgICMgZ2V0IG1hbmFnZW1lbnQgc2VydmVyCiAgICAkU2VsZi0+e01nbXRTZXJ2ZXJJRH0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0JyktPkdldFBhcmFtKAogICAgICAgIFBhcmFtID0+ICdNZ210U2VydmVySUQnLAogICAgKTsKCiAgICAjIGVycm9yIGNoZWNrCiAgICBpZiAoICEkU2VsZi0+e01nbXRTZXJ2ZXJJRH0gKSB7CiAgICAgICAgJExheW91dE9iamVjdC0+RmF0YWxFcnJvcigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnR290IG5vIE1nbXRTZXJ2ZXJJRCEnLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgaGlzdG9yeSBsaXN0CiAgICBteSAkSGlzdG9yeUVudHJpZXMgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okhpc3RvcnknKS0+TWdtdFNlcnZlckhpc3RvcnlHZXQoCiAgICAgICAgTWdtdFNlcnZlcklEID0+ICRTZWxmLT57TWdtdFNlcnZlcklEfSwKICAgICk7CgogICAgIyBlcnJvciBjaGVjawogICAgaWYgKCAhJEhpc3RvcnlFbnRyaWVzIHx8IHJlZiAkSGlzdG9yeUVudHJpZXMgbmUgJ0FSUkFZJyApIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5GYXRhbEVycm9yKAogICAgICAgICAgICBNZXNzYWdlID0+ICdHb3Qgbm8gaGlzdG9yeSBlbnRyaWVzIScsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdlbmVyYXRlIGVhY2ggaGlzdG9yeSByb3cKICAgIGZvciBteSAkSGlzdG9yeUVudHJ5ICggQHskSGlzdG9yeUVudHJpZXN9ICkgewogICAgICAgICRTZWxmLT5fQWRkSGlzdG9yeUVudHJ5KAogICAgICAgICAgICBIaXN0b3J5RW50cnkgPT4gJEhpc3RvcnlFbnRyeQogICAgICAgICk7CiAgICB9CgogICAgIyBzaG93IG5vIGRhdGEgZm91bmQgbWVzc2FnZQogICAgaWYgKCAhQHskSGlzdG9yeUVudHJpZXN9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdOb0hpc3RvcnlJdGVtJywKICAgICAgICAgICAgRGF0YSA9PiB7fSwKICAgICAgICApOwogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRMYXlvdXRPYmplY3QtPkhlYWRlcigKICAgICAgICBUaXRsZSA9PiAnTWdtdFNlcnZlckhpc3RvcnknLAogICAgICAgIFR5cGUgID0+ICdTbWFsbCcsCiAgICApOwoKICAgICMgZ2VuZXJhdGUgb3V0cHV0CiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50U2FhU0NvY2twaXRNZ210U2VydmVySGlzdG9yeScsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgTWdtdFNlcnZlcklEID0+ICRTZWxmLT57TWdtdFNlcnZlcklEfSwKICAgICAgICB9LAogICAgKTsKCiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPkZvb3RlciggVHlwZSA9PiAnU21hbGwnICk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCnN1YiBfQWRkSGlzdG9yeUVudHJ5IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExheW91dE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0hpc3RvcnlFbnRyeX0gfHwgcmVmICRQYXJhbXtIaXN0b3J5RW50cnl9IG5lICdIQVNIJyApIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5GYXRhbEVycm9yKAogICAgICAgICAgICBNZXNzYWdlID0+ICdHb3Qgbm8gaGlzdG9yeSBlbnRyeSEnLAogICAgICAgICk7CiAgICB9CgogICAgbXkgJE1lc3NhZ2UgPSAkU2VsZi0+X0dlbmVyYXRlTWVzc2FnZSgKICAgICAgICAleyAkUGFyYW17SGlzdG9yeUVudHJ5fSB9LAogICAgKTsKCiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdIaXN0b3J5SXRlbScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgIEhpc3RvcnlUeXBlICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntIaXN0b3J5VHlwZX0sCiAgICAgICAgICAgIE1lc3NhZ2UgICAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgICAgIFVzZXJMb2dpbiAgICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntVc2VyTG9naW59LAogICAgICAgICAgICBVc2VyRmlyc3RuYW1lID0+ICRQYXJhbXtIaXN0b3J5RW50cnl9LT57VXNlckZpcnN0bmFtZX0sCiAgICAgICAgICAgIFVzZXJMYXN0bmFtZSAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntVc2VyTGFzdG5hbWV9LAogICAgICAgICAgICBDcmVhdGVUaW1lICAgID0+ICRQYXJhbXtIaXN0b3J5RW50cnl9LT57Q3JlYXRlVGltZX0sCiAgICAgICAgICAgIEpvYklEICAgICAgICAgPT4gJFBhcmFte0hpc3RvcnlFbnRyeX0tPntKb2JJRH0sCiAgICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgX0dlbmVyYXRlTWVzc2FnZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIGlmICggJFBhcmFte0NvbnRlbnROZXd9ICYmICRQYXJhbXtDb250ZW50T2xkfSApIHsKICAgICAgICByZXR1cm4gIiRQYXJhbXtDb250ZW50T2xkfSAtPiAkUGFyYW17Q29udGVudE5ld30iOwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17Q29udGVudE5ld30gKSB7CiAgICAgICAgcmV0dXJuICRQYXJhbXtDb250ZW50TmV3fTsKICAgIH0KICAgIGVsc2lmICggJFBhcmFte0NvbnRlbnRPbGR9ICkgewogICAgICAgIHJldHVybiAkUGFyYW17Q29udGVudE9sZH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9Cn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentSaaSCockpitNew.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFNhYVNDb2NrcGl0TmV3OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcsCiAgICAnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpVdGlscycsCiAgICAnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcsCik7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgIyBwZXJtaXNzaW9uIGNoZWNrCiAgICAkU2VsZi0+e0FjY2Vzc1J3fSB8fCByZXR1cm4gJExheW91dE9iamVjdC0+Tm9QZXJtaXNzaW9uKCBXaXRoSGVhZGVyID0+ICd5ZXMnICk7CgogICAgIyBnZXQgcGFyYW1zCiAgICBteSAkUGFyYW1PYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBmb3IgbXkgJFBhcmFtIChxdyhTdWJhY3Rpb24gSXRlbVR5cGUpKSB7CiAgICAgICAgJFNlbGYtPnsiUGFyYW0kUGFyYW0ifSA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICRQYXJhbSApIHx8ICcnOwogICAgfQoKICAgICMgYnVpbGQgdGhlIHNlbGVjdGlvbiBmb3IgdGhlIHR5cGUgb2YgdGhlIGl0ZW0gdGhhdCB3aWxsIGJlIGNyZWF0ZWQKICAgIG15ICRJdGVtVHlwZVNlbGVjdGlvbiA9ICRMYXlvdXRPYmplY3QtPkJ1aWxkU2VsZWN0aW9uKAogICAgICAgIERhdGEgPT4gWwogICAgICAgICAgICAnSG9zdCcsCiAgICAgICAgICAgICdMb2NhdGlvbicsCiAgICAgICAgICAgICdNYW5hZ2VtZW50IFNlcnZlcicKICAgICAgICBdLAogICAgICAgIE5hbWUgICAgICAgID0+ICdJdGVtVHlwZScsCiAgICAgICAgU2VsZWN0ZWRJRCAgPT4gJFNlbGYtPntQYXJhbUl0ZW1UeXBlfSB8fCAnSG9zdCcsCiAgICAgICAgU2l6ZSAgICAgICAgPT4gMSwKICAgICAgICBNdWx0aXBsZSAgICA9PiAwLAogICAgICAgIFNvcnQgICAgICAgID0+ICdBbHBoYW51bWVyaWNWYWx1ZScsCiAgICAgICAgVHJhbnNsYXRpb24gPT4gMSwKICAgICAgICBUaXRsZSAgICAgICA9PiAnU2VsZWN0IHR5cGUgb2YgaXRlbSB0byBiZSBhZGRlZCEnLAogICAgKTsKCiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdJdGVtVHlwZScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgIEl0ZW1UeXBlU2VsZWN0aW9uID0+ICRJdGVtVHlwZVNlbGVjdGlvbiwKICAgICAgICB9LAogICAgKTsKCiAgICAjIHRyaWdnZXIgdXNlciBzZWxlY3Rpb24gdG8gY2hvb3NlIGRlc2lyZWQgY3JlYXRpb24KICAgIGlmICggJFNlbGYtPntQYXJhbVN1YmFjdGlvbn0gZXEgJ05ld0luc2VydCcgKSB7CgogICAgICAgICMgcmVkaXJlY3QgdG8gaW5zZXJ0IG1hc2sKICAgICAgICByZXR1cm4gJExheW91dE9iamVjdC0+UmVkaXJlY3QoCiAgICAgICAgICAgIE9QID0+CiAgICAgICAgICAgICAgICAiQWN0aW9uPUFnZW50U2FhU0NvY2twaXROZXdSZXNvdXJjZTtTdWJhY3Rpb249TmV3SW5zZXJ0O0l0ZW1UeXBlPSRTZWxmLT57UGFyYW1JdGVtVHlwZX0iLAogICAgICAgICk7CiAgICB9CgogICAgIyBvdXRwdXQgaGVhZGVyCiAgICBteSAkT3V0cHV0ID0gJExheW91dE9iamVjdC0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICdOZXcnLAogICAgKTsKCiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5hdmlnYXRpb25CYXIoKTsKCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlV0aWxzJyktPlJ1bk1lbnUoCiAgICAgICAgTWVudSAgICAgICAgID0+ICdTYWFTQ29ja3BpdDo6TmV3OjpNZW51TW9kdWxlJywKICAgICAgICBDb250ZW50ICAgICAgPT4gMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZHVtbXkvdW51c2VkCiAgICAgICAgTGF5b3V0T2JqZWN0ID0+ICRMYXlvdXRPYmplY3QsCiAgICApOwoKICAgICMgZ2VuZXJhdGUgb3V0cHV0CiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50U2FhU0NvY2twaXROZXcnLAogICAgICAgIERhdGEgICAgICAgICA9PiBcJVBhcmFtLAogICAgKTsKCiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPkZvb3RlcigpOwoKICAgIHJldHVybiAkT3V0cHV0Owp9CgoxOwo=</File>
        <File Location="Kernel/Modules/AgentSaaSCockpitNewResource.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentSaaSCockpitOverview.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFNhYVNDb2NrcGl0T3ZlcnZpZXc7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6QXV0aFNlc3Npb24nLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6TG9jYXRpb24nLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgICMgcGVybWlzc2lvbiBjaGVjawogICAgJFNlbGYtPntBY2Nlc3NSd30gfHwgcmV0dXJuICRMYXlvdXRPYmplY3QtPk5vUGVybWlzc2lvbiggV2l0aEhlYWRlciA9PiAneWVzJyApOwoKICAgICMgZ2V0IHRoZSBsb2NhdGlvbnMKICAgIG15ICRMb2NhdGlvbklEcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6TG9jYXRpb24nKS0+TG9jYXRpb25MaXN0Rm9yT3ZlcnZpZXcoKTsKCiAgICBpZiAoIHJlZiAkTG9jYXRpb25JRHMgbmUgJ0FSUkFZJyB8fCAhQHskTG9jYXRpb25JRHN9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBMb2NhdGlvbiEnLAogICAgICAgICk7CiAgICB9CgogICAgIyBzaG93IGVhY2ggbG9jYXRpb24gYnJpZWZseQogICAgZm9yIG15ICRMb2NhdGlvbklEICggQHskTG9jYXRpb25JRHN9ICkgewogICAgICAgICRTZWxmLT5fT3ZlcnZpZXdMb2NhdGlvblJlY29yZEdldCgKICAgICAgICAgICAgTG9jYXRpb25JRCA9PiAkTG9jYXRpb25JRCwKICAgICAgICApOwogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRMYXlvdXRPYmplY3QtPkhlYWRlcigKICAgICAgICBUaXRsZSA9PiAnT3ZlcnZpZXcnLAogICAgKTsKCiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5hdmlnYXRpb25CYXIoKTsKCiAgICAjIGdlbmVyYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudFNhYVNDb2NrcGl0T3ZlcnZpZXcnLAogICAgICAgIERhdGEgICAgICAgICA9PiBcJVBhcmFtLAogICAgKTsKCiAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPkZvb3RlcigpOwoKICAgICMgc3RvcmUgbGFzdCBzY3JlZW4KICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpBdXRoU2Vzc2lvbicpLT5VcGRhdGVTZXNzaW9uSUQoCiAgICAgICAgU2Vzc2lvbklEID0+ICRTZWxmLT57U2Vzc2lvbklEfSwKICAgICAgICBLZXkgICAgICAgPT4gJ0xhc3RTYWFTU2NyZWVuVmlldycsCiAgICAgICAgVmFsdWUgICAgID0+ICRTZWxmLT57UmVxdWVzdGVkVVJMfSwKICAgICk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCnN1YiBfT3ZlcnZpZXdMb2NhdGlvblJlY29yZEdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgaWYgKCAhJFBhcmFte0xvY2F0aW9uSUR9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0dvdCBubyBMb2NhdGlvbklEIScsCiAgICAgICAgKTsKICAgIH0KCiAgICBteSAkTG9jYXRpb24gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OkxvY2F0aW9uJyktPkxvY2F0aW9uR2V0KAogICAgICAgIExvY2F0aW9uSUQgPT4gJFBhcmFte0xvY2F0aW9uSUR9CiAgICApOwoKICAgIGlmICggISRMb2NhdGlvbiB8fCByZWYgJExvY2F0aW9uIG5lICdIQVNIJyApIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5GYXRhbEVycm9yKAogICAgICAgICAgICBNZXNzYWdlID0+ICdHb3Qgbm8gTG9jYXRpb24hJwogICAgICAgICk7CiAgICB9CgogICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnUmVjb3JkJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgTG9jYXRpb25JRCAgICAgPT4gJExvY2F0aW9uLT57TG9jYXRpb25JRH0sCiAgICAgICAgICAgIExvY2F0aW9uTmFtZSAgID0+ICRMb2NhdGlvbi0+e05hbWV9LAogICAgICAgICAgICBMb2NhdGlvblN0YXRlICA9PiAkTG9jYXRpb24tPntTdGF0ZX0sCiAgICAgICAgICAgIE51bU1nbXRTZXJ2ZXJzID0+ICRMb2NhdGlvbi0+e051bU1nbXRTZXJ2ZXJzfSwKICAgICAgICAgICAgTnVtSG9zdHMgICAgICAgPT4gJExvY2F0aW9uLT57TnVtSG9zdHN9LAogICAgICAgICAgICBMRUQgICAgICAgICAgICA9PiAkTG9jYXRpb24tPntMRUR9LAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybjsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentSaaSCockpitSearch.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitHost.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitHostHistory.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxkaXYgY2xhc3M9IkxheW91dFBvcHVwIEFSSUFSb2xlTWFpbiI+CgogICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICA8aDE+CiAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiTWFuYWdlZCBPVFJTIENvbnNvbGUiKSB8IGh0bWwgJV0gLSBbJSBUcmFuc2xhdGUoIkhvc3QgSGlzdG9yeSIpIHwgaHRtbCAlXQogICAgICAgIDwvaDE+CiAgICAgICAgPHA+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJDYW5jZWxDbG9zZVBvcHVwIj5bJSBUcmFuc2xhdGUoIkNhbmNlbCAmIGNsb3NlIikgfCBodG1sICVdPC9hPgogICAgICAgIDwvcD4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9IkNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+CiAgICAgICAgICAgICAgICAgICAgWyUgVHJhbnNsYXRlKCJIaXN0b3J5IENvbnRlbnQiKSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iRGF0YVRhYmxlIj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIkFjdGlvbiIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJDb21tZW50IikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIlpvb20iKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiVXNlciIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJDcmVhdGV0aW1lIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KWyUgUmVuZGVyQmxvY2tTdGFydCgiSGlzdG9yeUl0ZW0iKSAlXQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5IaXN0b3J5VHlwZSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLk1lc3NhZ2UgfCB0cnVuY2F0ZSgxMDApIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuVXNlckxvZ2luIHwgaHRtbCAlXSAoWyUgRGF0YS5Vc2VyRmlyc3RuYW1lIHwgaHRtbCAlXSBbJSBEYXRhLlVzZXJMYXN0bmFtZSB8IGh0bWwgJV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ3JlYXRlVGltZSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIkhpc3RvcnlJdGVtIikgJV0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cg==</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitInstanceEdit.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitInstanceHistory.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxkaXYgY2xhc3M9IkxheW91dFBvcHVwIEFSSUFSb2xlTWFpbiI+CgogICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICA8aDE+CiAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiTWFuYWdlZCBPVFJTIENvbnNvbGUiKSB8IGh0bWwgJV0gLSBbJSBUcmFuc2xhdGUoIkluc3RhbmNlIEhpc3RvcnkiKSB8IGh0bWwgJV0KICAgICAgICA8L2gxPgogICAgICAgIDxwPgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iQ2FuY2VsQ2xvc2VQb3B1cCI+WyUgVHJhbnNsYXRlKCJDYW5jZWwgJiBjbG9zZSIpIHwgaHRtbCAlXTwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiSGlzdG9yeSBDb250ZW50IikgfCBodG1sICVdCiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9IkRhdGFUYWJsZSI+CiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJBY3Rpb24iKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ29tbWVudCIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJab29tIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIlVzZXIiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ3JlYXRldGltZSIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJKb2IiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgoKWyUgUmVuZGVyQmxvY2tTdGFydCgiSGlzdG9yeUl0ZW0iKSAlXQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5IaXN0b3J5VHlwZSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5NZXNzYWdlIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iQ2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuVXNlciAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkNyZWF0ZVRpbWUgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5Kb2JJRCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIkhpc3RvcnlJdGVtIikgJV0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cg==</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitInstanceZoom.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitJob.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxzY3JpcHQgbGFuZ3VhZ2U9IkphdmFTY3JpcHQiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgogICAgLy8gdG9nZ2xlIHRoZSBkaXNwbGF5IG9mIGFuIGVsZW1lbnQKICAgIC8vIHRoZSBlbGVtZW50IHRvIGJlIHRvZ2dsZWQgaXMgZGV0ZXJtaW5lZCBmcm9tIHRoZSBwYXNzZWQgaW4gaWQKICAgIGZ1bmN0aW9uIFRvZ2dsZSggRWxlbWVudElEICkgewoKICAgICAgICB2YXIgRWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShFbGVtZW50SUQpOwoKICAgICAgICBmb3IoIGk9MDsgaSA8IEVsZW1lbnRzLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICBpZiAoIEVsZW1lbnRzW2ldLnN0eWxlLmRpc3BsYXkgID09ICcnKSB7CiAgICAgICAgICAgICAgICBFbGVtZW50c1tpXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgRWxlbWVudHNbaV0uc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKPC9zY3JpcHQ+Cgo8ZGl2IGNsYXNzPSJMYXlvdXRQb3B1cCBBUklBUm9sZU1haW4iPgoKICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgPGgxPgogICAgICAgICAgICBbJSBUcmFuc2xhdGUoIk1hbmFnZWQgT1RSUyBDb25zb2xlIikgfCBodG1sICVdIC0gWyUgVHJhbnNsYXRlKCJKb2IgT3ZlcnZpZXciKSB8IGh0bWwgJV0KICAgICAgICA8L2gxPgogICAgICAgIDxwPgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iQ2FuY2VsQ2xvc2VQb3B1cCI+WyUgVHJhbnNsYXRlKCJDYW5jZWwgJiBjbG9zZSIpIHwgaHRtbCAlXTwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUgU3BhY2luZ1RvcCBFeHBhbmRlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRBY3Rpb24gVG9nZ2xlIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0aXRsZT0iWyUgVHJhbnNsYXRlKCJUb2dnbGUgdGhpcyB3aWRnZXQiKSB8IGh0bWwgJV0iPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGgyPlslIFRyYW5zbGF0ZSgiSm9iIERldGFpbHMgZm9yIFJlc291cmNlIikgfCBodG1sICVdPC9oMj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJUYWJsZUxpa2UiPgoKWyUgUmVuZGVyQmxvY2tTdGFydCgiRGV0YWlsIikgJV0KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+WyUgVHJhbnNsYXRlKERhdGEuQ29udGVudEtleSkgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkNvbnRlbnRWYWx1ZSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJEZXRhaWwiKSAlXQogICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSBTcGFjaW5nVG9wIEV4cGFuZGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IldpZGdldEFjdGlvbiBUb2dnbGUiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRpdGxlPSJbJSBUcmFuc2xhdGUoIlRvZ2dsZSB0aGlzIHdpZGdldCIpIHwgaHRtbCAlXSI+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aDI+WyUgVHJhbnNsYXRlKCJQcm9jZXNzZWQgSm9icyIpIHwgaHRtbCAlXTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iRGF0YVRhYmxlIj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIlNob3ciKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiSUQiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiT3BlcmF0aW9uIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIlN0YXR1cyIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJQcmlvcml0eSIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJDcmVhdGVkIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIkNyZWF0ZWQgYnkiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ2hhbmdlZCIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJDaGFuZ2VkIGJ5IikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KClslIFJlbmRlckJsb2NrU3RhcnQoIkpvYlJvdyIpICVdCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iU21hbGxGb250Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB0aXRsZT0iRXhwYW5kICIgb25jbGljaz0iVG9nZ2xlKCdKb2JQYXJhbVslIERhdGEuSm9iSUQgfCBodG1sICVdJyk7IHJldHVybiBmYWxzZTsiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBUcmFuc2xhdGUoIlBhcmFtZXRlciIpIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGl0bGU9IkV4cGFuZCAiIG9uY2xpY2s9IlRvZ2dsZSgnSm9iUmVzdWx0WyUgRGF0YS5Kb2JJRCB8IGh0bWwgJV0nKTsgcmV0dXJuIGZhbHNlOyIgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiUmVzdWx0IikgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5bJSBEYXRhLkpvYklEIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WyUgRGF0YS5Kb2JPcGVyYXRpb24gfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5bJSBEYXRhLkpvYlN0YXRlIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WyUgRGF0YS5Kb2JQcmlvcml0eSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlslIERhdGEuSm9iQ3JlYXRlVGltZSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlslIERhdGEuSm9iQ3JlYXRlQnkgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5bJSBEYXRhLkpvYkNoYW5nZVRpbWUgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5bJSBEYXRhLkpvYkNoYW5nZUJ5IHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBuYW1lPSJKb2JQYXJhbVslIERhdGEuSm9iSUQgfCBodG1sICVdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlslIFRyYW5zbGF0ZSgiUGFyYW1ldGVycyIpIHwgaHRtbCAlXTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KClslIFJlbmRlckJsb2NrU3RhcnQoIkpvYlBhcmFtIikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgbmFtZT0iSm9iUGFyYW1bJSBEYXRhLkpvYklEIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiIgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ29udGVudEtleSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iNyIgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ29udGVudFZhbHVlIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIkpvYlBhcmFtIikgJV0KCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBzdHlsZT0iZGlzcGxheTogbm9uZTsiIG5hbWU9IkpvYlJlc3VsdFslIERhdGEuSm9iSUQgfCBodG1sICVdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIzIj48c3Ryb25nPlslIFRyYW5zbGF0ZSgiUmVzdWx0IikgfCBodG1sICVdICM8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjYiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJKb2JSZXN1bHQiKSAlXQogICAgICAgICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBuYW1lPSJKb2JSZXN1bHRbJSBEYXRhLkpvYklEIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMyIgY2xhc3M9IkxlZnQiPlslIERhdGEuUmVzdWx0TnVtYmVyIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IkxlZnQiPlslIFRyYW5zbGF0ZSgiS2V5IikgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iTGVmdCI+WyUgVHJhbnNsYXRlKCJWYWx1ZSIpIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WyUgRGF0YS5SZXN1bHRDcmVhdGVUaW1lIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WyUgRGF0YS5SZXN1bHRDcmVhdGVCeSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlslIERhdGEuUmVzdWx0Q2hhbmdlVGltZSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlslIERhdGEuUmVzdWx0Q2hhbmdlQnkgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KClslIFJlbmRlckJsb2NrU3RhcnQoIkpvYlJlc3VsdFBhcmFtIikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgbmFtZT0iSm9iUmVzdWx0WyUgRGF0YS5Kb2JJRCB8IGh0bWwgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjMiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IkxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ29udGVudEtleSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IkxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ29udGVudFZhbHVlIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgpbJSBSZW5kZXJCbG9ja0VuZCgiSm9iUmVzdWx0UGFyYW0iKSAlXQoKWyUgUmVuZGVyQmxvY2tFbmQoIkpvYlJlc3VsdCIpICVdCgpbJSBSZW5kZXJCbG9ja0VuZCgiSm9iUm93IikgJV0KClslIFJlbmRlckJsb2NrU3RhcnQoIkpvYk5vUm93IikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjkiPlslIFRyYW5zbGF0ZSgiTm8gZGF0YSBmb3VuZC4iKSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgpbJSBSZW5kZXJCbG9ja0VuZCgiSm9iTm9Sb3ciKSAlXQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4K</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitLocation.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitLocationHistory.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxkaXYgY2xhc3M9IkxheW91dFBvcHVwIEFSSUFSb2xlTWFpbiI+CgogICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICA8aDE+CiAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiTWFuYWdlZCBPVFJTIENvbnNvbGUiKSB8IGh0bWwgJV0gLSBbJSBUcmFuc2xhdGUoIkxvY2F0aW9uIEhpc3RvcnkiKSB8IGh0bWwgJV0KICAgICAgICA8L2gxPgogICAgICAgIDxwPgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iQ2FuY2VsQ2xvc2VQb3B1cCI+WyUgVHJhbnNsYXRlKCJDYW5jZWwgJiBjbG9zZSIpIHwgaHRtbCAlXTwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiSGlzdG9yeSBDb250ZW50IikgfCBodG1sICVdCiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9IkRhdGFUYWJsZSI+CiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJBY3Rpb24iKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ29tbWVudCIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJab29tIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIlVzZXIiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ3JlYXRldGltZSIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJOb0hpc3RvcnlJdGVtIikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiTm8gZGF0YSBmb3VuZC4iKSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ClslIFJlbmRlckJsb2NrRW5kKCJOb0hpc3RvcnlJdGVtIikgJV0KClslIFJlbmRlckJsb2NrU3RhcnQoIkhpc3RvcnlJdGVtIikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuSGlzdG9yeVR5cGUgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5NZXNzYWdlIHwgdHJ1bmNhdGUoMTAwKSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLlVzZXJMb2dpbiB8IGh0bWwgJV0gKFslIERhdGEuVXNlckZpcnN0bmFtZSB8IGh0bWwgJV0gWyUgRGF0YS5Vc2VyTGFzdG5hbWUgfCBodG1sICVdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkNyZWF0ZVRpbWUgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ClslIFJlbmRlckJsb2NrRW5kKCJIaXN0b3J5SXRlbSIpICVdCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo=</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitMgmtServer.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitMgmtServerHistory.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxkaXYgY2xhc3M9IkxheW91dFBvcHVwIEFSSUFSb2xlTWFpbiI+CgogICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICA8aDE+CiAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiTWFuYWdlZCBPVFJTIENvbnNvbGUiKSB8IGh0bWwgJV0gLSBbJSBUcmFuc2xhdGUoIk1nbXQgU2VydmVyIEhpc3RvcnkiKSB8IGh0bWwgJV0KICAgICAgICA8L2gxPgogICAgICAgIDxwPgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iQ2FuY2VsQ2xvc2VQb3B1cCI+WyUgVHJhbnNsYXRlKCJDYW5jZWwgJiBjbG9zZSIpIHwgaHRtbCAlXTwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiSGlzdG9yeSBDb250ZW50IikgfCBodG1sICVdCiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9IkRhdGFUYWJsZSI+CiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJBY3Rpb24iKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ29tbWVudCIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJab29tIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5bJSBUcmFuc2xhdGUoIlVzZXIiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiQ3JlYXRldGltZSIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+ClslIFJlbmRlckJsb2NrU3RhcnQoIk5vSGlzdG9yeUl0ZW0iKSAlXQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgVHJhbnNsYXRlKCJObyBkYXRhIGZvdW5kLiIpIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIk5vSGlzdG9yeUl0ZW0iKSAlXQoKWyUgUmVuZGVyQmxvY2tTdGFydCgiSGlzdG9yeUl0ZW0iKSAlXQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5IaXN0b3J5VHlwZSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLk1lc3NhZ2UgfCB0cnVuY2F0ZSgxMDApIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuVXNlckxvZ2luIHwgaHRtbCAlXSAoWyUgRGF0YS5Vc2VyRmlyc3RuYW1lIHwgaHRtbCAlXSBbJSBEYXRhLlVzZXJMYXN0bmFtZSB8IGh0bWwgJV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ3JlYXRlVGltZSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIkhpc3RvcnlJdGVtIikgJV0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cg==</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitNew.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KClslIFJlbmRlckJsb2NrU3RhcnQoIkl0ZW1UeXBlIikgJV0KPGRpdiBjbGFzcz0iTWFpbkJveCBBUklBUm9sZU1haW4gTGF5b3V0Rml4ZWRTaWRlYmFyIFNpZGViYXJGaXJzdCI+CgogICAgPGgxPlslIFRyYW5zbGF0ZSgiTWFuYWdlZCBPVFJTIENvbnNvbGUiKSB8IGh0bWwgJV0gLSBbJSBUcmFuc2xhdGUoIk5ldyBSZXNvdXJjZSIpIHwgaHRtbCAlXTwvaDE+CgogICAgPGRpdiBjbGFzcz0iU2lkZWJhckNvbHVtbiI+CiAgICAgICAgPGRpdiBjbGFzcz0iV2lkZ2V0U2ltcGxlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgICAgIDxoMj5bJSBUcmFuc2xhdGUoIkFjdGlvbnMiKSB8IGh0bWwgJV08L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9IkFjdGlvbkxpc3QiPgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJBY3Rpb25MaXN0SXRlbSIpICVdCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJbJSBFbnYoIkJhc2VsaW5rIikgJV1bJSBEYXRhLkxpbmsgfCBJbnRlcnBvbGF0ZSAlXSIgY2xhc3M9IkNhbGxGb3JBY3Rpb24gWyUgRGF0YS5DbGFzcyB8IGh0bWwgJV0iPjxzcGFuPlslIFRyYW5zbGF0ZShEYXRhLk5hbWUpIHwgaHRtbCAlXTwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KWyUgUmVuZGVyQmxvY2tFbmQoIkFjdGlvbkxpc3RJdGVtIikgJV0KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iQ29udGVudENvbHVtbiI+CiAgICAgICAgPGRpdiBjbGFzcz0iV2lkZ2V0U2ltcGxlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgICAgIDxoMj5bJSBUcmFuc2xhdGUoIk5ldyBSZXNvdXJjZSIpIHwgaHRtbCAlXTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9IlRhYmxlTGlrZSI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iSXRlbVR5cGUiPlslIFRyYW5zbGF0ZSgiQ3JlYXRlIikgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkl0ZW1UeXBlU2VsZWN0aW9uICVdCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJTcGFjaW5nVG9wIENlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Ik5ld0luc2VydCIgaHJlZj0iIiBjbGFzcz0iQXNQb3B1cCBDYWxsRm9yQWN0aW9uIj48c3Bhbj5bJSBUcmFuc2xhdGUoIk5ldyIpIHwgaHRtbCAlXTwvc3Bhbj48L2E+ClslIFdSQVBQRVIgSlNPbkRvY3VtZW50Q29tcGxldGUgJV0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPi8vPCFbQ0RBVEFbCiAgICAkKCcjTmV3SW5zZXJ0JykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoRXZlbnQpIHsKICAgICAgICB2YXIgTGluaywgSXRlbVR5cGU7CgogICAgICAgIC8vIGdldCBjdXJyZW50IGhyZWYKICAgICAgICBMaW5rID0gJ1slIEVudigiQmFzZWxpbmsiKSAlXUFjdGlvbj1bJSBFbnYoIkFjdGlvbiIpICVdO1N1YmFjdGlvbj1OZXdJbnNlcnQ7SXRlbVR5cGU9JzsKCiAgICAgICAgLy8gZ2V0IGl0ZW0gdHlwZQogICAgICAgIEl0ZW1UeXBlID0gJCgnI0l0ZW1UeXBlJykudmFsKCk7CgogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IGl0ZW0gdHlwZSBoYXMgbm8gYmxhbmsgc3BhY2VzCiAgICAgICAgaWYgKCBJdGVtVHlwZSA9PT0gJ01hbmFnZW1lbnQgU2VydmVyJyApIHsKICAgICAgICAgICAgSXRlbVR5cGUgPSAnTWFuYWdlbWVudFNlcnZlcic7CiAgICAgICAgfQoKICAgICAgICAvLyBhZGQgbmV3IHBhcmFtZXRlcgogICAgICAgICQodGhpcykuYXR0cignaHJlZicsIExpbmsgKyBJdGVtVHlwZSApOwogICAgfSk7CgogICAgJCgnYS5Bc1BvcHVwJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoRXZlbnQpIHsKICAgICAgICBDb3JlLlVJLlBvcHVwLk9wZW5Qb3B1cCgkKHRoaXMpLmF0dHIoJ2hyZWYnKSwgJ1Jlc291cmNlVHlwZScpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0pOwovL11dPjwvc2NyaXB0PgpbJSBFTkQgJV0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KWyUgUmVuZGVyQmxvY2tFbmQoIkl0ZW1UeXBlIikgJV0K</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitNewResource.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitOverview.tt" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxkaXYgY2xhc3M9Ik1haW5Cb3ggQVJJQVJvbGVNYWluIj4KICAgIDxoMT5bJSBUcmFuc2xhdGUoIk1hbmFnZWQgT1RSUyBDb25zb2xlIikgfCBodG1sICVdIC0gWyUgVHJhbnNsYXRlKCJMb2NhdGlvbnMgT3ZlcnZpZXciKSB8IGh0bWwgJV08L2gxPgoKICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgPGgyPlslIFRyYW5zbGF0ZSgiTGlzdCIpIHwgaHRtbCAlXTwvaDI+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iRGF0YVRhYmxlIj4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJOYW1lIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiU3RhdHVzIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPiMgWyUgVHJhbnNsYXRlKCJIb3N0cyIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4jIFslIFRyYW5zbGF0ZSgiTWdtdCBTZXJ2ZXJzIikgfCBodG1sICVdPC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgICAgICA8dGJvZHk+ClslIFJlbmRlckJsb2NrU3RhcnQoIlJlY29yZCIpICVdCiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJNYXN0ZXJBY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJGbGFnIFNtYWxsIiB0aXRsZT0iWyUgVHJhbnNsYXRlKERhdGEuTG9jYXRpb25TdGF0ZSkgfCBodG1sICVdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iWyUgRGF0YS5MRUQgfCBodG1sICVdbGVkIj4iWyUgVHJhbnNsYXRlKERhdGEuTG9jYXRpb25TdGF0ZSkgfCBodG1sICVdIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJbJSBFbnYoIkJhc2VsaW5rIikgfCBodG1sICVdQWN0aW9uPUFnZW50U2FhU0NvY2twaXRMb2NhdGlvbjtMb2NhdGlvbklEPVslIERhdGEuTG9jYXRpb25JRCAlXSIgdGl0bGU9IlslIERhdGEuTG9jYXRpb25OYW1lIHwgaHRtbCAlXSIgY2xhc3M9Ik1hc3RlckFjdGlvbkxpbmsiPlslIERhdGEuTG9jYXRpb25OYW1lIHwgaHRtbCAlXTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlslIERhdGEuTG9jYXRpb25TdGF0ZSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WyUgRGF0YS5OdW1Ib3N0cyB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WyUgRGF0YS5OdW1NZ210U2VydmVycyB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CgpbJSBXUkFQUEVSIEpTT25Eb2N1bWVudENvbXBsZXRlICVdCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4vLzwhW0NEQVRBWwogICAgJCgnLk1hc3RlckFjdGlvbicpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKEV2ZW50KSB7CiAgICAgICAgdmFyICRNYXN0ZXJBY3Rpb25MaW5rID0gJCh0aGlzKS5maW5kKCcuTWFzdGVyQWN0aW9uTGluaycpOwogICAgICAgIC8vIG9ubHkgYWN0IGlmIHRoZSBsaW5rIHdhcyBub3QgY2xpY2tlZCBkaXJlY3RseQogICAgICAgIGlmIChFdmVudC50YXJnZXQgIT09ICRNYXN0ZXJBY3Rpb25MaW5rLmdldCgwKSkgewogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAkTWFzdGVyQWN0aW9uTGluay5hdHRyKCdocmVmJyk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9KTsKLy9dXT48L3NjcmlwdD4KWyUgRU5EICVdClslIFJlbmRlckJsb2NrRW5kKCJSZWNvcmQiKSAlXQogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4K</File>
        <File Location="Kernel/Output/HTML/Templates/Standard/AgentSaaSCockpitSearch.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/FilterElementPost/SaaSCockpitAgentTicketZoom.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkZpbHRlckVsZW1lbnRQb3N0OjpTYWFTQ29ja3BpdEFnZW50VGlja2V0Wm9vbTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6Q29uZmlnJywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okluc3RhbmNlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlBheW1lbnQ6OkJpbGxpbmcnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzICRTZWxmLCAkVHlwZTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gMSBpZiAkU2VsZi0+e0FjdGlvbn0gbmUgJ0FnZW50VGlja2V0Wm9vbSc7CgogICAgIyBnZXQgYW5kIGNoZWNrIHRlbXBsYXRlIG5hbWUKICAgIG15ICRUZW1wbGF0ZU5hbWUgPSAkUGFyYW17VGVtcGxhdGVGaWxlfSB8fCAnJzsKICAgIHJldHVybiAxIGlmICEkVGVtcGxhdGVOYW1lOwoKICAgICMgZ2V0IHZhbGlkIG1vZHVsZXMKICAgIG15ICRUZW1wbGF0ZUlzVmFsaWQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ0Zyb250ZW5kOjpPdXRwdXQ6OkZpbHRlckVsZW1lbnRQb3N0JykKICAgICAgICAtPnsnU2FhU0NvY2twaXRBZ2VudFRpY2tldFpvb20nfQogICAgICAgIC0+e1RlbXBsYXRlc307CgogICAgIyBhcHBseSBvbmx5IGlmIHRlbXBsYXRlIGlzIHZhbGlkIGluIGNvbmZpZwogICAgcmV0dXJuIDEgaWYgISRUZW1wbGF0ZUlzVmFsaWQtPnskVGVtcGxhdGVOYW1lfTsKCiAgICBpZiAoICRUZW1wbGF0ZU5hbWUgZXEgJ0FnZW50Q3VzdG9tZXJUYWJsZVZpZXcnICkgewogICAgICAgICRTZWxmLT5fRGlzcGxheU9PREN1c3RvbWVySW5mbygKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICk7CiAgICB9CgogICAgcmV0dXJuIDE7Cn0KCnN1YiBfRGlzcGxheU9PREN1c3RvbWVySW5mbyB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRUaWNrZXRJRCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKS0+R2V0UGFyYW0oIFBhcmFtID0+ICdUaWNrZXRJRCcgKTsKICAgIHJldHVybiBpZiAhJFRpY2tldElEOwoKICAgIG15ICVUaWNrZXQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VGlja2V0JyktPlRpY2tldEdldCggVGlja2V0SUQgPT4gJFRpY2tldElEICk7CiAgICByZXR1cm4gaWYgISVUaWNrZXQ7CgogICAgbXkgJEN1c3RvbWVySUQgPSAkVGlja2V0e0N1c3RvbWVySUR9OwogICAgcmV0dXJuIGlmICggIWRlZmluZWQgJEN1c3RvbWVySUQgfHwgIWxlbmd0aCAkQ3VzdG9tZXJJRCApOwoKICAgIG15ICRJbnN0YW5jZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnKTsKCiAgICAjIHRyeSB0byBmaW5kIGFuIE9PRCBpbnN0YW5jZSBmb3IgdGhpcyBjdXN0b21lcgogICAgbXkgJEluc3RhbmNlSURzID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZVNlYXJjaCggJ0N1c3RvbWVySUQnID0+IFskQ3VzdG9tZXJJRF0gKTsKICAgIHJldHVybiBpZiAhQHskSW5zdGFuY2VJRHN9OwoKICAgICMgY29sbGVjdCBpbnN0YW5jZSBpbmZvcm1hdGlvbiwgcGVyIGluc3RhbmNlCiAgICBteSAlSW5zdGFuY2VJbmZvcm1hdGlvbjsKICAgIGZvciBteSAkSW5zdGFuY2VJRCAoIEB7JEluc3RhbmNlSURzfSApIHsKICAgICAgICBteSAkSW5zdGFuY2UgPSAkSW5zdGFuY2VPYmplY3QtPkluc3RhbmNlR2V0KCBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlEICk7CiAgICAgICAgaWYgKCByZWYgJEluc3RhbmNlICYmICV7JEluc3RhbmNlfSApIHsKICAgICAgICAgICAgJEluc3RhbmNlSW5mb3JtYXRpb257JEluc3RhbmNlSUR9ID0gJEluc3RhbmNlOwogICAgICAgIH0KICAgIH0KCiAgICBteSAkQmlsbGluZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6UGF5bWVudDo6QmlsbGluZycpOwoKICAgICMgY3JlYXRlIEhUTUwgZm9yIGluc3RhbmNlIGluZm9ybWF0aW9uCiAgICBteSAkSW5zdGFuY2VJbmZvcm1hdGlvbkhUTUwgPSAnJzsKICAgIGZvciBteSAkSW5zdGFuY2VJRCAoIHNvcnQga2V5cyAlSW5zdGFuY2VJbmZvcm1hdGlvbiApIHsKCiAgICAgICAgbXkgJEluc3RhbmNlSW5mb3JtYXRpb24gPSAkSW5zdGFuY2VJbmZvcm1hdGlvbnskSW5zdGFuY2VJRH07CgogICAgICAgICMgaW5zdGFuY2UgSUQgYW5kIGxpbmsgdG8gZWRpdGluZwogICAgICAgICRJbnN0YW5jZUluZm9ybWF0aW9uSFRNTCAuPSAnCiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIFNwYWNpbmdUb3AiPjwvZGl2PgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IicKICAgICAgICAgICAgLiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntCYXNlbGlua30KICAgICAgICAgICAgLiAnQWN0aW9uPUFnZW50U2FhU0NvY2twaXRJbnN0YW5jZVpvb207SW5zdGFuY2VJRD0nCiAgICAgICAgICAgIC4gJEluc3RhbmNlSUQKICAgICAgICAgICAgLiAnIiB0aXRsZT0iJwogICAgICAgICAgICAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoJ0luc3RhbmNlIEVkaXQnKQogICAgICAgICAgICAuICciPicKICAgICAgICAgICAgLiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKCdNYW5hZ2VkIE9UUlMgaW5zdGFuY2UnKQogICAgICAgICAgICAuICcgJyAuICRJbnN0YW5jZUlECiAgICAgICAgICAgIC4gJzwvYT46CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgogICAgICAgICc7CgogICAgICAgICMgaW5zdGFuY2Ugc3RhdGUKICAgICAgICAkSW5zdGFuY2VJbmZvcm1hdGlvbkhUTUwgLj0gJwogICAgICAgICAgICA8bGFiZWw+JwogICAgICAgICAgICAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoJ1N0YXRlJykKICAgICAgICAgICAgLiAnOjwvbGFiZWw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJWYWx1ZSBGaXhlZFZhbHVlU21hbGwiIHRpdGxlPSInCiAgICAgICAgICAgIC4gJEluc3RhbmNlSW5mb3JtYXRpb24tPntTdGF0ZX0KICAgICAgICAgICAgLiAnIj4nCiAgICAgICAgICAgIC4gJEluc3RhbmNlSW5mb3JtYXRpb24tPntTdGF0ZX0KICAgICAgICAgICAgLiAnCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgogICAgICAgICc7CgogICAgICAgICMgaW5zdGFuY2UgYWxpYXMKICAgICAgICBteSAkSW5zdGFuY2VBbGlhcyA9ICctJzsKICAgICAgICBpZiAoIHJlZiAkSW5zdGFuY2VJbmZvcm1hdGlvbi0+e0FsaWFzfSApIHsKICAgICAgICAgICAgJEluc3RhbmNlQWxpYXMgPSAkSW5zdGFuY2VJbmZvcm1hdGlvbi0+e0FsaWFzfS0+e05hbWV9OwogICAgICAgIH0KICAgICAgICAkSW5zdGFuY2VJbmZvcm1hdGlvbkhUTUwgLj0gJwogICAgICAgICAgICA8bGFiZWw+JwogICAgICAgICAgICAuICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoJ0FsaWFzJykKICAgICAgICAgICAgLiAnOjwvbGFiZWw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJWYWx1ZSBGaXhlZFZhbHVlU21hbGwiIHRpdGxlPSInCiAgICAgICAgICAgIC4gJEluc3RhbmNlQWxpYXMKICAgICAgICAgICAgLiAnIj4nCiAgICAgICAgICAgIC4gJEluc3RhbmNlQWxpYXMKICAgICAgICAgICAgLiAnCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgogICAgICAgICc7CgogICAgICAgICMgZnJlZSB0cmlhbAogICAgICAgIG15ICRGcmVlVHJpYWxFeHBpcmVkID0gJEJpbGxpbmdPYmplY3QtPkZyZWVUcmlhbEV4cGlyZWQoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQsCiAgICAgICAgKTsKICAgICAgICBteSAkRnJlZVRyaWFsRXhwaXJhdGlvbkRhdGUgPSAkQmlsbGluZ09iamVjdC0+RnJlZVRyaWFsRXhwaXJhdGlvbkRhdGVHZXQoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQsCiAgICAgICAgKTsKICAgICAgICBpZiAoIGRlZmluZWQgJEZyZWVUcmlhbEV4cGlyYXRpb25EYXRlICYmIGxlbmd0aCAkRnJlZVRyaWFsRXhwaXJhdGlvbkRhdGUgKSB7CiAgICAgICAgICAgICRJbnN0YW5jZUluZm9ybWF0aW9uSFRNTCAuPSAnCiAgICAgICAgICAgICAgICA8bGFiZWw+JwogICAgICAgICAgICAgICAgLiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKCdGcmVlIFRyaWFsIHVudGlsJykKICAgICAgICAgICAgICAgIC4gJzo8L2xhYmVsPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9IlZhbHVlIEZpeGVkVmFsdWVTbWFsbCAnCiAgICAgICAgICAgICAgICAuICggJEZyZWVUcmlhbEV4cGlyZWQgPyAnUmVkJyA6ICdHcmVlbicgKQogICAgICAgICAgICAgICAgLiAnIj4nCiAgICAgICAgICAgICAgICAuICRGcmVlVHJpYWxFeHBpcmF0aW9uRGF0ZQogICAgICAgICAgICAgICAgLiAnCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CiAgICAgICAgICAgICc7CiAgICAgICAgfQogICAgfQoKICAgICR7ICRQYXJhbXtEYXRhfSB9CiAgICAgICAgPX4gc3sgKDwhLS1Ib29rRW5kQ3VzdG9tZXJJdGVtLS0+KSB9CiAgICAgICAgICAgIHskMSRJbnN0YW5jZUluZm9ybWF0aW9uSFRNTH1zbXg7CgogICAgcmV0dXJuOwp9CgoxOwo=</File>
        <File Location="Kernel/Output/HTML/SaaSCockpitMenuGeneric.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OlNhYVNDb2NrcGl0TWVudUdlbmVyaWM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXI7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OkNvbmZpZycsCiAgICAnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcsCik7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgaWYgZnJvbnRlbmQgbW9kdWxlIHJlZ2lzdGVyZWQsIGlmIG5vdCwgZG8gbm90IHNob3cgYWN0aW9uCiAgICBpZiAoICRQYXJhbXtDb25maWd9LT57QWN0aW9ufSApIHsKICAgICAgICBteSAkTW9kdWxlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCdGcm9udGVuZDo6TW9kdWxlJykKICAgICAgICAgICAgLT57ICRQYXJhbXtDb25maWd9LT57QWN0aW9ufSB9OwogICAgICAgIHJldHVybiAkUGFyYW17Q291bnRlcn0gaWYgISRNb2R1bGU7CiAgICB9CgogICAgIyBEb24ndCBzaG93IE9UUlMgc3lzdGVtcyB6b29tIGxpbmssIGlmIG5vIE9UUlMgc3lzdGVtCiAgICBpZiAoICRQYXJhbXtDb25maWd9LT57QWN0aW9ufSBlcSAnQWdlbnRPVFJTU3lzdGVtc1pvb20nICYmICEkUGFyYW17U3lzdGVtSUR9ICkgewogICAgICAgIHJldHVybiAkUGFyYW17Q291bnRlcn07CiAgICB9CgogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpLT5CbG9jaygKICAgICAgICBOYW1lID0+ICdBY3Rpb25MaXN0SXRlbScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICV7ICRQYXJhbXtDb25maWd9IH0sCiAgICAgICAgICAgIENsYXNzID0+ICRQYXJhbXtDb25maWd9LT57UG9wdXBUeXBlfQogICAgICAgICAgICA/ICggJ0FzUG9wdXAgUG9wdXBUeXBlXycgLiAkUGFyYW17Q29uZmlnfS0+e1BvcHVwVHlwZX0gKQogICAgICAgICAgICA6ICcnLAogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgfSwKICAgICk7CgogICAgJFBhcmFte0NvdW50ZXJ9Kys7CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfTsKfQoKMTsK</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Export/DNS.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpFeHBvcnQ6OkROUzsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6TWFpbicsCiAgICAnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpIb3N0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okluc3RhbmNlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlV0aWxzJywKKTsKCnN1YiBDb25maWd1cmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAkU2VsZi0+RGVzY3JpcHRpb24oJ0V4cG9ydHMgRE5TIHpvbmUgZmlsZXMgb2YgTWFuYWdlZCBPVFJTIGluc3RhbmNlcy4nKTsKICAgICRTZWxmLT5BZGRPcHRpb24oCiAgICAgICAgTmFtZSAgICAgICAgPT4gJ2RpcmVjdG9yeScsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ0RpcmVjdG9yeSB0byB3aGljaCBETlMgZmlsZXMgd2lsbCBiZSB3cml0dGVuIChtdXN0IGV4aXN0KS4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci8uKi9zbXgsCiAgICApOwogICAgJFNlbGYtPkFkZE9wdGlvbigKICAgICAgICBOYW1lICAgICAgICA9PiAnaXB2NCcsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ0V4cG9ydCBJUHY0IEROUyBlbnRyaWVzLicsCiAgICAgICAgUmVxdWlyZWQgICAgPT4gMCwKICAgICAgICBIYXNWYWx1ZSAgICA9PiAwLAogICAgKTsKICAgICRTZWxmLT5BZGRPcHRpb24oCiAgICAgICAgTmFtZSAgICAgICAgPT4gJ2lwdjYnLAogICAgICAgIERlc2NyaXB0aW9uID0+ICdFeHBvcnQgSVB2NiBETlMgZW50cmllcy4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDAsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMCwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJU9wdGlvbnM7CiAgICAkT3B0aW9uc3tEaXJlY3Rvcnl9ID0gJFNlbGYtPkdldE9wdGlvbignZGlyZWN0b3J5Jyk7CiAgICAkT3B0aW9uc3tJUHY0fSAgICAgID0gJFNlbGYtPkdldE9wdGlvbignaXB2NCcpOwogICAgJE9wdGlvbnN7SVB2Nn0gICAgICA9ICRTZWxmLT5HZXRPcHRpb24oJ2lwdjYnKTsKCiAgICBpZiAoICEtZCAkT3B0aW9uc3tEaXJlY3Rvcnl9ICkgewogICAgICAgICRTZWxmLT5QcmludCgiPHJlZD5Zb3UgaGF2ZSB0byBnaXZlIGEgdmFsaWQgZGlyZWN0b3J5LjwvcmVkPlxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICB9CgogICAgaWYgKCAhZGVmaW5lZCAkT3B0aW9uc3tJUHY0fSAmJiAhZGVmaW5lZCAkT3B0aW9uc3tJUHY2fSApIHsKICAgICAgICAkU2VsZi0+UHJpbnQoIjxyZWQ+WW91IGhhdmUgdG8gdXNlIG9wdGlvbiAtLWlwdjQgYW5kL29yIC0taXB2Ni48L3JlZD5cbiIpOwogICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgfQoKICAgIG15ICVETlM7CgogICAgIyBhc3NlbWJsZSBob3N0IGVudHJpZXMKICAgIG15ICRIb3N0cyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SG9zdCcpLT5Ib3N0c0ZvckROU0V4cG9ydEdldCgpOwogICAgaWYgKCByZWYgJEhvc3RzIG5lICdBUlJBWScgfHwgIUB7JEhvc3RzfSApIHsKICAgICAgICAkU2VsZi0+UHJpbnQoIjxyZWQ+RXJyb3IgZmV0Y2hpbmcgaG9zdCBlbnRyaWVzLjwvcmVkPlxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICB9CgogICAgbXkgJUhvc3RzQnlJRDsKICAgIGZvciBteSAkSG9zdCAoIEB7JEhvc3RzfSApIHsKCiAgICAgICAgJEhvc3RzQnlJRHsgJEhvc3QtPntIb3N0SUR9IH0gPSB7CiAgICAgICAgICAgIEZRRE4gPT4gJEhvc3QtPntIb3N0SUR9IC4gJy4nIC4gJEhvc3QtPntEb21haW59LAogICAgICAgIH07CgogICAgICAgIGlmICggZGVmaW5lZCAkT3B0aW9uc3tJUHY0fSAmJiBsZW5ndGggJEhvc3QtPntJUEFkZHJlc3N9ICkgewogICAgICAgICAgICBwdXNoIEB7ICRETlN7ICRIb3N0LT57RG9tYWlufSB9IH0sCiAgICAgICAgICAgICAgICAkSG9zdHNCeUlEeyAkSG9zdC0+e0hvc3RJRH0gfS0+e0ZRRE59IC4gJy4nCiAgICAgICAgICAgICAgICAuICJcdFx0XHQiCiAgICAgICAgICAgICAgICAuICIzNjAwIElOIEFcdCIKICAgICAgICAgICAgICAgIC4gJEhvc3QtPntJUEFkZHJlc3N9OwogICAgICAgIH0KCiAgICAgICAgaWYgKCBkZWZpbmVkICRPcHRpb25ze0lQdjZ9ICYmIGxlbmd0aCAkSG9zdC0+e0lQdjZBZGRyZXNzfSApIHsKICAgICAgICAgICAgcHVzaCBAeyAkRE5TeyAkSG9zdC0+e0RvbWFpbn0gfSB9LAogICAgICAgICAgICAgICAgJEhvc3RzQnlJRHsgJEhvc3QtPntIb3N0SUR9IH0tPntGUUROfSAuICcuJwogICAgICAgICAgICAgICAgLiAiXHRcdFx0IgogICAgICAgICAgICAgICAgLiAiMzYwMCBJTiBBQUFBXHQiCiAgICAgICAgICAgICAgICAuICRIb3N0LT57SVB2NkFkZHJlc3N9OwogICAgICAgIH0KCiAgICAgICAgcHVzaCBAeyAkRE5TeyAkSG9zdC0+e0RvbWFpbn0gfSB9LAogICAgICAgICAgICAkSG9zdHNCeUlEeyAkSG9zdC0+e0hvc3RJRH0gfS0+e0ZRRE59IC4gJy4nCiAgICAgICAgICAgIC4gIlx0XHRcdCIKICAgICAgICAgICAgLiAiMzYwMCBJTiBNWFx0IgogICAgICAgICAgICAuICcwICcKICAgICAgICAgICAgLiAkSG9zdHNCeUlEeyAkSG9zdC0+e0hvc3RJRH0gfS0+e0ZRRE59IC4gJy4nOwogICAgfQoKICAgIG15ICRJbnN0YW5jZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnKTsKCiAgICAjIGFzc2VtYmxlIGluc3RhbmNlIGFsaWFzZXMKICAgIG15ICRBbGlhc0J5SW5zdGFuY2VJRCA9ICRJbnN0YW5jZU9iamVjdC0+SW5zdGFuY2VBbGlhc2VzRm9yRE5TRXhwb3J0R2V0KCk7CiAgICBpZiAoIHJlZiAkQWxpYXNCeUluc3RhbmNlSUQgbmUgJ0hBU0gnICkgewogICAgICAgICRTZWxmLT5QcmludCgiPHJlZD5FcnJvciBmZXRjaGluZyBpbnN0YW5jZSBhbGlhcyBlbnRyaWVzLjwvcmVkPlxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICB9CgogICAgIyBhc3NlbWJsZSBpbnN0YW5jZSBlbnRyaWVzCiAgICBteSAkSW5zdGFuY2VzID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZXNGb3JETlNFeHBvcnRHZXQoKTsKICAgIGlmICggcmVmICRJbnN0YW5jZXMgbmUgJ0FSUkFZJyB8fCAhQHskSW5zdGFuY2VzfSApIHsKICAgICAgICAkU2VsZi0+UHJpbnQoIjxyZWQ+RXJyb3IgZmV0Y2hpbmcgaW5zdGFuY2UgZW50cmllcy48L3JlZD5cbiIpOwogICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgfQoKICAgIG15ICRTYWFTVXRpbHNPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlV0aWxzJyk7CgogICAgSU5TVEFOQ0U6CiAgICBmb3IgbXkgJEluc3RhbmNlICggQHskSW5zdGFuY2VzfSApIHsKCiAgICAgICAgbmV4dCBJTlNUQU5DRSBpZiAhJEhvc3RzQnlJRHsgJEluc3RhbmNlLT57SG9zdElEfSB9OwoKICAgICAgICBwdXNoIEB7ICRETlN7ICRJbnN0YW5jZS0+e0RvbWFpbn0gfSB9LAogICAgICAgICAgICAkSW5zdGFuY2UtPntJbnN0YW5jZUlEfSAuICcuJyAuICRJbnN0YW5jZS0+e0RvbWFpbn0gLiAnLicKICAgICAgICAgICAgLiAiXHRcdFx0IgogICAgICAgICAgICAuICIzNjAwIElOIENOQU1FXHQiCiAgICAgICAgICAgIC4gJEhvc3RzQnlJRHsgJEluc3RhbmNlLT57SG9zdElEfSB9LT57RlFETn0gLiAnLic7CgogICAgICAgIG5leHQgSU5TVEFOQ0UgaWYgISRBbGlhc0J5SW5zdGFuY2VJRC0+eyAkSW5zdGFuY2UtPntJbnN0YW5jZUlEfSB9OwogICAgICAgIG5leHQgSU5TVEFOQ0UgaWYgIWxlbmd0aCAkQWxpYXNCeUluc3RhbmNlSUQtPnsgJEluc3RhbmNlLT57SW5zdGFuY2VJRH0gfTsKICAgICAgICBuZXh0IElOU1RBTkNFIGlmICEkU2FhU1V0aWxzT2JqZWN0LT5Jc093bmVkRG9tYWluKCBEb21haW4gPT4gJEFsaWFzQnlJbnN0YW5jZUlELT57ICRJbnN0YW5jZS0+e0luc3RhbmNlSUR9IH0gKTsKCiAgICAgICAgcHVzaCBAeyAkRE5TeyAkSW5zdGFuY2UtPntEb21haW59IH0gfSwKICAgICAgICAgICAgJEFsaWFzQnlJbnN0YW5jZUlELT57ICRJbnN0YW5jZS0+e0luc3RhbmNlSUR9IH0gLiAnLicKICAgICAgICAgICAgLiAiXHRcdFx0IgogICAgICAgICAgICAuICIzNjAwIElOIENOQU1FXHQiCiAgICAgICAgICAgIC4gJEluc3RhbmNlLT57SW5zdGFuY2VJRH0gLiAnLicgLiAkSW5zdGFuY2UtPntEb21haW59IC4gJy4nOwogICAgfQoKICAgICMgd3JpdGUgZXhwb3J0IGZpbGVzCiAgICBteSAkTWFpbk9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpNYWluJyk7CiAgICBmb3IgbXkgJERvbWFpbiAoIHNvcnQga2V5cyAlRE5TICkgewogICAgICAgIG15ICRGaWxlQ29udGVudCA9ICcnOwogICAgICAgIGZvciBteSAkRE5TUmVjb3JkICggQHsgJEROU3skRG9tYWlufSB9ICkgewogICAgICAgICAgICAkRmlsZUNvbnRlbnQgLj0gIiRETlNSZWNvcmRcbiI7CiAgICAgICAgfQoKICAgICAgICAkTWFpbk9iamVjdC0+RmlsZVdyaXRlKAogICAgICAgICAgICBEaXJlY3RvcnkgPT4gJE9wdGlvbnN7RGlyZWN0b3J5fSwKICAgICAgICAgICAgRmlsZW5hbWUgID0+ICREb21haW4gLiAnLnpvbmUnLAogICAgICAgICAgICBDb250ZW50ICAgPT4gXCRGaWxlQ29udGVudCwKICAgICAgICAgICAgTW9kZSAgICAgID0+ICc+JywKICAgICAgICApOwogICAgfQoKICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVPaygpOwp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Export/InstanceData.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpFeHBvcnQ6Okluc3RhbmNlRGF0YTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OkNvbmZpZycsCiAgICAnS2VybmVsOjpTeXN0ZW06Ok1haW4nLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6UGF5bWVudDo6QmlsbGluZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OlRpbWUnLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignRXhwb3J0cyBkYXRhIG9mIGFsbCBNYW5hZ2VkIE9UUlMgaW5zdGFuY2VzIHRvIGdpdmVuIGRpcmVjdG9yeSAobXVzdCBleGlzdCkuJyk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdkaXJlY3RvcnknLAogICAgICAgIERlc2NyaXB0aW9uID0+ICdEaXJlY3RvcnkgdG8gd2hpY2ggZmlsZXMgd2l0aCBpbnN0YW5jZSBkYXRhIHdpbGwgYmUgd3JpdHRlbiAobXVzdCBleGlzdCkuJywKICAgICAgICBSZXF1aXJlZCAgICA9PiAxLAogICAgICAgIEhhc1ZhbHVlICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvLiovc214LAogICAgKTsKCiAgICByZXR1cm47Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAlT3B0aW9uczsKICAgICRPcHRpb25ze0RpcmVjdG9yeX0gPSAkU2VsZi0+R2V0T3B0aW9uKCdkaXJlY3RvcnknKTsKCiAgICBpZiAoICEtZCAkT3B0aW9uc3tEaXJlY3Rvcnl9ICkgewogICAgICAgICRTZWxmLT5QcmludCgiPHJlZD5EaXJlY3RvcnkgJE9wdGlvbnN7RGlyZWN0b3J5fSBkb2VzIG5vdCBleGlzdC48L3JlZD5cbiIpOwogICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgfQoKICAgIG15ICRUaW1lT2JqZWN0ICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaW1lJyk7CiAgICBteSBAQ3VycmVudERhdGUgPSAkVGltZU9iamVjdC0+U3lzdGVtVGltZTJEYXRlKAogICAgICAgIFN5c3RlbVRpbWUgPT4gJFRpbWVPYmplY3QtPlN5c3RlbVRpbWUoKSwKICAgICk7CiAgICBteSAkQ3VycmVudERhdGVTdHJpbmcgPSBzcHJpbnRmKCAnJXUtJTAydS0lMDJ1JywgJEN1cnJlbnREYXRlWzVdLCAkQ3VycmVudERhdGVbNF0sICRDdXJyZW50RGF0ZVszXSApOwoKICAgIG15ICRJbnN0YW5jZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnKTsKICAgIG15ICRJbnN0YW5jZXMgICAgICA9ICRJbnN0YW5jZU9iamVjdC0+SW5zdGFuY2VTZWFyY2goKTsKCiAgICAjIGNvdW50IGluc3RhbmNlcy91c2VyLgogICAgbXkgJUluc3RhbmNlQ291bnQ7CiAgICBmb3IgbXkgJEluc3RhbmNlSUQgKCBAeyRJbnN0YW5jZXN9ICkgewogICAgICAgIG15ICRJbnN0YW5jZSA9ICRJbnN0YW5jZU9iamVjdC0+SW5zdGFuY2VHZXQoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQsCiAgICAgICAgICAgIExvZ05vICAgICAgPT4gMSwKICAgICAgICApOwoKICAgICAgICBpZiAoCiAgICAgICAgICAgICRJbnN0YW5jZQogICAgICAgICAgICAmJiByZWYgJEluc3RhbmNlIGVxICdIQVNIJwogICAgICAgICAgICAmJiAkSW5zdGFuY2UtPntTdGF0ZX0gZXEgJ0luc3RhbmNlUnVubmluZycKICAgICAgICAgICAgKQogICAgICAgIHsKICAgICAgICAgICAgJEluc3RhbmNlQ291bnR7ICRJbnN0YW5jZS0+e0N1c3RvbWVySUR9IHx8ICctbm9uZS0nIH0rKzsKICAgICAgICB9CiAgICB9CgogICAgIyBvdXRwdXQgc3RhdHVzIHN1bW1hcnkgZmlsZXMgcGVyIGluc3RhbmNlLgogICAgbXkgJEJpbGxpbmdPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlBheW1lbnQ6OkJpbGxpbmcnKTsKICAgIG15ICRNYWluT2JqZWN0ICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Ok1haW4nKTsKICAgIG15ICRDb25maWdPYmplY3QgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsKICAgIElOU1RBTkNFOgogICAgZm9yIG15ICRJbnN0YW5jZUlEICggc29ydCBAeyRJbnN0YW5jZXN9ICkgewoKICAgICAgICAjIGdldCBhbiBpbnN0YW5jZS4KICAgICAgICBteSAkSW5zdGFuY2UgPSAkSW5zdGFuY2VPYmplY3QtPkluc3RhbmNlR2V0KAogICAgICAgICAgICBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlELAogICAgICAgICAgICBMb2dObyAgICAgID0+IDEsCiAgICAgICAgKTsKICAgICAgICBuZXh0IElOU1RBTkNFIGlmICEkSW5zdGFuY2UgfHwgcmVmICRJbnN0YW5jZSBuZSAnSEFTSCc7CgogICAgICAgIG15ICVEYXRhOwoKICAgICAgICAjIGFsaWFzPwogICAgICAgIG15ICRBbGlhczsKICAgICAgICBteSAkQWxpYXNEYXRhID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZUFsaWFzR2V0KAogICAgICAgICAgICBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlELAogICAgICAgICAgICBMb2dObyAgICAgID0+IDEsCiAgICAgICAgKTsKICAgICAgICBpZiAoICRBbGlhc0RhdGEgJiYgcmVmICRBbGlhc0RhdGEgZXEgJ0hBU0gnICkgewogICAgICAgICAgICAkQWxpYXMgPSAkQWxpYXNEYXRhLT57TmFtZX07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkQWxpYXMgPSAnJzsKICAgICAgICB9CgogICAgICAgICREYXRhe0lzRnJlZVRyaWFsfSA9ICRCaWxsaW5nT2JqZWN0LT5GcmVlVHJpYWxBY3RpdmVHZXQoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQsCiAgICAgICAgKTsKICAgICAgICAkRGF0YXtGcmVlVHJpYWxFeHBpcmVkfSA9ICRCaWxsaW5nT2JqZWN0LT5GcmVlVHJpYWxFeHBpcmVkKAogICAgICAgICAgICBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlELAogICAgICAgICk7CiAgICAgICAgJERhdGF7RnJlZVRyaWFsRXhwaXJlZERhdGV9ID0gJEJpbGxpbmdPYmplY3QtPkZyZWVUcmlhbEV4cGlyYXRpb25EYXRlR2V0KAogICAgICAgICAgICBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlELAogICAgICAgICk7CiAgICAgICAgaWYgKCAhJERhdGF7RnJlZVRyaWFsRXhwaXJlZERhdGV9ICkgewogICAgICAgICAgICBteSAkSW5zdGFuY2VEYXRlID0gJEJpbGxpbmdPYmplY3QtPkRhdGVQYXJzZSggRGF0ZSA9PiAkSW5zdGFuY2UtPntTZXR1cFRpbWV9ICk7CgogICAgICAgICAgICBpZiAoICFyZWYgJEluc3RhbmNlRGF0ZSApIHsKICAgICAgICAgICAgICAgICRJbnN0YW5jZURhdGUgPSAkQmlsbGluZ09iamVjdC0+RGF0ZVBhcnNlKCBEYXRlID0+ICRDdXJyZW50RGF0ZVN0cmluZyApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBteSBARGF0ZSA9IERhdGU6OlBjYWxjOjpBZGRfRGVsdGFfRGF5cygKICAgICAgICAgICAgICAgICRJbnN0YW5jZURhdGUtPlswXSwgJEluc3RhbmNlRGF0ZS0+WzFdLCAkSW5zdGFuY2VEYXRlLT5bMl0sCiAgICAgICAgICAgICAgICAkQ29uZmlnT2JqZWN0LT5HZXQoJ1NhYVNDb2NrcGl0OjpDdXN0b21lcjo6SW5zdGFuY2U6OkZyZWVUcmlhbFBlcmlvZCcpCiAgICAgICAgICAgICAgICAgICAgfHwgMjEsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgICREYXRhe0ZyZWVUcmlhbEV4cGlyZWREYXRlfSA9IHNwcmludGYoICcldS0lMDJ1LSUwMnUnLCBARGF0ZSApOwogICAgICAgIH0KCiAgICAgICAgIyBtYWtlIHN1cmUgd2UgaGF2ZSBhIGRpcmVjdG9yeSBpbnRvIHdoaWNoIHRvIHdyaXRlIHRoZSBzdGF0dXMgYml0cyBmaWxlLgogICAgICAgIG15ICRIb3N0RGlyID0gJE9wdGlvbnN7RGlyZWN0b3J5fSAuICcvJyAuICRJbnN0YW5jZS0+e0hvc3RJRH07CiAgICAgICAgaWYgKCAhLWQgJEhvc3REaXIgKSB7CiAgICAgICAgICAgIGlmICggISggbWtkaXIgJEhvc3REaXIgKSApIHsKICAgICAgICAgICAgICAgICRTZWxmLT5QcmludCgiPHJlZD5FcnJvciBjcmVhdGluZyBkaXJlY3RvcnkgJEhvc3REaXIuPC9yZWQ+XG4iKTsKICAgICAgICAgICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBteSAkQ291bnQgPSAkSW5zdGFuY2VDb3VudHsgJEluc3RhbmNlLT57Q3VzdG9tZXJJRH0gfHwgJy1ub25lLScgfQogICAgICAgICAgICA/ICRJbnN0YW5jZUNvdW50eyAkSW5zdGFuY2UtPntDdXN0b21lcklEfSB8fCAnLW5vbmUtJyB9CiAgICAgICAgICAgIDogMDsKCiAgICAgICAgIyBwcmVwYXJlIHRoZSBkYXRhIGJpdHMgZmlsZS4KICAgICAgICBteSAkQ29udGVudCA9ICcnOwogICAgICAgICRDb250ZW50IC49ICJJRD0nJEluc3RhbmNlSUQnXG4iOwogICAgICAgICRDb250ZW50IC49ICJIT1NUX0lEPSckSW5zdGFuY2UtPntIb3N0SUR9J1xuIjsKICAgICAgICAkQ29udGVudCAuPSAiQ1VTVE9NRVJfSUQ9JyIgLiAoICRJbnN0YW5jZS0+e0N1c3RvbWVySUR9IHx8ICctbm9uZS0nICkgLiAiJ1xuIjsKICAgICAgICAkQ29udGVudCAuPSAiQ1VTVE9NRVJfQVNTSUdOTUVOVF9EQVRFPSciIC4gKCAkSW5zdGFuY2UtPntTZXR1cFRpbWV9IHx8ICcnICkgLiAiJ1xuIjsKICAgICAgICAkQ29udGVudCAuPSAiU1RBVFVTPSckSW5zdGFuY2UtPntTdGF0ZX0nXG4iOwogICAgICAgICRDb250ZW50IC49ICJBTElBUz0nJEFsaWFzJ1xuIjsKICAgICAgICAkQ29udGVudCAuPSAiSVNfRlJFRV9UUklBTD0nIiAuICggJERhdGF7SXNGcmVlVHJpYWx9ID8gJ1lFUycgOiAnTk8nICkgLiAiJ1xuIjsKICAgICAgICAkQ29udGVudCAuPSAiRlJFRV9UUklBTF9FWFBJUkVEPSciIC4gKCAkRGF0YXtGcmVlVHJpYWxFeHBpcmVkfSA/ICdZRVMnIDogJ05PJyApIC4gIidcbiI7CiAgICAgICAgJENvbnRlbnQgLj0gIkZSRUVfVFJJQUxfRVhQSVJFRF9EQVRFPSckRGF0YXtGcmVlVHJpYWxFeHBpcmVkRGF0ZX0nXG4iOwogICAgICAgICRDb250ZW50IC49ICJDVVNUT01FUl9OVU1CRVJfT0ZfSU5TVEFOQ0VTPSckQ291bnQnXG4iOwoKICAgICAgICAkTWFpbk9iamVjdC0+RmlsZVdyaXRlKAogICAgICAgICAgICBMb2NhdGlvbiA9PiAkSG9zdERpciAuICcvJyAuICRJbnN0YW5jZUlELAogICAgICAgICAgICBDb250ZW50ICA9PiBcJENvbnRlbnQsCiAgICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Export/Invoices.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Export/PaymentData.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpFeHBvcnQ6OlBheW1lbnREYXRhOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6UGF5bWVudDo6QmlsbGluZycsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdFeHBvcnRzIEROUyB6b25lIGZpbGVzIG9mIE1hbmFnZWQgT1RSUyBpbnN0YW5jZXMuJyk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPlByaW50KCJMaXN0IG9mIGFjdGl2ZSBpbnN0YW5jZXMgd2hpY2ggYXJlIG5vdCBmcmVlIHRyaWFsOlxuXG4iKTsKCiAgICBteSAkSW5zdGFuY2VPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okluc3RhbmNlJyk7CiAgICBteSAkQmlsbGluZ09iamVjdCAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlBheW1lbnQ6OkJpbGxpbmcnKTsKICAgIG15ICRJbnN0YW5jZXMgICAgICA9ICRJbnN0YW5jZU9iamVjdC0+SW5zdGFuY2VMaXN0KCk7CgogICAgSU5TVEFOQ0VJRDoKICAgIGZvciBteSAkSW5zdGFuY2VJRCAoIHNvcnQga2V5cyAleyRJbnN0YW5jZXN9ICkgewoKICAgICAgICBteSAkSW5zdGFuY2UgPSAkSW5zdGFuY2VPYmplY3QtPkluc3RhbmNlR2V0KCBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlEICk7CiAgICAgICAgbmV4dCBJTlNUQU5DRUlEIGlmICEkSW5zdGFuY2U7CgogICAgICAgIG15ICRCaWxsaW5nID0gJEJpbGxpbmdPYmplY3QtPkJpbGxpbmdHZXQoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQsCiAgICAgICAgKTsKICAgICAgICBuZXh0IElOU1RBTkNFSUQgaWYgISRCaWxsaW5nOwogICAgICAgIG5leHQgSU5TVEFOQ0VJRCBpZiAhJEJpbGxpbmctPntBY3RpdmV9OwogICAgICAgIG5leHQgSU5TVEFOQ0VJRCBpZiAkQmlsbGluZy0+e1N1YnNjcmlwdGlvbn0gPT0gMTsKCiAgICAgICAgbXkgJEJpbGxpbmdIaXN0b3J5ID0gJEJpbGxpbmdPYmplY3QtPkJpbGxpbmdHZXRIaXN0b3J5TGlzdCgKICAgICAgICAgICAgSW5zdGFuY2VJRCA9PiAkSW5zdGFuY2VJRCwKICAgICAgICApOwoKICAgICAgICAkU2VsZi0+UHJpbnQoIkluc3RhbmNlICRJbnN0YW5jZUlEXG4iKTsKCiAgICAgICAgJFNlbGYtPlByaW50KAogICAgICAgICAgICAiXHRBbGlhczogICAgICAgICAgICIgLiAoICRJbnN0YW5jZS0+e0FsaWFzfS0+e05hbWV9ID8gJEluc3RhbmNlLT57QWxpYXN9LT57TmFtZX0gOiAnLScgKSAuICJcbiIKICAgICAgICApOwogICAgICAgICRTZWxmLT5QcmludCggIlx0Q3VzdG9tZXJJRDogICAgICAiIC4gKCAkSW5zdGFuY2UtPntDdXN0b21lcklEfSA/ICRJbnN0YW5jZS0+e0N1c3RvbWVySUR9IDogJy0nICkgLiAiXG4iICk7CiAgICAgICAgJFNlbGYtPlByaW50KCAiXHRQYXltZW50IHBhdHRlcm46ICIgLiAoICRCaWxsaW5nLT57TWFudWFsQmlsbGluZ30gPyAnQW5udWFsbHknIDogJ01vbnRobHknICkgLiAiXG4iICk7CiAgICAgICAgJFNlbGYtPlByaW50KCJcdExhc3QgYXV0b21hdGljIGludm9pY2UgYW5kIHBheW1lbnQ6XG4iKTsKCiAgICAgICAgaWYgKCAhQHskQmlsbGluZ0hpc3Rvcnl9ICkgewogICAgICAgICAgICAkU2VsZi0+UHJpbnQoIlx0XHRObyBpbnZvaWNlIGZvdW5kLlxuIik7CiAgICAgICAgICAgIG5leHQgSU5TVEFOQ0VJRDsKICAgICAgICB9CgogICAgICAgIEJJTExJTkdISVNUT1JZSUQ6CiAgICAgICAgZm9yIG15ICRCaWxsaW5nSGlzdG9yeUlEICggQHskQmlsbGluZ0hpc3Rvcnl9ICkgewogICAgICAgICAgICBteSAkQ3VycmVudEJpbGxpbmdIaXN0b3J5ID0gJEJpbGxpbmdPYmplY3QtPkJpbGxpbmdHZXRIaXN0b3J5SXRlbSgKICAgICAgICAgICAgICAgIEhpc3RvcnlJRCA9PiAkQmlsbGluZ0hpc3RvcnlJRCwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbmV4dCBCSUxMSU5HSElTVE9SWUlEIGlmICEkQ3VycmVudEJpbGxpbmdIaXN0b3J5OwoKICAgICAgICAgICAgJFNlbGYtPlByaW50KCJcdFx0RGF0ZTogICAkQ3VycmVudEJpbGxpbmdIaXN0b3J5LT57QmlsbGluZ1RpbWV9XG4iKTsKICAgICAgICAgICAgJFNlbGYtPlByaW50KCJcdFx0QW1vdW50OiAkQ3VycmVudEJpbGxpbmdIaXN0b3J5LT57QW1vdW50fVxuIik7CiAgICAgICAgICAgICRTZWxmLT5QcmludCgiXHRcdFN0YXR1czogJEN1cnJlbnRCaWxsaW5nSGlzdG9yeS0+e1N0YXR1c31cbiIpOwoKICAgICAgICAgICAgbGFzdCBCSUxMSU5HSElTVE9SWUlEOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/FreeTrial/DeleteStoppedInstances.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpGcmVlVHJpYWw6OkRlbGV0ZVN0b3BwZWRJbnN0YW5jZXM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgYmFzZSBxdyhLZXJuZWw6OlN5c3RlbTo6Q29uc29sZTo6QmFzZUNvbW1hbmQpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OkVtYWlsJywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okluc3RhbmNlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlBheW1lbnQ6OkJpbGxpbmcnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpUaW1lJywKKTsKCnN1YiBDb25maWd1cmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAkU2VsZi0+RGVzY3JpcHRpb24oJ0RlbGV0ZXMgc3RvcHBlZCBmcmVlIHRyaWFsIE1hbmFnZWQgT1RSUyBpbnN0YW5jZXMuJyk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdkcnktcnVuJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnRG9uXCd0IGRlbGV0ZSBpbnN0YW5jZXMsIG9ubHkgc2hvdyB3aGljaCBpbnN0YW5jZXMgd291bGQgYmUgZGVsZXRlZC4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDAsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMCwKICAgICk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdtaW4tZGF5cycsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ01pbmltdW0gYWdlIGluIGRheXMgb2Ygc3RvcHBlZCBmcmVlIHRyaWFsIGluc3RhbmNlcyB0aGF0IHdpbGwgYmUgZGVsZXRlZC4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci9eWzEtOV1cZCokL3NteCwKICAgICk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdlbWFpbC1hZGRyZXNzJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnRW1haWwgYWRkcmVzcyB0byB3aGljaCBhIHJlcG9ydCBhYm91dCBkZWxldGVkIGluc3RhbmNlcyB3aWxsIGJlIHNlbnQuJywKICAgICAgICBSZXF1aXJlZCAgICA9PiAwLAogICAgICAgIEhhc1ZhbHVlICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvLiovc214LAogICAgKTsKCiAgICByZXR1cm47Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAlT3B0aW9uczsKICAgICRPcHRpb25ze0RyeVJ1bn0gICAgICAgPSAkU2VsZi0+R2V0T3B0aW9uKCdkcnktcnVuJyk7CiAgICAkT3B0aW9uc3tNaW5EYXlzfSAgICAgID0gJFNlbGYtPkdldE9wdGlvbignbWluLWRheXMnKTsKICAgICRPcHRpb25ze0VtYWlsQWRkcmVzc30gPSAkU2VsZi0+R2V0T3B0aW9uKCdlbWFpbC1hZGRyZXNzJyk7CgogICAgIyBmZXRjaCBzdG9wcGVkIGluc3RhbmNlcwogICAgbXkgJEluc3RhbmNlT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpJbnN0YW5jZScpOwogICAgbXkgJEluc3RhbmNlcyAgICAgID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZVNlYXJjaCgKICAgICAgICBTdGF0ZSA9PiBbICdJbnN0YW5jZVN0b3BwZWQnLCBdLAogICAgKTsKCiAgICBteSAkQmlsbGluZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6UGF5bWVudDo6QmlsbGluZycpOwogICAgbXkgJFRpbWVPYmplY3QgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VGltZScpOwogICAgbXkgJFRpbWVzdGFtcE5vdyAgPSAkVGltZU9iamVjdC0+U3lzdGVtVGltZSgpOwoKICAgIG15ICVJbnN0YW5jZXNUb0RlbGV0ZTsKICAgIElOU1RBTkNFSUQ6CiAgICBmb3IgbXkgJEluc3RhbmNlSUQgKCBzb3J0IEB7JEluc3RhbmNlc30gKSB7CgogICAgICAgIG15ICRJbnN0YW5jZSA9ICRJbnN0YW5jZU9iamVjdC0+SW5zdGFuY2VHZXQoIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQgKTsKICAgICAgICBuZXh0IElOU1RBTkNFSUQgaWYgcmVmICRJbnN0YW5jZSBuZSAnSEFTSCc7CgogICAgICAgIG15ICRJc0ZyZWVUcmlhbCA9ICRCaWxsaW5nT2JqZWN0LT5GcmVlVHJpYWxBY3RpdmVHZXQoIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQgKTsKICAgICAgICBuZXh0IElOU1RBTkNFSUQgaWYgISRJc0ZyZWVUcmlhbDsKCiAgICAgICAgbXkgJENoYW5nZURhdGUgPSAkSW5zdGFuY2UtPntDaGFuZ2VUaW1lfTsKICAgICAgICBuZXh0IElOU1RBTkNFSUQgaWYgIWxlbmd0aCAkQ2hhbmdlRGF0ZTsKCiAgICAgICAgbXkgJFRpbWVzdGFtcENoYW5nZURhdGUgPSAkVGltZU9iamVjdC0+VGltZVN0YW1wMlN5c3RlbVRpbWUoIFN0cmluZyA9PiAkQ2hhbmdlRGF0ZSApOwogICAgICAgIG5leHQgSU5TVEFOQ0VJRCBpZiAhJFRpbWVzdGFtcENoYW5nZURhdGU7CgogICAgICAgIG15ICREYXlzRGlmZiA9ICggJFRpbWVzdGFtcE5vdyAtICRUaW1lc3RhbXBDaGFuZ2VEYXRlICkgLyA2MCAvIDYwIC8gMjQ7CiAgICAgICAgbmV4dCBJTlNUQU5DRUlEIGlmICREYXlzRGlmZiA8ICRPcHRpb25ze01pbkRheXN9OwoKICAgICAgICBteSAkQWxpYXM7CiAgICAgICAgaWYgKCBkZWZpbmVkICRJbnN0YW5jZS0+e0FsaWFzfS0+e05hbWV9ICkgewogICAgICAgICAgICAkQWxpYXMgPSAkSW5zdGFuY2UtPntBbGlhc30tPntOYW1lfTsKICAgICAgICB9CgogICAgICAgICRJbnN0YW5jZXNUb0RlbGV0ZXskSW5zdGFuY2VJRH0gPSAkQWxpYXM7CiAgICB9CgogICAgbXkgJExvZyA9ICcnOwogICAgSU5TVEFOQ0VJRDoKICAgIGZvciBteSAkSW5zdGFuY2VJRCAoIHNvcnQga2V5cyAlSW5zdGFuY2VzVG9EZWxldGUgKSB7CiAgICAgICAgbXkgJEFsaWFzID0gJEluc3RhbmNlc1RvRGVsZXRleyRJbnN0YW5jZUlEfTsKCiAgICAgICAgaWYgKCAkT3B0aW9uc3tEcnlSdW59ICkgewogICAgICAgICAgICAkTG9nCiAgICAgICAgICAgICAgICAuPSAiSW5zdGFuY2UgJEluc3RhbmNlSUQgIgogICAgICAgICAgICAgICAgLiAoIGRlZmluZWQgJEFsaWFzID8gIigkQWxpYXMpICIgOiAnJyApCiAgICAgICAgICAgICAgICAuICJ3b3VsZCBiZSBkZWxldGVkLCBza2lwcGluZyBiZWNhdXNlIG9mIC0tZHJ5LXJ1blxuIjsKICAgICAgICAgICAgbmV4dCBJTlNUQU5DRUlEOwogICAgICAgIH0KCiAgICAgICAgbXkgJERlbGV0ZUpvYklEID0gJEluc3RhbmNlT2JqZWN0LT5PcGVyYXRpb25JbnN0YW5jZURlbGV0ZSggSW5zdGFuY2VJRCA9PiAkSW5zdGFuY2VJRCApOwogICAgICAgIGlmICgkRGVsZXRlSm9iSUQpIHsKICAgICAgICAgICAgJExvZwogICAgICAgICAgICAgICAgLj0gIkRlbGV0aW9uIGpvYiBmb3IgaW5zdGFuY2UgJEluc3RhbmNlSUQgIgogICAgICAgICAgICAgICAgLiAoIGRlZmluZWQgJEFsaWFzID8gIigkQWxpYXMpICIgOiAnJyApCiAgICAgICAgICAgICAgICAuICJoYXMgYmVlbiBjcmVhdGVkLCBpbnN0YW5jZSB3aWxsIGJlIGRlbGV0ZWQuXG4iOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJExvZwogICAgICAgICAgICAgICAgLj0gIkRlbGV0aW9uIGpvYiBmb3IgaW5zdGFuY2UgJEluc3RhbmNlSUQgIgogICAgICAgICAgICAgICAgLiAoIGRlZmluZWQgJEFsaWFzID8gIigkQWxpYXMpICIgOiAnJyApCiAgICAgICAgICAgICAgICAuICJjb3VsZCBub3QgYmUgY3JlYXRlZCwgaW5zdGFuY2Ugd2lsbCBub3QgYmUgZGVsZXRlZC5cbiI7CiAgICAgICAgfQogICAgfQoKICAgIGlmICggbGVuZ3RoICRMb2cgKSB7CiAgICAgICAgJFNlbGYtPlByaW50KCRMb2cpOwoKICAgICAgICBpZiAoICRPcHRpb25ze0VtYWlsQWRkcmVzc30gKSB7CiAgICAgICAgICAgIG15ICRFbWFpbFNlbnQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RW1haWwnKS0+U2VuZCgKICAgICAgICAgICAgICAgIFRvICAgICAgID0+ICRPcHRpb25ze0VtYWlsQWRkcmVzc30sCiAgICAgICAgICAgICAgICBTdWJqZWN0ICA9PiAnTWFuYWdlZCBPVFJTOiBEZWxldGlvbiBvZiBzdG9wcGVkIGZyZWUgdHJpYWwgaW5zdGFuY2VzJywKICAgICAgICAgICAgICAgIENoYXJzZXQgID0+ICdVVEYtOCcsCiAgICAgICAgICAgICAgICBNaW1lVHlwZSA9PiAndGV4dC9wbGFpbicsCiAgICAgICAgICAgICAgICBCb2R5ICAgICA9PiAkTG9nLAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoJEVtYWlsU2VudCkgewogICAgICAgICAgICAgICAgJFNlbGYtPlByaW50KCJFbWFpbCBoYXMgYmVlbiBzZW50LlxuIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkU2VsZi0+UHJpbnQoIkVycm9yIHNlbmRpbmcgZW1haWwuXG4iKTsKICAgICAgICAgICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVPaygpOwp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/FreeTrial/StopExpiredInstances.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpGcmVlVHJpYWw6OlN0b3BFeHBpcmVkSW5zdGFuY2VzOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDb250cmFjdCcsCiAgICAnS2VybmVsOjpTeXN0ZW06OkVtYWlsJywKICAgICdLZXJuZWw6OlN5c3RlbTo6T1RSU1N5c3RlbXMnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6UGF5bWVudDo6QmlsbGluZycsCik7CgpzdWIgQ29uZmlndXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgJFNlbGYtPkRlc2NyaXB0aW9uKCdTdG9wcyBleHBpcmVkIGZyZWUgdHJpYWwgTWFuYWdlZCBPVFJTIGluc3RhbmNlcy4nKTsKICAgICRTZWxmLT5BZGRPcHRpb24oCiAgICAgICAgTmFtZSAgICAgICAgPT4gJ2RyeS1ydW4nLAogICAgICAgIERlc2NyaXB0aW9uID0+ICdEb25cJ3Qgc3RvcCBpbnN0YW5jZXMsIG9ubHkgc2hvdyB3aGljaCBpbnN0YW5jZXMgd291bGQgYmUgc3RvcHBlZC4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDAsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMCwKICAgICk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdlbWFpbC1hZGRyZXNzJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnRW1haWwgYWRkcmVzcyB0byB3aGljaCBhIHJlcG9ydCBhYm91dCBkZWxldGVkIGluc3RhbmNlcyB3aWxsIGJlIHNlbnQuJywKICAgICAgICBSZXF1aXJlZCAgICA9PiAwLAogICAgICAgIEhhc1ZhbHVlICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvLiovc214LAogICAgKTsKCiAgICByZXR1cm47Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAlT3B0aW9uczsKICAgICRPcHRpb25ze0RyeVJ1bn0gICAgICAgPSAkU2VsZi0+R2V0T3B0aW9uKCdkcnktcnVuJyk7CiAgICAkT3B0aW9uc3tFbWFpbEFkZHJlc3N9ID0gJFNlbGYtPkdldE9wdGlvbignZW1haWwtYWRkcmVzcycpOwoKICAgICMgZmV0Y2ggZXhwaXJlZCBmcmVlIHRyaWFsIGluc3RhbmNlcwogICAgbXkgJEluc3RhbmNlT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpJbnN0YW5jZScpOwogICAgbXkgJEluc3RhbmNlcyAgICAgID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZUxpc3QoKTsKCiAgICBteSAkQmlsbGluZ09iamVjdCAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OlBheW1lbnQ6OkJpbGxpbmcnKTsKICAgIG15ICRPVFJTU3lzdGVtc09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpPVFJTU3lzdGVtcycpOwogICAgbXkgJENvbnRyYWN0T2JqZWN0ICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNvbnRyYWN0Jyk7CgogICAgbXkgJUluc3RhbmNlc1RvU3RvcDsKICAgIElOU1RBTkNFSUQ6CiAgICBmb3IgbXkgJEluc3RhbmNlSUQgKCBzb3J0IGtleXMgJXskSW5zdGFuY2VzfSApIHsKICAgICAgICBuZXh0IElOU1RBTkNFSUQgaWYgJEluc3RhbmNlcy0+eyRJbnN0YW5jZUlEfSA9fiBte1xBSW5zdGFuY2UoQ3JlYXRlfFN0b3B8RGVsZXRlKS4qXHp9OwoKICAgICAgICBteSAkSW5zdGFuY2UgPSAkSW5zdGFuY2VPYmplY3QtPkluc3RhbmNlR2V0KCBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlEICk7CiAgICAgICAgbmV4dCBJTlNUQU5DRUlEIGlmIHJlZiAkSW5zdGFuY2UgbmUgJ0hBU0gnOwoKICAgICAgICBteSAkSXNGcmVlVHJpYWwgPSAkQmlsbGluZ09iamVjdC0+RnJlZVRyaWFsQWN0aXZlR2V0KCBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlEICk7CiAgICAgICAgbmV4dCBJTlNUQU5DRUlEIGlmICEkSXNGcmVlVHJpYWw7CgogICAgICAgIG15ICRGcmVlVHJpYWxFeHBpcmVkID0gJEJpbGxpbmdPYmplY3QtPkZyZWVUcmlhbEV4cGlyZWQoIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQgKTsKICAgICAgICBuZXh0IElOU1RBTkNFSUQgaWYgISRGcmVlVHJpYWxFeHBpcmVkOwoKICAgICAgICBteSAkQWxpYXM7CiAgICAgICAgaWYgKCBkZWZpbmVkICRJbnN0YW5jZS0+e0FsaWFzfS0+e05hbWV9ICkgewogICAgICAgICAgICAkQWxpYXMgPSAkSW5zdGFuY2UtPntBbGlhc30tPntOYW1lfTsKICAgICAgICB9CgogICAgICAgICMgQ2hlY2sgaWYgT1RSUyBzeXN0ZW0gaXMgYXNzaWduZWQgYW5kIGhhcyBjb250cmFjdC4KICAgICAgICAjIEluIHRoaXMgY2FzZSB0aGUgaW5zdGFuY2UgbXVzdCBub3QgYmUgc3RvcHBlZC4KICAgICAgICBteSAkT1RSU1N5c3RlbXNJRHMgPSAkT1RSU1N5c3RlbXNPYmplY3QtPk9UUlNTeXN0ZW1zU2VhcmNoKAogICAgICAgICAgICBNYW5hZ2VkT1RSU0luc3RhbmNlSURzID0+IFsgJEluc3RhbmNlSUQsIF0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgICAgICAgICAgICAgPT4gMSwKICAgICAgICApOwogICAgICAgIGlmICggQHskT1RSU1N5c3RlbXNJRHN9ICkgewogICAgICAgICAgICBmb3IgbXkgJE9UUlNTeXN0ZW1JRCAoIEB7JE9UUlNTeXN0ZW1zSURzfSApIHsKICAgICAgICAgICAgICAgIG15ICRDb250cmFjdExpc3QgPSAkQ29udHJhY3RPYmplY3QtPkNvbnRyYWN0U2VhcmNoKAogICAgICAgICAgICAgICAgICAgIE9UUlNTeXN0ZW1JRHMgICAgPT4gWyRPVFJTU3lzdGVtSURdLAogICAgICAgICAgICAgICAgICAgIE9yZGVyQnkgICAgICAgICAgPT4gWydTdXBwb3J0U3RhcnREYXRlJ10sCiAgICAgICAgICAgICAgICAgICAgT3JkZXJCeURpcmVjdGlvbiA9PiBbJ1VwJ10sCiAgICAgICAgICAgICAgICAgICAgVXNlcklEICAgICAgICAgICA9PiAxLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIG5leHQgSU5TVEFOQ0VJRCBpZiBAeyRDb250cmFjdExpc3R9OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkSW5zdGFuY2VzVG9TdG9weyRJbnN0YW5jZUlEfSA9ICRBbGlhczsKICAgIH0KCiAgICBteSAkTG9nID0gJyc7CiAgICBJTlNUQU5DRUlEOgogICAgZm9yIG15ICRJbnN0YW5jZUlEICggc29ydCBrZXlzICVJbnN0YW5jZXNUb1N0b3AgKSB7CiAgICAgICAgbXkgJEFsaWFzID0gJEluc3RhbmNlc1RvU3RvcHskSW5zdGFuY2VJRH07CgogICAgICAgIGlmICggJE9wdGlvbnN7RHJ5UnVufSApIHsKICAgICAgICAgICAgJExvZwogICAgICAgICAgICAgICAgLj0gIkluc3RhbmNlICRJbnN0YW5jZUlEICIKICAgICAgICAgICAgICAgIC4gKCBkZWZpbmVkICRBbGlhcyA/ICIoJEFsaWFzKSAiIDogJycgKQogICAgICAgICAgICAgICAgLiAid291bGQgYmUgc3RvcHBlZCwgc2tpcHBpbmcgYmVjYXVzZSBvZiAtLWRyeS1ydW5cbiI7CiAgICAgICAgICAgIG5leHQgSU5TVEFOQ0VJRDsKICAgICAgICB9CgogICAgICAgIG15ICRTdG9wSm9iSUQgPSAkSW5zdGFuY2VPYmplY3QtPk9wZXJhdGlvbkluc3RhbmNlU3RvcCggSW5zdGFuY2VJRCA9PiAkSW5zdGFuY2VJRCApOwogICAgICAgIGlmICgkU3RvcEpvYklEKSB7CiAgICAgICAgICAgICRMb2cKICAgICAgICAgICAgICAgIC49ICJTdG9wIGpvYiBmb3IgaW5zdGFuY2UgJEluc3RhbmNlSUQgIgogICAgICAgICAgICAgICAgLiAoIGRlZmluZWQgJEFsaWFzID8gIigkQWxpYXMpICIgOiAnJyApCiAgICAgICAgICAgICAgICAuICJoYXMgYmVlbiBjcmVhdGVkLCBpbnN0YW5jZSB3aWxsIGJlIHN0b3BwZWQuXG4iOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJExvZwogICAgICAgICAgICAgICAgLj0gIlN0b3Agam9iIGZvciBpbnN0YW5jZSAkSW5zdGFuY2VJRCAiCiAgICAgICAgICAgICAgICAuICggZGVmaW5lZCAkQWxpYXMgPyAiKCRBbGlhcykgIiA6ICcnICkKICAgICAgICAgICAgICAgIC4gImNvdWxkIG5vdCBiZSBjcmVhdGVkLCBpbnN0YW5jZSB3aWxsIG5vdCBiZSBzdG9wcGVkLlxuIjsKICAgICAgICB9CiAgICB9CgogICAgaWYgKCBsZW5ndGggJExvZyApIHsKICAgICAgICAkU2VsZi0+UHJpbnQoJExvZyk7CgogICAgICAgIGlmICggJE9wdGlvbnN7RW1haWxBZGRyZXNzfSApIHsKICAgICAgICAgICAgbXkgJEVtYWlsU2VudCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpFbWFpbCcpLT5TZW5kKAogICAgICAgICAgICAgICAgVG8gICAgICAgPT4gJE9wdGlvbnN7RW1haWxBZGRyZXNzfSwKICAgICAgICAgICAgICAgIFN1YmplY3QgID0+ICdNYW5hZ2VkIE9UUlM6IFN0b3BwZWQgZnJlZSB0cmlhbCBpbnN0YW5jZXMnLAogICAgICAgICAgICAgICAgQ2hhcnNldCAgPT4gJ1VURi04JywKICAgICAgICAgICAgICAgIE1pbWVUeXBlID0+ICd0ZXh0L3BsYWluJywKICAgICAgICAgICAgICAgIEJvZHkgICAgID0+ICRMb2csCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmICgkRW1haWxTZW50KSB7CiAgICAgICAgICAgICAgICAkU2VsZi0+UHJpbnQoIkVtYWlsIGhhcyBiZWVuIHNlbnQuXG4iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTZWxmLT5QcmludCgiRXJyb3Igc2VuZGluZyBlbWFpbC5cbiIpOwogICAgICAgICAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Instance/DataSet.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpJbnN0YW5jZTo6RGF0YVNldDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okluc3RhbmNlJywKKTsKCnN1YiBDb25maWd1cmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAkU2VsZi0+RGVzY3JpcHRpb24oCiAgICAgICAgJ0V4ZWN1dGVzIGpvYiBJbnN0YW5jZURhdGFTZXQgZm9yIGdpdmVuIE1hbmFnZWQgT1RSUyBpbnN0YW5jZSAob3IgYWxsLCBpZiBubyBJRCBnaXZlbikuIFdvcmtzIG9ubHkgZm9yIGluc3RhbmNlcyB3aXRoIHN0YXR1cyBJbnN0YW5jZVJ1bm5pbmcuJwogICAgKTsKICAgICRTZWxmLT5BZGRPcHRpb24oCiAgICAgICAgTmFtZSAgICAgICAgPT4gJ2luc3RhbmNlLWlkJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnSUQgb2YgYSBzaW5nbGUgaW5zdGFuY2UgZm9yIHdoaWNoIHRvIGV4ZWN1dGUgam9iIEluc3RhbmNlRGF0YVNldC4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDAsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci8uKi9zbXgsCiAgICApOwoKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICVPcHRpb25zOwogICAgJE9wdGlvbnN7SW5zdGFuY2VJRH0gPSAkU2VsZi0+R2V0T3B0aW9uKCdpbnN0YW5jZS1pZCcpOwoKICAgICRTZWxmLT5QcmludCgiQWRkaW5nIGpvYnMgdG8gc2V0IGluc3RhbmNlIGRhdGEgLi4uXG4iKTsKCiAgICBteSAkSW5zdGFuY2VJRCAgICAgPSAkT3B0aW9uc3tJbnN0YW5jZUlEfTsKICAgIG15ICRJbnN0YW5jZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnKTsKCiAgICBteSBASW5zdGFuY2VJRHM7CiAgICBpZiAoIGxlbmd0aCAkSW5zdGFuY2VJRCApIHsKICAgICAgICBteSAkSW5zdGFuY2UgPSAkSW5zdGFuY2VPYmplY3QtPkluc3RhbmNlR2V0KCBJbnN0YW5jZUlEID0+ICRJbnN0YW5jZUlEICk7CiAgICAgICAgaWYgKAogICAgICAgICAgICByZWYgJEluc3RhbmNlIG5lICdIQVNIJwogICAgICAgICAgICB8fCAhJXskSW5zdGFuY2V9CiAgICAgICAgICAgIHx8ICRJbnN0YW5jZS0+e1N0YXRlfSBuZSAnSW5zdGFuY2VSdW5uaW5nJwogICAgICAgICAgICApCiAgICAgICAgewogICAgICAgICAgICAkU2VsZi0+UHJpbnQoCiAgICAgICAgICAgICAgICAiSW5zdGFuY2UgJEluc3RhbmNlSUQgbm90IGZvdW5kIG9yIG5vdCBpbiBzdGF0ZSAnSW5zdGFuY2VSdW5uaW5nJy4gSW5zdGFuY2UgZGF0YSB3b24ndCBiZSBzZXQuXG4iCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgICAgIH0KCiAgICAgICAgcHVzaCBASW5zdGFuY2VJRHMsICRJbnN0YW5jZUlEOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgbXkgJEluc3RhbmNlSURzID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZUxpc3QoKTsKCiAgICAgICAgSU5TVEFOQ0VJRDoKICAgICAgICBmb3IgbXkgJEluc3RhbmNlSUQgKCBzb3J0IGtleXMgJXskSW5zdGFuY2VJRHN9ICkgewogICAgICAgICAgICBpZiAoICRJbnN0YW5jZUlEcy0+eyRJbnN0YW5jZUlEfSBuZSAnSW5zdGFuY2VSdW5uaW5nJyApIHsKICAgICAgICAgICAgICAgIG5leHQgSU5TVEFOQ0VJRDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHVzaCBASW5zdGFuY2VJRHMsICRJbnN0YW5jZUlEOwogICAgICAgIH0KICAgIH0KCiAgICBJTlNUQU5DRUlEOgogICAgZm9yIG15ICRJbnN0YW5jZUlEICggc29ydCBASW5zdGFuY2VJRHMgKSB7CgogICAgICAgICRTZWxmLT5QcmludCgiXHQkSW5zdGFuY2VJRFxuIik7CgogICAgICAgICMgYWRkIGpvYiB0byB1cGRhdGUgaW5zdGFuY2UgZGF0YSB3aXRoaW4gaW5zdGFuY2UKICAgICAgICBteSAkSW5zdGFuY2VEYXRhSm9iSUQgPSAkSW5zdGFuY2VPYmplY3QtPk9wZXJhdGlvbk9UUlNJbnN0YW5jZURhdGFTZXQoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEluc3RhbmNlSUQsCiAgICAgICAgKTsKCiAgICAgICAgaWYgKCAhJEluc3RhbmNlRGF0YUpvYklEICkgewogICAgICAgICAgICAkU2VsZi0+UHJpbnQoIlx0XHRFcnJvciBhZGRpbmcgam9iIHRvIHNldCBpbnN0YW5jZSBkYXRhLlxuIik7CiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+RXhpdENvZGVFcnJvcigpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Instance/StatusGet.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpJbnN0YW5jZTo6U3RhdHVzR2V0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbigKICAgICAgICAnUmV0cmlldmVzIHN0YXR1cyBvZiBnaXZlbiBNYW5hZ2VkIE9UUlMgaW5zdGFuY2UgKG9yIGFsbCBpbnN0YW5jZXMgaWYgbm8gSUQgZ2l2ZW4pLicKICAgICk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdpbnN0YW5jZS1pZCcsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ0lEIG9mIGEgc2luZ2xlIGluc3RhbmNlIGZvciB3aGljaCB0byByZXRyaWV2ZSBpdHMgc3RhdHVzLicsCiAgICAgICAgUmVxdWlyZWQgICAgPT4gMCwKICAgICAgICBIYXNWYWx1ZSAgICA9PiAxLAogICAgICAgIFZhbHVlUmVnZXggID0+IHFyLy4qL3NteCwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJU9wdGlvbnM7CiAgICAkT3B0aW9uc3tJbnN0YW5jZUlEfSA9ICRTZWxmLT5HZXRPcHRpb24oJ2luc3RhbmNlLWlkJyk7CgogICAgbXkgJEluc3RhbmNlSUQgICAgID0gJE9wdGlvbnN7SW5zdGFuY2VJRH07CiAgICBteSAkSW5zdGFuY2VPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okluc3RhbmNlJyk7CgogICAgaWYgKCBsZW5ndGggJEluc3RhbmNlSUQgKSB7CiAgICAgICAgbXkgJEluc3RhbmNlID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZUdldCggSW5zdGFuY2VJRCA9PiAkSW5zdGFuY2VJRCApOwoKICAgICAgICBpZiAoCiAgICAgICAgICAgIHJlZiAkSW5zdGFuY2UgbmUgJ0hBU0gnCiAgICAgICAgICAgIHx8ICEleyRJbnN0YW5jZX0KICAgICAgICAgICAgKQogICAgICAgIHsKICAgICAgICAgICAgJFNlbGYtPlByaW50KCJJbnN0YW5jZSAkSW5zdGFuY2VJRCBub3QgZm91bmQuXG4iKTsKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICAgICAgfQoKICAgICAgICAkU2VsZi0+UHJpbnQoIiRJbnN0YW5jZS0+e1N0YXRlfVxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7CiAgICB9CgogICAgbXkgJEluc3RhbmNlSURUb1N0YXR1cyA9ICRJbnN0YW5jZU9iamVjdC0+SW5zdGFuY2VMaXN0KCk7CgogICAgSU5TVEFOQ0VJRDoKICAgIGZvciBteSAkSW5zdGFuY2VJRCAoIHNvcnQga2V5cyAleyRJbnN0YW5jZUlEVG9TdGF0dXN9ICkgewogICAgICAgICRTZWxmLT5QcmludCgiJEluc3RhbmNlSUQ9JEluc3RhbmNlSURUb1N0YXR1cy0+eyRJbnN0YW5jZUlEfVxuIik7CiAgICB9CgogICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/Console/Command/ManagedOTRS/Instance/PoolFillup.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkNvbW1hbmQ6Ok1hbmFnZWRPVFJTOjpJbnN0YW5jZTo6UG9vbEZpbGx1cDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpCYXNlQ29tbWFuZCk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okhvc3QnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignRmlsbHMgdXAgTWFuYWdlZCBPVFJTIGluc3RhbmNlIHBvb2wgd2l0aCBzcGFyZSBpbnN0YW5jZXMuJyk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdkcnktcnVuJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnRG9uXCd0IGNyZWF0ZSBzcGFyZSBpbnN0YW5jZXMsIG9ubHkgc2hvdyBob3cgbWFueSBpbnN0YW5jZXMgd291bGQgYmUgY3JlYXRlZC4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDAsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMCwKICAgICk7CiAgICAkU2VsZi0+QWRkT3B0aW9uKAogICAgICAgIE5hbWUgICAgICAgID0+ICdtYXgtcG9vbC1pbnN0YW5jZS1jb3VudCcsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ01heGltdW0gbnVtYmVyIG9mIHNwYXJlIGluc3RhbmNlcyB0aGF0IHdpbGwgYmUgY3JlYXRlZC4nLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgSGFzVmFsdWUgICAgPT4gMSwKICAgICAgICBWYWx1ZVJlZ2V4ICA9PiBxci9eWzEtOV1cZCokL3NteCwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJU9wdGlvbnM7CiAgICAkT3B0aW9uc3tEcnlSdW59ICAgICAgICAgICAgICAgPSAkU2VsZi0+R2V0T3B0aW9uKCdkcnktcnVuJyk7CiAgICAkT3B0aW9uc3tNYXhQb29sSW5zdGFuY2VDb3VudH0gPSAkU2VsZi0+R2V0T3B0aW9uKCdtYXgtcG9vbC1pbnN0YW5jZS1jb3VudCcpOwoKICAgICRTZWxmLT5QcmludCgiRmlsbGluZyB1cCBwb29sIGluc3RhbmNlcyAuLi5cbiIpOwoKICAgIG15ICRJbnN0YW5jZU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnKTsKICAgIG15ICRIb3N0T2JqZWN0ICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SG9zdCcpOwogICAgbXkgJEhvc3RzICAgICAgICAgID0gJEhvc3RPYmplY3QtPkhvc3RMaXN0KCk7CgogICAgSE9TVElEOgogICAgZm9yIG15ICRIb3N0SUQgKCBzb3J0IGtleXMgJXskSG9zdHN9ICkgewogICAgICAgIG15ICRIb3N0ID0gJEhvc3RPYmplY3QtPkhvc3RHZXQoCiAgICAgICAgICAgIEhvc3RJRCA9PiAkSG9zdElELAogICAgICAgICk7CgogICAgICAgIGlmICgKICAgICAgICAgICAgISRIb3N0CiAgICAgICAgICAgIHx8ICRIb3N0LT57U3RhdGV9IG5lICdIb3N0UnVubmluZycKICAgICAgICAgICAgKQogICAgICAgIHsKICAgICAgICAgICAgbmV4dCBIT1NUSUQ7CiAgICAgICAgfQoKICAgICAgICAkU2VsZi0+UHJpbnQoIlx0SG9zdCAkSG9zdElEICgkSG9zdC0+e05hbWV9KSAuLi5cbiIpOwoKICAgICAgICBteSAkUG9vbEluc3RhbmNlSURzID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZVNlYXJjaCgKICAgICAgICAgICAgSG9zdElEID0+IFskSG9zdElEXSwKICAgICAgICAgICAgU3RhdGUgID0+IFsgJ0luc3RhbmNlQ3JlYXRlZCcsICdJbnN0YW5jZUNyZWF0ZVBlbmRpbmcnLCBdLAogICAgICAgICk7CiAgICAgICAgbXkgJEN1cnJlbnRQb29sSW5zdGFuY2VDb3VudCA9IEB7JFBvb2xJbnN0YW5jZUlEc307CgogICAgICAgIGlmICggJEN1cnJlbnRQb29sSW5zdGFuY2VDb3VudCA+PSAkT3B0aW9uc3tNYXhQb29sSW5zdGFuY2VDb3VudH0gKSB7CiAgICAgICAgICAgICRTZWxmLT5QcmludCgKICAgICAgICAgICAgICAgICJcdFx0Q3VycmVudGx5ICRDdXJyZW50UG9vbEluc3RhbmNlQ291bnQgcG9vbCBpbnN0YW5jZXMgYXZhaWxhYmxlIG9yIHBlbmRpbmcsIHdpbGwgbm90IGNyZWF0ZSBtb3JlLlxuIgogICAgICAgICAgICApOwogICAgICAgICAgICBuZXh0IEhPU1RJRDsKICAgICAgICB9CgogICAgICAgIG15ICRGcmVlUG9vbEluc3RhbmNlQ291bnQgPSAkSG9zdC0+e01heEluc3RhbmNlc30gLSAkSG9zdC0+e051bUluc3RhbmNlc307CiAgICAgICAgaWYgKCAkRnJlZVBvb2xJbnN0YW5jZUNvdW50IDw9IDAgKSB7CiAgICAgICAgICAgICRTZWxmLT5QcmludCgKICAgICAgICAgICAgICAgICJcdFx0Q3VycnJlbnRseSAkQ3VycmVudFBvb2xJbnN0YW5jZUNvdW50IHBvb2wgaW5zdGFuY2VzIGF2YWlsYWJsZSBvciBwZW5kaW5nLCBjYW5ub3QgY3JlYXRlIGFueSBtb3JlIHBvb2wgaW5zdGFuY2VzIG9uIHRoaXMgaG9zdC5cbiIKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbmV4dCBIT1NUSUQ7CiAgICAgICAgfQoKICAgICAgICBteSAkTmV3UG9vbEluc3RhbmNlQ291bnQgPSAkT3B0aW9uc3tNYXhQb29sSW5zdGFuY2VDb3VudH0gLSAkQ3VycmVudFBvb2xJbnN0YW5jZUNvdW50OwogICAgICAgIGlmICggJE5ld1Bvb2xJbnN0YW5jZUNvdW50ID4gJEZyZWVQb29sSW5zdGFuY2VDb3VudCApIHsKICAgICAgICAgICAgJE5ld1Bvb2xJbnN0YW5jZUNvdW50ID0gJEZyZWVQb29sSW5zdGFuY2VDb3VudDsKICAgICAgICB9CgogICAgICAgICRTZWxmLT5QcmludCgKICAgICAgICAgICAgIlx0XHRDdXJyZW50bHkgJEN1cnJlbnRQb29sSW5zdGFuY2VDb3VudCBwb29sIGluc3RhbmNlcyBhdmFpbGFibGUgb3IgcGVuZGluZywgY3JlYXRpbmcgJE5ld1Bvb2xJbnN0YW5jZUNvdW50IG5ldyBwb29sIGluc3RhbmNlcy5cbiIKICAgICAgICApOwoKICAgICAgICBpZiAoICRPcHRpb25ze0RyeVJ1bn0gKSB7CiAgICAgICAgICAgIG5leHQgSE9TVElEOwogICAgICAgIH0KCiAgICAgICAgbXkgJExvY2F0aW9uSUQgPSAkSG9zdC0+e0xvY2F0aW9uSUR9OwogICAgICAgIGZvciBteSAkSW5zdGFuY2VDb3VudCAoIDEgLi4gJE5ld1Bvb2xJbnN0YW5jZUNvdW50ICkgewoKICAgICAgICAgICAgbXkgJE5ld0luc3RhbmNlSUQgPSAkSW5zdGFuY2VPYmplY3QtPkluc3RhbmNlQWRkKAogICAgICAgICAgICAgICAgSG9zdElEICAgICA9PiAkSG9zdElELAogICAgICAgICAgICAgICAgTG9jYXRpb25JRCA9PiAkTG9jYXRpb25JRCwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGlmICggISROZXdJbnN0YW5jZUlEICkgewogICAgICAgICAgICAgICAgJFNlbGYtPlByaW50KCJcdFx0PHJlZD5FcnJvciBhZGRpbmcgbmV3IGluc3RhbmNlIHJlY29yZCB0byBob3N0LjwvcmVkPlxuIik7CiAgICAgICAgICAgICAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlRXJyb3IoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbXkgJENyZWF0ZUpvYklEID0gJEluc3RhbmNlT2JqZWN0LT5PcGVyYXRpb25JbnN0YW5jZUNyZWF0ZSgKICAgICAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJE5ld0luc3RhbmNlSUQsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBpZiAoICEkQ3JlYXRlSm9iSUQgKSB7CiAgICAgICAgICAgICAgICAkU2VsZi0+UHJpbnQoIlx0XHQ8cmVkPkVycm9yIGFkZGluZyBqb2IgdG8gY3JlYXRlIG5ldyBpbnN0YW5jZSAkTmV3SW5zdGFuY2VJRC48L3JlZD5cbiIpOwogICAgICAgICAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRTZWxmLT5QcmludCgiXHRcdEFkZGVkIGluc3RhbmNlICROZXdJbnN0YW5jZUlELlxuIik7CiAgICAgICAgfQogICAgfQoKICAgIGlmICggJE9wdGlvbnN7RHJ5UnVufSApIHsKICAgICAgICAkU2VsZi0+UHJpbnQoIlxuPHllbGxvdz5EUlkgUlVOLCBxdWl0dGluZyB3aXRob3V0IGFjdGlvbi48L3llbGxvdz5cblxuIik7CiAgICB9CgogICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZU9rKCk7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/CustomerCompany/Event/SaaSInstanceUpdate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyQ29tcGFueTo6RXZlbnQ6OlNhYVNJbnN0YW5jZVVwZGF0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIChxdyggRGF0YSBFdmVudCBDb25maWcgVXNlcklEICkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JF99ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkXyEiCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CiAgICBmb3IgKHF3KCBDdXN0b21lcklEIE9sZEN1c3RvbWVySUQgKSkgewogICAgICAgIGlmICggISRQYXJhbXtEYXRhfS0+eyRffSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJF8gaW4gRGF0YSEiCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIDEgaWYgJFBhcmFte0RhdGF9LT57Q3VzdG9tZXJJRH0gZXEgJFBhcmFte0RhdGF9LT57T2xkQ3VzdG9tZXJJRH07CgogICAgbXkgJEluc3RhbmNlT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpJbnN0YW5jZScpOwoKICAgICMgc2VhcmNoIGFsbCBTYWFTIGluc3RhbmNlcyBmb3IgQ3VzdG9tZXJJRAogICAgbXkgJEl0ZW1zID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZVNlYXJjaCgKICAgICAgICBDdXN0b21lcklEID0+IFsgJFBhcmFte0RhdGF9LT57T2xkQ3VzdG9tZXJJRH0gXSwKICAgICAgICBSZXN1bHQgICAgID0+ICdBUlJBWScsCiAgICAgICAgTGltaXQgICAgICA9PiAxMDAwLAogICAgKTsKCiAgICAjIHVwZGF0ZSBhbGwgbWF0Y2hpbmcgU2FhUyBpbnN0YW5jZXMKICAgIGZvciBteSAkSXRlbSAoIEB7JEl0ZW1zfSApIHsKCiAgICAgICAgJEluc3RhbmNlT2JqZWN0LT5fRGF0YWJhc2VVcGRhdGUoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEl0ZW0sCiAgICAgICAgICAgIEN1c3RvbWVySUQgPT4gJFBhcmFte0RhdGF9LT57Q3VzdG9tZXJJRH0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgPT4gMSwKICAgICAgICApOwogICAgfQoKICAgIHJldHVybiAxOwp9CgoxOwo=</File>
        <File Location="Kernel/System/CustomerUser/Event/SaaSInstanceUpdate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcjo6RXZlbnQ6OlNhYVNJbnN0YW5jZVVwZGF0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SW5zdGFuY2UnLAopOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIChxdyggRGF0YSBFdmVudCBDb25maWcgVXNlcklEICkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JF99ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkXyEiCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CiAgICBmb3IgKHF3KCBVc2VyTG9naW4gTmV3RGF0YSBPbGREYXRhICkpIHsKICAgICAgICBpZiAoICEkUGFyYW17RGF0YX0tPnskX30gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRfIGluIERhdGEhIgogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAxCiAgICAgICAgaWYgJFBhcmFte0RhdGF9LT57TmV3RGF0YX0tPntVc2VyQ3VzdG9tZXJJRH0gZXEgJFBhcmFte0RhdGF9LT57T2xkRGF0YX0tPntVc2VyQ3VzdG9tZXJJRH07CgogICAgbXkgJEluc3RhbmNlT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpJbnN0YW5jZScpOwoKICAgICMgc2VhcmNoIGFsbCBTYWFTIGluc3RhbmNlcyBmb3IgQ3VzdG9tZXJJRAogICAgbXkgJEl0ZW1zID0gJEluc3RhbmNlT2JqZWN0LT5JbnN0YW5jZVNlYXJjaCgKICAgICAgICBDdXN0b21lcklEID0+IFsgJFBhcmFte0RhdGF9LT57T2xkRGF0YX0tPntVc2VyQ3VzdG9tZXJJRH0gXSwKICAgICAgICBSZXN1bHQgICAgID0+ICdBUlJBWScsCiAgICAgICAgTGltaXQgICAgICA9PiAxMDAwLAogICAgKTsKCiAgICAjIHVwZGF0ZSBhbGwgbWF0Y2hpbmcgU2FhUyBpbnN0YW5jZXMKICAgIGZvciBteSAkSXRlbSAoIEB7JEl0ZW1zfSApIHsKCiAgICAgICAgJEluc3RhbmNlT2JqZWN0LT5fRGF0YWJhc2VVcGRhdGUoCiAgICAgICAgICAgIEluc3RhbmNlSUQgPT4gJEl0ZW0sCiAgICAgICAgICAgIEN1c3RvbWVySUQgPT4gJFBhcmFte0RhdGF9LT57TmV3RGF0YX0tPntVc2VyQ3VzdG9tZXJJRH0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgPT4gMSwKICAgICAgICApOwogICAgfQoKICAgIHJldHVybiAxOwp9CgoxOwo=</File>
        <File Location="Kernel/System/SaaSCockpit/Event/HistoryAdd.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Event/HistoryDelete.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpFdmVudDo6SGlzdG9yeURlbGV0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6SGlzdG9yeScsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpFdmVudDo6SGlzdG9yeURlbGV0ZSAtIGhpc3RvcnkgY2xlYW51cCBsaWIKCj1oZWFkMSBTWU5PUFNJUwoKRXZlbnQgaGFuZGxlciBtb2R1bGUgZm9yIGhpc3RvcnkgZGVsZXRlIGluIFNhYVMgY29ja3BpdC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9aXRlbSBuZXcoKQoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJEhpc3RvcnlEZWxldGVPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OkV2ZW50OjpIaXN0b3J5RGVsZXRlJyk7CgoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpUaGUgQzxSdW4oKT4gbWV0aG9kIGhhbmRsZXMgaW5zdGFuY2UgcmVtb3ZlIGV2ZW50cyBhbmQgZGVsZXRlcyB0aGUgaGlzdG9yeSBlbnRyaWVzIGZvcgp0aGUgZ2l2ZW4gaW5zdGFuY2VzLgoKSXQgcmV0dXJucyAxIG9uIHN1Y2Nlc3MsIEM8dW5kZWY+IG90aGVyd2lzZS4KCiAgICBteSAkU3VjY2VzcyA9ICRFdmVudE9iamVjdC0+UnVuKAogICAgICAgIEV2ZW50ID0+ICdJbnN0YW5jZVJlbW92ZScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgIEluc3RhbmNlSUQgICAgPT4gJ3YxMjM0NScsCiAgICAgICAgfSwKICAgICAgICBDb25maWcgPT4gewogICAgICAgICAgICBFdmVudCAgICAgICA9PiAnKEluc3RhbmNlUmVtb3ZlKScsCiAgICAgICAgICAgIE1vZHVsZSAgICAgID0+ICdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OkV2ZW50OjpIaXN0b3J5RGVsZXRlJywKICAgICAgICAgICAgVHJhbnNhY3Rpb24gPT4gJzAnLAogICAgICAgIH0sCiAgICAgICAgVXNlcklEID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhEYXRhIEV2ZW50IENvbmZpZyBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgaGFuZGxlIGRlbGV0aW9uIG9mIGEgaW5zdGFuY2UKICAgIGlmICggJFBhcmFte0V2ZW50fSBlcSAnSW5zdGFuY2VSZW1vdmVQcmUnICkgewoKICAgICAgICAjIGRlbGV0ZSBoaXN0b3J5IG9mIGluc3RhbmNlCiAgICAgICAgbXkgJFN1Y2Nlc3MgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6Okhpc3RvcnknKS0+SGlzdG9yeURlbGV0ZSgKICAgICAgICAgICAgSUQgICA9PiAkUGFyYW17RGF0YX0tPntJbnN0YW5jZUlEfSwKICAgICAgICAgICAgVHlwZSA9PiAnSW5zdGFuY2UnLAogICAgICAgICk7CgogICAgICAgICMgaGFuZGxlIGVycm9yCiAgICAgICAgaWYgKCAhJFN1Y2Nlc3MgKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJIaXN0b3J5RGVsZXRlKCkgZmFpbGVkIGZvciBJbnN0YW5jZUlEICckUGFyYW17RGF0YX0tPntJbnN0YW5jZUlEfSchIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIDE7CiAgICB9CgogICAgIyBlcnJvcgogICAgZWxzZSB7CgogICAgICAgICMgYW4gdW5rbm93biBldmVudAogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiJFBhcmFte0V2ZW50fSBpcyBhbiB1bmtub3duIGV2ZW50ISIsCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJldHVybiAxOwp9Cgo9YmVnaW4gSW50ZXJuYWw6Cgo9ZW5kIEludGVybmFsOgoKPWJhY2sKCj1jdXQKCjE7Cgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQKCj1jdXQK</File>
        <File Location="Kernel/System/SaaSCockpit/Event/InstanceQuery.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpFdmVudDo6SW5zdGFuY2VRdWVyeTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAopOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6RXZlbnQ6Okluc3RhbmNlUXVlcnkgLSByZWFjdCB0byBmZWVkYmFjayBmcm9tIG1nbXQgc2VydmVyIGZvciBzdGF0aXN0aWNhbCByZWFzb25zCgo9aGVhZDEgREVTQ1JJUFRJT04KClF1ZXJ5IGluZm9ybWF0aW9uIGFyZSBldmFsdWF0ZWQuCgo9aGVhZDEgU1lOT1BTSVMKCkV2ZW50IGhhbmRsZXIgbW9kdWxlIGZvciBzdGF0aXN0aWNhbCBjYXVzZWQgYnkgZmVlZGJhY2sgZnJvbSBtZ210IHNlcnZlci4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9aXRlbSBuZXcoKQoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJEluc3RhbmNlUXVlcnlPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2FhU0NvY2twaXQ6OkV2ZW50OjpJbnN0YW5jZVF1ZXJ5Jyk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKClRoZSBDPFJ1bigpPiBtZXRob2QgaGFuZGxlcyB0aGUgZXZlbnRzIGFuZCBzZXQgdGhlIHN0YXRlcy4KCkl0IHJldHVybnMgMSBvbiBzdWNjZXNzLCBDPHVuZGVmPiBvdGhlcndpc2UuCgogICAgbXkgJFN1Y2Nlc3MgPSAkRXZlbnRPYmplY3QtPlJ1bigKICAgICAgICBFdmVudCA9PiAnU3RvcmVTdGF0aXN0aWNWYWx1ZScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgIEpvYklEICAgICAgICAgID0+ICcxMjMnLAogICAgICAgICAgICBNZ210U2VydmVySUQgICA9PiAnbTEyM2VmJywKICAgICAgICAgICAgTWF4VGFza3MgICAgICAgPT4gMTAsCiAgICAgICAgICAgIEN1cnJlbnRUYXNrICAgID0+IDYsCiAgICAgICAgICAgIFBlcmNlbnRhZ2VUYXNrID0+IDEwMCwKICAgICAgICAgICAgTWVzc2FnZSAgICAgICAgPT4gJ2RvaW5nIGZpbmUnLAogICAgICAgIH0sCiAgICAgICAgQ29uZmlnID0+IHsKICAgICAgICAgICAgRXZlbnQgICAgICAgPT4gJyg/fD8pJywKICAgICAgICAgICAgTW9kdWxlICAgICAgPT4gJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6RXZlbnQ6Okluc3RhbmNlUXVlcnknLAogICAgICAgICAgICBUcmFuc2FjdGlvbiA9PiAnMCcsCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KERhdGEgRXZlbnQgQ29uZmlnIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBteSAkSm9iSUQgPSAkUGFyYW17RGF0YX0tPntQYXJhbX0tPntKb2JJRH07CgogICAgbXkgJEpvYk9iamVjdCA9ICRLZXJuZWw6Ok9NLT5nZXQoJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6Sm9iJyk7CgogICAgIyBrZWVwIHRyYWNrIG9mIHRoZSBqb2IgcmVzdWx0cyBmcm9tIHRoZSBtZ210IHNlcnZlcgogICAgJEpvYk9iamVjdC0+Sm9iUmVzdWx0QWRkKAogICAgICAgIEpvYklEICAgICAgICAgID0+ICRKb2JJRCwKICAgICAgICBKb2JSZXN1bHRQYXJhbSA9PiB7CiAgICAgICAgICAgIEV2ZW50ID0+ICRQYXJhbXtFdmVudH0sCiAgICAgICAgICAgICV7ICRQYXJhbXtEYXRhfS0+e1BhcmFtfSB9LAogICAgICAgIH0sCiAgICAgICAgVXNlcklEID0+IDEsCiAgICApOwoKICAgICMgVE9ETzogSGVyZSBjb3VsZCBiZSBhIGNoZWNrIG9mIHRoZSByZXN1bHQuCgogICAgbXkgJFN1Y2Nlc3MgPSAkSm9iT2JqZWN0LT5Kb2JVcGRhdGUoCiAgICAgICAgSm9iSUQgID0+ICRKb2JJRCwKICAgICAgICBTdGF0ZSAgPT4gJ0pvYlN1Y2NlZWRlZCcsCiAgICAgICAgVXNlcklEID0+IDEsCiAgICApOwoKICAgIHJldHVybiAxOwp9Cgo9YmVnaW4gSW50ZXJuYWw6Cgo9Y3V0CgoxOwoKPWVuZCBJbnRlcm5hbDoKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQKCj1jdXQK</File>
        <File Location="Kernel/System/SaaSCockpit/Event/StatusUpdate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Job/Dispatcher.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Payment/Billing.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Payment/Price.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpQYXltZW50OjpQcmljZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpEQicsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCik7Cgo9aXRlbSBuZXcoKQoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJFByaWNlT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpQYXltZW50OjpQcmljZScpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFByaWNlR2V0KCkKCk9idGFpbiB0aGUgcHJpY2UgZGV0YWlscyBmb3IgYSBnaXZlbiBwcmljZSBJRC4KCiAgICBteSAkUmVzdWx0ID0gJFByaWNlT2JqZWN0LT5QcmljZUdldCgKICAgICAgICBQcmljZUlEID0+IDI0LCAgICAjIElEIHByb2JhYmx5IHRha2VuIGZyb20gc2Fhc19iaWxsaW5nIGVudHJ5CiAgICAgICAgTG9nTm8gICA9PiAxLCAgICAgIyBvcHRpb25hbCwgdHVybnMgb2ZmIGxvZ2dpbmcKICAgICk7Cgo9Y3V0CgpzdWIgUHJpY2VHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte1ByaWNlSUR9ICkgewogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAnTmVlZCBQcmljZUlEIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgbXkgJERCT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkRCJyk7CgogICAgIyBnZXQgY29udGVudCBmcm9tIGRhdGFiYXNlCiAgICByZXR1cm4gaWYgISREQk9iamVjdC0+UHJlcGFyZSgKICAgICAgICBTUUwgPT4gJ1NFTEVDVCBpZCwgYXZhaWxhYmxlLCBkZXNjcmlwdGlvbiwgcHJpY2VfdHlwZSwgcHJpY2UsIG1heF91c2VycywgcHJpY2VfaXNfcGVyX3VzZXInCiAgICAgICAgICAgIC4gJyBGUk9NIHNhYXNfcHJpY2UnCiAgICAgICAgICAgIC4gJyBXSEVSRSBpZCA9ID8nLAogICAgICAgIEJpbmQgID0+IFsgXCRQYXJhbXtQcmljZUlEfSBdLAogICAgICAgIExpbWl0ID0+IDEsCiAgICApOwoKICAgICMgZmV0Y2ggdGhlIHJlc3VsdAogICAgbXkgJURhdGE7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkREJPYmplY3QtPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAkRGF0YXtQcmljZUlEfSAgICAgICAgICA9ICRSb3dbMF07CiAgICAgICAgJERhdGF7UHJpY2VBdmFpbGFibGV9ICAgPSAkUm93WzFdOwogICAgICAgICREYXRhe1ByaWNlRGVzY3JpcHRpb259ID0gJFJvd1syXTsKICAgICAgICAkRGF0YXtQcmljZVR5cGV9ICAgICAgICA9ICRSb3dbM107CiAgICAgICAgJERhdGF7UHJpY2V9ICAgICAgICAgICAgPSAkUm93WzRdOwogICAgICAgICREYXRhe01heFVzZXJzfSAgICAgICAgID0gJFJvd1s1XTsKICAgICAgICAkRGF0YXtQcmljZUlzUGVyVXNlcn0gICA9ICRSb3dbNl07CiAgICB9CgogICAgIyBjaGVjayBlcnJvcgogICAgaWYgKCAhJURhdGEgKSB7CiAgICAgICAgaWYgKCAhJFBhcmFte0xvZ05vfSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ1ByaWNlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QhJywKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIFwlRGF0YTsKfQoKPWl0ZW0gUHJpY2VTZWFyY2goKQoKUmV0dXJuIGEgbGlzdCBvZiBwcmljZSBJRHMgYmFzZWQgb24gdHlwZSwgQmFzZSAtdnMtIEFkZE9uLgoKICAgIG15ICRSZXN1bHQgPSAkUHJpY2VPYmplY3QtPlByaWNlU2VhcmNoKAogICAgICAgIFR5cGUgICA9PiAnQmFzZScsICAgICMgb3IgJ0FkZE9uJwogICAgICAgIExpbWl0ICA9PiAxMCwgICAgICAgICMgKG9wdGlvbmFsKSBtYXhpbXVtIHNldCBzaXplCiAgICApOwoKPWN1dAoKc3ViIFByaWNlU2VhcmNoIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgaWYgKCAhJFBhcmFte1R5cGV9ICkgewogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiTWlzc2luZyBhcmd1bWVudCBUeXBlIiwKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBteSAkU1FMID0gJ1NFTEVDVCBpZCcKICAgICAgICAuICcgRlJPTSBzYWFzX3ByaWNlJwogICAgICAgIC4gIiBXSEVSRSBwcmljZV90eXBlID0gJyRQYXJhbXtUeXBlfSciCiAgICAgICAgLiAnIE9SREVSIEJZIGF2YWlsYWJsZSBERVNDLCBtYXhfdXNlcnMgQVNDLCBwcmljZSBBU0MnOwoKICAgIG15ICREQk9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpOwoKICAgIHJldHVybiBpZiAhJERCT2JqZWN0LT5QcmVwYXJlKAogICAgICAgIFNRTCAgID0+ICRTUUwsCiAgICAgICAgTGltaXQgPT4gJFBhcmFte0xpbWl0fSwKICAgICk7CgogICAgIyBmZXRjaCB0aGUgcmVzdWx0CiAgICBteSBASURzOwogICAgd2hpbGUgKCBteSBAUm93ID0gJERCT2JqZWN0LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgcHVzaCBASURzLCAkUm93WzBdOwogICAgfQoKICAgIHJldHVybiBcQElEczsKfQoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9aGVhZDEgVkVSU0lPTgoKJElkOiBQcmljZS5wbSx2IDEuNiAyMDExLTA1LTE5IDEzOjQxOjMyIGpwIEV4cCAkCgo9Y3V0CgoxOwo=</File>
        <File Location="Kernel/System/SaaSCockpit/History.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Host.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Instance.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Job.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/Location.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/MgmtServer.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/SaaSCockpit/SOAPHandler.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpTT0FQSGFuZGxlcjsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBiYXNlIHF3KEtlcm5lbDo6U3lzdGVtOjpFdmVudEhhbmRsZXIpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpTT0FQSGFuZGxlciAtIGhhbmRsZXIgZm9yIGluY29taW5nIFNPQVAgcmVxdWVzdHMKCj1oZWFkMSBTWU5PUFNJUwoKSGFuZGxlciBmb3IgaW5jb21pbmcgU09BUCByZXF1ZXN0cy4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9aXRlbSBuZXcoKQoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJFNPQVBIYW5kbGVyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpTT0FQSGFuZGxlcicpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGluaXQgb2YgZXZlbnQgaGFuZGxlcgogICAgJFNlbGYtPkV2ZW50SGFuZGxlckluaXQoCiAgICAgICAgQ29uZmlnID0+ICdTYWFTQ29ja3BpdDo6RXZlbnRNb2R1bGUnLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIE1nbXRTZXJ2ZXJQcm9ncmVzcygpCgpIYW5kbGVyIGZvciBqb2JzIHRoYXQgYXJlIGJlaW5nIGluIHByb2dyZXNzLgoKPWN1dAoKc3ViIE1nbXRTZXJ2ZXJQcm9ncmVzcyB7CiAgICBteSAoICRNb2R1bGVOYW1lLCBAU09BUFBhcmFtQXNBcnJheSApID0gQF87CgogICAgIyB3b3JrYXJvdW5kIGFzIGRpc3BhdGNoX3dpdGgoKSBkb2VzIG5vdCBjYWxsIHRoZSBjb25zdHJ1Y3RvcgogICAgbXkgJE9iamVjdCA9IF9FdmVudEhhbmRsZXJJbml0KCk7CgogICAgIyBUaGUgcGFyYW1zIHNob3VsZCBiZSByZWNlaXZlZCBhcyBhbiBoYXNoLCBidXQgZHVlIHRvIGEgYnVnIHNvbWV3aGVyZSwgYW4gYXJyYXkgaXMgcmVjZWl2ZWQuCiAgICAjIEJ1dCBhcyB3ZSBrbm93IHRoZSBleHBlY3RlZCBwYXJhbXMsIHdlIGNhbiBjcmVhdGUgYW4gaGFzaCBoZXJlLgogICAgbXkgJVNPQVBQYXJhbTsKICAgIEBTT0FQUGFyYW17cXcoIEpvYklEIFNlcnZlcklEIE1heFRhc2tzIEN1cnJlbnRUYXNrIFBlcmNlbnRhZ2VUYXNrIE1lc3NhZ2UgKX0gPSBAU09BUFBhcmFtQXNBcnJheTsKCiAgICAjIHRoZSBldmVudCBjb3JyZXNwb25kIHRvIHRoZSBuYW1lIG9mIHRoZSBjYWxsZWQgc3ViCgogICAgIyB0cmlnZ2VyIHRoZSBldmVudAogICAgJE9iamVjdC0+RXZlbnRIYW5kbGVyKAogICAgICAgIEV2ZW50ID0+ICdNZ210U2VydmVyUHJvZ3Jlc3MnLAogICAgICAgIERhdGEgID0+IHsKICAgICAgICAgICAgU09BUFBhcmFtICA9PiBcJVNPQVBQYXJhbSwKICAgICAgICAgICAgTW9kdWxlTmFtZSA9PiAkTW9kdWxlTmFtZSwKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAxLAogICAgKTsKCiAgICByZXR1cm4gewogICAgICAgIFJlc3VsdCA9PiAnMDogdG9vIGJhZCB0aGF0IHdlIGFyZSBub3QgZG9uZSB5ZXQnLAogICAgfTsKfQoKPWl0ZW0gTWdtdFNlcnZlckNvbXBsZXRpb24oKQoKSGFuZGxlciBmb3IgdGhlIHJlc3BvbnNlIGlmIGEgam9iIGhhcyBiZWVuIGNvbXBsZXRlZC4KCj1jdXQKCnN1YiBNZ210U2VydmVyQ29tcGxldGlvbiB7CiAgICBteSAoICRNb2R1bGVOYW1lLCBAU09BUFBhcmFtQXNBcnJheSApID0gQF87CgogICAgIyB3b3JrYXJvdW5kIGFzIGRpc3BhdGNoX3dpdGgoKSBkb2VzIG5vdCBjYWxsIHRoZSBjb25zdHJ1Y3RvcgogICAgbXkgJE9iamVjdCA9IF9FdmVudEhhbmRsZXJJbml0KCk7CgogICAgIyBUaGUgcGFyYW1zIHNob3VsZCBiZSByZWNlaXZlZCBhcyBhbiBoYXNoLCBidXQgZHVlIHRvIGEgYnVnIHNvbWV3aGVyZSwgYW4gYXJyYXkgaXMgcmVjZWl2ZWQuCiAgICAjIEJ1dCBhcyB3ZSBrbm93IHRoZSBleHBlY3RlZCBwYXJhbXMsIHdlIGNhbiBjcmVhdGUgYW4gaGFzaCBoZXJlLgogICAgbXkgJVNPQVBQYXJhbTsKICAgIEBTT0FQUGFyYW17cXcoSm9iSUQgU2VydmVySUQgUmVzdWx0IEVycm9ycyl9ID0gQFNPQVBQYXJhbUFzQXJyYXk7CgogICAgIyB0aGUgZXZlbnQgY29ycmVzcG9uZHMgdG8gdGhlIG5hbWUgb2YgdGhlIGNhbGxlZCBzdWIKCiAgICAjIHRyaWdnZXIgdGhlIGV2ZW50CiAgICAkT2JqZWN0LT5FdmVudEhhbmRsZXIoCiAgICAgICAgRXZlbnQgPT4gJ01nbXRTZXJ2ZXJDb21wbGV0aW9uJywKICAgICAgICBEYXRhICA9PiB7CiAgICAgICAgICAgIFNPQVBQYXJhbSAgPT4gXCVTT0FQUGFyYW0sCiAgICAgICAgICAgIE1vZHVsZU5hbWUgPT4gJE1vZHVsZU5hbWUsCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gMSwKICAgICk7CgogICAgcmV0dXJuIHsKICAgICAgICBSZXN1bHQgPT4gJzA6IG5vIGxvb3NlIGNhbm9ucycsCiAgICB9Owp9Cgo9aXRlbSBJbnN0YW5jZVF1ZXJ5UmVzdWx0KCkKCkhhbmRsZXIgZm9yIHRoZSByZXNwb25zZSBmb3IgdGhlIHN0YXRpc3RpYy4KCj1jdXQKCnN1YiBJbnN0YW5jZVF1ZXJ5UmVzdWx0IHsKICAgIG15ICggJE1vZHVsZU5hbWUsIEBTT0FQUGFyYW1Bc0FycmF5ICkgPSBAXzsKCiAgICAjIHdvcmthcm91bmQgYXMgZGlzcGF0Y2hfd2l0aCgpIGRvZXMgbm90IGNhbGwgdGhlIGNvbnN0cnVjdG9yCiAgICBteSAkT2JqZWN0ID0gX0V2ZW50SGFuZGxlckluaXQoKTsKCiAgICAjIFRoZSBwYXJhbXMgc2hvdWxkIGJlIHJlY2VpdmVkIGFzIGFuIGhhc2gsIGJ1dCBkdWUgdG8gYSBidWcgc29tZXdoZXJlLCBhbiBhcnJheSBpcyByZWNlaXZlZC4KICAgICMgQnV0IGFzIHdlIGtub3cgdGhlIGV4cGVjdGVkIHBhcmFtcywgd2UgY2FuIGNyZWF0ZSBhbiBoYXNoIGhlcmUuCiAgICBteSAlU09BUFBhcmFtOwogICAgQFNPQVBQYXJhbXtxdyggSm9iSUQgU2VydmVySUQgUmVzdWx0IE1lc3NhZ2UgKX0gPSBAU09BUFBhcmFtQXNBcnJheTsKCiAgICAjIHRoZSBldmVudCBjb3JyZXNwb25kcyB0byB0aGUgbmFtZSBvZiB0aGUgY2FsbGVkIHN1YgogICAgIyB0cmlnZ2VyIHRoZSBldmVudAogICAgJE9iamVjdC0+RXZlbnRIYW5kbGVyKAogICAgICAgIEV2ZW50ID0+ICdJbnN0YW5jZVF1ZXJ5UmVzdWx0JywKICAgICAgICBEYXRhICA9PiB7CiAgICAgICAgICAgIFBhcmFtICAgICAgPT4gXCVTT0FQUGFyYW0sCiAgICAgICAgICAgIE1vZHVsZU5hbWUgPT4gJE1vZHVsZU5hbWUsCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gMSwKICAgICk7CgogICAgcmV0dXJuIHsKICAgICAgICBSZXN1bHQgPT4gJzA6IG5vIGxvb3NlIGNhbm9ucycsCiAgICB9Owp9Cgo9aXRlbSBQaW5nKCkKCkhhbmRsZXIgZm9yIHRoZSBhbGl2ZSB0ZXN0LgpSZXR1cm5zICcwOiBQb25nJy4KCj1jdXQKCnN1YiBQaW5nIHsKICAgIG15ICggJE1vZHVsZU5hbWUsIEBTT0FQUGFyYW1Bc0FycmF5ICkgPSBAXzsKCiAgICAjIHdvcmthcm91bmQgYXMgZGlzcGF0Y2hfd2l0aCgpIGRvZXMgbm90IGNhbGwgdGhlIGNvbnN0cnVjdG9yCiAgICBteSAkT2JqZWN0ID0gX0V2ZW50SGFuZGxlckluaXQoKTsKCiAgICAjIFRoZSBwYXJhbXMgc2hvdWxkIGJlIHJlY2VpdmVkIGFzIGFuIGhhc2gsIGJ1dCBkdWUgdG8gYSBidWcgc29tZXdoZXJlLCBhbiBhcnJheSBpcyByZWNlaXZlZC4KICAgICMgQnV0IGFzIHdlIGtub3cgdGhlIGV4cGVjdGVkIHBhcmFtcywgd2UgY2FuIGNyZWF0ZSBhbiBoYXNoIGhlcmUuCiAgICBteSAlU09BUFBhcmFtOwogICAgQFNPQVBQYXJhbXtxdyhTZXJ2ZXJJRCl9ID0gQFNPQVBQYXJhbUFzQXJyYXk7CgogICAgIyB0aGUgZXZlbnQgY29ycmVzcG9uZHMgdG8gdGhlIG5hbWUgb2YgdGhlIGNhbGxlZCBzdWIKICAgICMgdHJpZ2dlciB0aGUgZXZlbnQKICAgICRPYmplY3QtPkV2ZW50SGFuZGxlcigKICAgICAgICBFdmVudCA9PiAnUGluZycsCiAgICAgICAgRGF0YSAgPT4gewogICAgICAgICAgICBQYXJhbSAgICAgID0+IFwlU09BUFBhcmFtLAogICAgICAgICAgICBNb2R1bGVOYW1lID0+ICRNb2R1bGVOYW1lLAogICAgICAgIH0sCiAgICAgICAgVXNlcklEID0+IDEsCiAgICApOwoKICAgIHJldHVybiB7CiAgICAgICAgUmVzdWx0ID0+ICcwOiBQb25nJywKICAgIH07Cn0KCj1iZWdpbiBJbnRlcm5hbDoKCj1pdGVtIF9FdmVudEhhbmRsZXJJbml0KCkKClRoZSBTT0FQOjpMaXRlIGRpc3BhdGNoZXIgZG9lcyBub3QgY2FsbCB0aGUgY29uc3RydWN0b3Igb2YgS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpTT0FQSGFuZGxlci4KU28gdGhlIF9FdmVudEhhbmRsZXJJbml0KCkgaXMgbm90IGNhbGxlZCBpbiB0aGUgY29uc3RydWN0b3IuCkFzIGEgd29ya2Fyb3VuZCwgdGhlIGRpc3BhdGNoZWQgbWV0aG9kIGNhbGwgRXZlbnRIYW5kbGVySW5pdCgpIHZpYSB0aGlzIGhlbHBlciBzdWJyb3V0aW5lLgoKPWN1dAoKc3ViIF9FdmVudEhhbmRsZXJJbml0IHsKCiAgICAjIGNvbnN0cnVjdCBhbiBvYmplY3Qgd2l0aCB0aGUgbmVlZGVkIG9iamVjdHMKICAgIG15ICRPYmplY3QgPSBibGVzcyB7fSwgJ0tlcm5lbDo6U3lzdGVtOjpTYWFTQ29ja3BpdDo6U09BUEhhbmRsZXInOwoKICAgICMgaW5pdCBvZiBldmVudCBoYW5kbGVyCiAgICAkT2JqZWN0LT5FdmVudEhhbmRsZXJJbml0KAogICAgICAgIENvbmZpZyA9PiAnU2FhU0NvY2twaXQ6OkV2ZW50TW9kdWxlJywKICAgICk7CgogICAgcmV0dXJuICRPYmplY3Q7Cn0KCj1lbmQgSW50ZXJuYWw6Cgo9Y3V0CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAoKPWN1dAo=</File>
        <File Location="Kernel/System/SaaSCockpit/Utils.pm" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/History.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/Host.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/Instance.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/Job.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/Location.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/MgmtServer.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/SaaSCockpit/Utils.t" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKdXNlIHV0Zjg7Cgp1c2UgdmFycyAocXcoJFNlbGYpKTsKCiMgZ2V0IG5lZWRlZCBvYmplY3RzCm15ICRDb25maWdPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwpteSAkVXRpbHNPYmplY3QgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNhYVNDb2NrcGl0OjpVdGlscycpOwoKbXkgJFRlc3RDb3VudCA9IDE7Cm15ICRUZXN0ZmlsZSAgPSAnVXRpbHMudCc7CgojCiMgdGVzdHMgLSB1dGlscwojCgojIGRvIHRoZSBBUEkgY2hlY2sKbXkgQE1ldGhvZHMgPSBxdygKICAgIG5ldwogICAgR2VuZXJhdGVVSUQKICAgIFN0YXRlTGlzdAogICAgU3RhdGUyTEVECik7Cgpmb3IgbXkgJE1ldGhvZE5hbWUgKEBNZXRob2RzKSB7CiAgICAkU2VsZi0+VHJ1ZSgKICAgICAgICAkVXRpbHNPYmplY3QtPmNhbigkTWV0aG9kTmFtZSksCiAgICAgICAgIlRlc3QgJFRlc3RDb3VudCAtIGNoZWNrIGlmIFV0aWxzT2JqZWN0IGNhbiAnJE1ldGhvZE5hbWUnICgkVGVzdGZpbGUpIiwKICAgICk7Cn0KCiRUZXN0Q291bnQrKzsKCiMgVGVzdGluZyBHZW5lcmF0ZVVJRCgpCm15IEBQcmVmaXhlcyA9IHF3KGggbSB2KTsKbXkgJVNlZW47Cgpmb3IgbXkgJE51bWJlciAoIDEgLi4gMTAgKSB7CgogICAgUFJFRklYOgogICAgZm9yIG15ICRQcmVmaXggKEBQcmVmaXhlcykgewoKICAgICAgICBteSAkSUQgPSAkVXRpbHNPYmplY3QtPkdlbmVyYXRlVUlEKAogICAgICAgICAgICBQcmVmaXggPT4gJFByZWZpeCwKICAgICAgICApOwoKICAgICAgICAkSUQgfHw9ICcnOwoKICAgICAgICAkU2VsZi0+VHJ1ZSgKICAgICAgICAgICAgJElELAogICAgICAgICAgICAiVGVzdCAkVGVzdENvdW50IC0gR2VuZXJhdGVkIFVJRCBmb3IgSUQ9JE51bWJlciAoJElEKSAoJFRlc3RmaWxlKSIsCiAgICAgICAgKTsKCiAgICAgICAgbmV4dCBQUkVGSVggaWYgISRJRDsKCiAgICAgICAgbXkgJE1hdGNoZXMgPSAkSUQgPX4gbXsgXEEgJFByZWZpeCBbMC05YS1mXXs1fSBceiB9eG1zOwoKICAgICAgICAkU2VsZi0+VHJ1ZSgKICAgICAgICAgICAgJE1hdGNoZXMsCiAgICAgICAgICAgICJUZXN0ICRUZXN0Q291bnQgfC0gVGVzdCBpZiBVSUQgaGFzIGNvcnJlY3QgZm9ybWF0ICgkVGVzdGZpbGUpIiwKICAgICAgICApOwoKICAgICAgICAkU2VsZi0+VHJ1ZSgKICAgICAgICAgICAgISRTZWVueyRJRH0rKywKICAgICAgICAgICAgIlRlc3QgJFRlc3RDb3VudCB8LSBUZXN0IGlmIHJldHVybmVkIFVJRCBpcyB1bmlxdWUgKCRUZXN0ZmlsZSkiLAogICAgICAgICk7CiAgICB9Cn0KY29udGludWUgewogICAgJFRlc3RDb3VudCsrOwp9CgojIHRlc3QgR2VuZXJhdGVVSUQgd2l0aCBlbXB0eSBwYXJhbWV0ZXIgbGlzdAp7CiAgICBteSAkRW1wdHlVSUQgPSAkVXRpbHNPYmplY3QtPkdlbmVyYXRlVUlEKCk7CiAgICAkU2VsZi0+RmFsc2UoCiAgICAgICAgJEVtcHR5VUlELAogICAgICAgICdUZXN0ICcgLiAkVGVzdENvdW50KysgLiAiIC0gR2VuZXJhdGVVSUQgc2hvdWxkIGZhaWwgd2l0aCBlbXB0eSBwYXJhbSBsaXN0ICgkVGVzdGZpbGUpIiwKICAgICk7CgogICAgJEVtcHR5VUlEID0gJFV0aWxzT2JqZWN0LT5HZW5lcmF0ZVVJRCgKICAgICAgICBQcmVmaXggPT4gJ25vJywKICAgICk7CiAgICAkU2VsZi0+RmFsc2UoCiAgICAgICAgJEVtcHR5VUlELAogICAgICAgICdUZXN0ICcgLiAkVGVzdENvdW50KysgLiAiIC0gR2VuZXJhdGVVSUQgc2hvdWxkIGZhaWwgd2l0aCB3cm9uZyBwcmVmaXggKCRUZXN0ZmlsZSkiLAogICAgKTsKfQoKIyB0ZXN0IFN0YXRlTGlzdApteSAlU3RhdGVzID0gKAogICAgSW5zdGFuY2UgPT4gWwogICAgICAgIHF3KAogICAgICAgICAgICBJbnN0YW5jZUFkZGVkCiAgICAgICAgICAgIEluc3RhbmNlQ3JlYXRlUGVuZGluZyBJbnN0YW5jZUNyZWF0ZUZhaWxlZCBJbnN0YW5jZUNyZWF0ZWQKICAgICAgICAgICAgSW5zdGFuY2VTZXR1cFBlbmRpbmcgSW5zdGFuY2VTZXR1cEZhaWxlZCBJbnN0YW5jZVN0b3BwZWQKICAgICAgICAgICAgSW5zdGFuY2VTdGFydFBlbmRpbmcgSW5zdGFuY2VTdGFydEZhaWxlZCBJbnN0YW5jZVJ1bm5pbmcKICAgICAgICAgICAgSW5zdGFuY2VTdG9wUGVuZGluZyBJbnN0YW5jZVN0b3BGYWlsZWQKICAgICAgICAgICAgSW5zdGFuY2VSZXN0YXJ0UGVuZGluZyBJbnN0YW5jZVJlc3RhcnRGYWlsZWQKICAgICAgICAgICAgSW5zdGFuY2VNb3ZlUGVuZGluZyBJbnN0YW5jZU1vdmVGYWlsZWQKICAgICAgICAgICAgSW5zdGFuY2VVcGRhdGVQZW5kaW5nIEluc3RhbmNlVXBkYXRlRmFpbGVkCiAgICAgICAgICAgIEluc3RhbmNlRGVsZXRlUGVuZGluZyBJbnN0YW5jZURlbGV0ZUZhaWxlZCBJbnN0YW5jZURlbGV0ZWQKICAgICAgICAgICAgSW5zdGFuY2VQYWNrQW5kR29GYWlsZWQgSW5zdGFuY2VQYWNrQW5kR29QZW5kaW5nCiAgICAgICAgICAgIEluc3RhbmNlUmVhZHlGYWlsZWQgSW5zdGFuY2VSZWFkeVBlbmRpbmcKICAgICAgICAgICAgSW5zdGFuY2VTdGFydGVkCiAgICAgICAgICAgIE9UUlNSZWdpc3RyYXRpb25EYXRhU2V0UGVuZGluZyBPVFJTUmVnaXN0cmF0aW9uRGF0YVNldEZhaWxlZAogICAgICAgICAgICBPVFJTSW5zdGFuY2VEYXRhU2V0UGVuZGluZyBPVFJTSW5zdGFuY2VEYXRhU2V0RmFpbGVkCiAgICAgICAgICAgIEluc3RhbmNlT3JnYW5pemF0aW9uU2V0UGVuZGluZyBJbnN0YW5jZU9yZ2FuaXphdGlvblNldEZhaWxlZAogICAgICAgICAgICApLAogICAgXSwKICAgIEpvYiA9PiBbCiAgICAgICAgcXcoSm9iUXVldWVkIEpvYkNsYWltZWQgSm9iU3RhcnRlZCBKb2JJblByb2dyZXNzIEpvYkZhaWxlZCBKb2JTdWNjZWVkZWQgSm9iU3RhbGxlZCBKb2JSZXRyeSBKb2JVbmRlZmluZWQpLAogICAgXSwKICAgIEhvc3QgPT4gWwogICAgICAgIHF3KEhvc3RSdW5uaW5nIEhvc3REb3duIEhvc3RSZXRpcmVkKSwKICAgIF0sCiAgICBNZ210U2VydmVyID0+IFsKICAgICAgICBxdyhNZ210U2VydmVyUnVubmluZyBNZ210U2VydmVyRG93biBNZ210U2VydmVyUmV0aXJlZCksCiAgICBdLAogICAgTG9jYXRpb24gPT4gWwogICAgICAgIHF3KExvY2F0aW9uQWN0aXZlIExvY2F0aW9uSW5hY3RpdmUpLAogICAgXSwKICAgIEFsaWFzID0+IFsKICAgICAgICBxdyhBbGlhc1Jlc2VydmVkIEFsaWFzQ29uZmlybWVkIEFsaWFzRGVsZXRlUGVuZGluZyBBbGlhc0RlbGV0ZWQpLAogICAgXSwKKTsKCiMgY2hlY2sgU3RhdGVMaXN0IHdpdGggZW1wdHkgcGFyYW1ldGVyIGxpc3QgLSBzaG91bGQgZmFpbApteSAkQ2hlY2tMaXN0ID0gJFV0aWxzT2JqZWN0LT5TdGF0ZUxpc3QoKTsKJFNlbGYtPkZhbHNlKAogICAgJENoZWNrTGlzdCwKICAgICdUZXN0ICcgLiAkVGVzdENvdW50KysgLiAiIC0gU3RhdGVMaXN0KCkgc2hvdWxkIGZhaWwgb24gbm8gZ2l2ZW4gdHlwZSAoJFRlc3RmaWxlKSIsCik7CgojIHRlc3QgU3RhdGVMaXN0KCkgd2l0aCBhIG5vbi1leGlzdGVudCB0eXBlCnsKICAgIG15ICRFbXB0eUxpc3QgPSAkVXRpbHNPYmplY3QtPlN0YXRlTGlzdCgKICAgICAgICBUeXBlID0+ICdub25fZXhpc3RlbnQnLAogICAgKTsKCiAgICAkU2VsZi0+SXMoCiAgICAgICAgcmVmICRFbXB0eUxpc3QsCiAgICAgICAgJ0FSUkFZJywKICAgICAgICAiVGVzdCAkVGVzdENvdW50IC0gU3RhdGVMaXN0KCkgcmV0dXJuIHJlZiB0byBhbiBhcnJheSBmb3IgYSBub24gZXhpc3RlbnQgdHlwZSAoJFRlc3RmaWxlKSIsCiAgICApOwoKICAgICRTZWxmLT5Jc0RlZXBseSgKICAgICAgICAkRW1wdHlMaXN0LAogICAgICAgIFtdLAogICAgICAgICJUZXN0ICRUZXN0Q291bnQgLSBTdGF0ZUxpc3QoKSByZXR1cm4gcmVmIHRvIGFuIGVtcHR5IGFycmF5IGZvciBhIG5vbiBleGlzdGVudCB0eXBlICgkVGVzdGZpbGUpIiwKICAgICk7Cn0KJFRlc3RDb3VudCsrOwoKZm9yIG15ICRUeXBlICggc29ydCBrZXlzICVTdGF0ZXMgKSB7CiAgICBteSAkTGlzdCA9ICRVdGlsc09iamVjdC0+U3RhdGVMaXN0KAogICAgICAgIFR5cGUgPT4gJFR5cGUsCiAgICApOwoKICAgICRTZWxmLT5UcnVlKAogICAgICAgICRMaXN0LAogICAgICAgICJUZXN0ICRUZXN0Q291bnQgLSBTdGF0ZUxpc3QgcmV0dXJucyBhIHZhbHVlICgkVGVzdGZpbGUpIiwKICAgICk7CgogICAgJFNlbGYtPklzKAogICAgICAgIHJlZiAkTGlzdCwKICAgICAgICAnQVJSQVknLAogICAgICAgICJUZXN0ICRUZXN0Q291bnQgfC0gU3RhdGVMaXN0IHJldHVybnMgYW4gYXJyYXkgcmVmZXJlbmNlICgkVGVzdGZpbGUpIiwKICAgICk7CgogICAgJExpc3QgPSBbXSBpZiAhKCAkTGlzdCAmJiByZWYgJExpc3QgZXEgJ0FSUkFZJyApOwoKICAgIG15ICRDaGVja0xpc3QgPSAkU3RhdGVzeyRUeXBlfTsKCiAgICBteSAlU2VlblN0YXRlTGlzdDsKICAgIEBTZWVuU3RhdGVMaXN0eyBAeyRMaXN0fSB9ID0gKDEpIHggQHskTGlzdH07CgogICAgZm9yIG15ICRTdGF0ZSAoIEB7JENoZWNrTGlzdH0gKSB7CiAgICAgICAgJFNlbGYtPlRydWUoCiAgICAgICAgICAgICRTZWVuU3RhdGVMaXN0eyRTdGF0ZX0sCiAgICAgICAgICAgICJUZXN0ICRUZXN0Q291bnQgLSAkU3RhdGUgaXMgaW4gTGlzdCByZXR1cm5lZCBieSBTdGF0ZUxpc3QgKCRUZXN0ZmlsZSkiLAogICAgICAgICk7CiAgICB9CiAgICBteSAlU2VlbkNoZWNrTGlzdDsKICAgIEBTZWVuQ2hlY2tMaXN0eyBAeyRDaGVja0xpc3R9IH0gPSAoMSkgeCBAeyRDaGVja0xpc3R9OwoKICAgIGZvciBteSAkU3RhdGUgKCBAeyRMaXN0fSApIHsKICAgICAgICAkU2VsZi0+VHJ1ZSgKICAgICAgICAgICAgJFNlZW5DaGVja0xpc3R7JFN0YXRlfSwKICAgICAgICAgICAgIlRlc3QgJFRlc3RDb3VudCAtICRTdGF0ZSBpbiBsaXN0IHJldHVybmVkIGJ5IFN0YXRlTGlzdCBpcyBpbiBDaGVja0xpc3QgKCRUZXN0ZmlsZSkiLAogICAgICAgICk7CiAgICB9Cgp9CmNvbnRpbnVlIHsKICAgICRUZXN0Q291bnQrKzsKfQoKMTsK</File>
        <File Location="scripts/test/SaaSCockpit.t" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKdXNlIHV0Zjg7Cgp1c2UgdmFycyAocXcoJFNlbGYpKTsKCnVzZSBGaWxlOjpHbG9iIHF3KGJzZF9nbG9iKTsKCiMgZ2V0IG5lZWRlZCBvYmplY3RzCm15ICRDb25maWdPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwpteSAkTWFpbk9iamVjdCAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Ok1haW4nKTsKCm15ICRIb21lICA9ICRDb25maWdPYmplY3QtPkdldCgnSG9tZScpOwpteSBARmlsZXMgPSBic2RfZ2xvYigiJEhvbWUvc2NyaXB0cy90ZXN0L1NhYVNDb2NrcGl0LyoudCIpOwoKIyBUaGlzIGFycmF5IHNob3VsZCBiZSBzZXQsIHdoZW4gb25seSBhIHNlbGVjdGlvbiBvZiB0ZXN0IHNjcmlwdHMgc2hvdWxkIGJlIGV4ZWN1dGVkLgojIExlYXZpbmcgdGhlIGFycmF5IGVtcHR5LCBpbmRpY2F0ZXMgdGhhdCBhbGwgdGVzdCBzY3JpcHRzIHNob3VsZCBiZSBleGVjdXRlZApteSBAU2VsZWN0ZWRUZXN0U2NyaXB0cyA9ICgKCiAgICAjJ0hpc3RvcnkudCcsCiAgICAjJ0hvc3QudCcsCiAgICAjJ0luc3RhbmNlLnQnLAogICAgIydKb2IudCcsCiAgICAjJ0xvY2F0aW9uLnQnLAogICAgIydNZ210U2VydmVyLnQnLAogICAgIydVdGlscy50JywKKTsKCkZJTEU6CmZvciBteSAkRmlsZSAoQEZpbGVzKSB7CgogICAgaWYgKEBTZWxlY3RlZFRlc3RTY3JpcHRzKSB7CgogICAgICAgICMgcnVuIG9ubHkgdGhlIGEgc2VsZWN0aW9uIG9mIHRlc3Qgc2NyaXB0cwogICAgICAgIG15ICRGaWxlSXNTZWxlY3RlZDsKICAgICAgICBmb3IgbXkgJFRlc3QgKEBTZWxlY3RlZFRlc3RTY3JpcHRzKSB7CiAgICAgICAgICAgICRGaWxlSXNTZWxlY3RlZCA9IDEgaWYgJEZpbGUgPX4gbSEvJFRlc3RceiE7CiAgICAgICAgfQoKICAgICAgICBuZXh0IEZJTEUgaWYgISRGaWxlSXNTZWxlY3RlZDsKICAgIH0KCiAgICBteSAkQ29uZmlnRmlsZSA9ICRNYWluT2JqZWN0LT5GaWxlUmVhZCggTG9jYXRpb24gPT4gJEZpbGUgKTsKCiAgICBwcmludCBTVERFUlIgJEZpbGUsICJcbiI7CgogICAgZGllICIkISAoJEZpbGUpIiBpZiAhJENvbmZpZ0ZpbGU7CgogICAgaWYgKCAhZXZhbCB7ICR7JENvbmZpZ0ZpbGV9IH0gKSB7CiAgICAgICAgZGllICIkQCAoJEZpbGUpIjsKICAgIH0KfQoKMTsK</File>
        <File Location="var/httpd/htdocs/skins/Agent/default/css/SaaSCockpit.Agent.Default.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKLyoqCiAqIEBwYWNrYWdlICAgICBTa2luICJEZWZhdWx0IgogKiBAc2VjdGlvbiAgICAgRGVmYXVsdCBTZXR0aW5ncwogKi8KCkBtZWRpYSBzY3JlZW4scHJvamVjdGlvbix0dixoYW5kaGVsZCB7CgovKioKICogQHN1YnNlY3Rpb24gIEZsYWcKICovCgouRmxhZyBzcGFuLmdyZWVubGVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICM4YmVmNGQ7Cn0KCi5GbGFnIHNwYW4ueWVsbG93bGVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmRkNTA7Cn0KCi5GbGFnIHNwYW4ucmVkbGVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6I2ZmNTA1ZTsKfQoKLlNhYVNGbGFnIHsKICAgIGZsb2F0OiBsZWZ0OwogICAgbWFyZ2luLXJpZ2h0OiAzcHg7CiAgICBtYXJnaW4tdG9wOiAzcHg7Cn0KCi8qKgogKiBAc3Vic2VjdGlvbiAgU3RhbmRhcmQgV2lkdGhzCiAqLwouVzEwcHggewogICAgd2lkdGg6IDEwcHg7Cn0KCgp9LyogZW5kIG1lZGlhICovCgoK</File>
        <File Location="var/httpd/htdocs/skins/Agent/default/css/SaaSCockpit.Table.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKLyoqCiAqIEBwYWNrYWdlICAgICBTa2luICJEZWZhdWx0IgogKiBAc2VjdGlvbiAgICAgVGFibGVzCiAqLwoKQG1lZGlhIHNjcmVlbixwcm9qZWN0aW9uLHR2LGhhbmRoZWxkIHsKCi5Ib3N0VGFibGUgewogICAgd2lkdGg6IGF1dG87CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRGREZEOwogICAgYm9yZGVyOiAxcHggc29saWQgI0M5QzlDOTsKICAgIGJvcmRlci10b3AtY29sb3I6ICNDMEMwQzA7CiAgICBjbGVhcjogYm90aDsKICAgIGJvcmRlci1jb2xsYXBzZTogc2VwYXJhdGU7CiAgICAtbW96LWJveC1zaGFkb3c6IDAgMXB4IDAgI0ZGRjsKICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAxcHggMCAjRkZGOwogICAgYm94LXNoYWRvdzogMCAxcHggMCAjRkZGOwp9CgouSG9zdFRhYmxlIHRib2R5IHsKICAgIC1tb3otYm94LXNoYWRvdzogMCAxcHggMnB4ICNFOEU4RTggaW5zZXQ7CiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMXB4IDJweCAjRThFOEU4IGluc2V0OwogICAgYm94LXNoYWRvdzogMCAxcHggMnB4ICNFOEU4RTggaW5zZXQ7Cn0KCi5Ib3N0VGFibGUgdGJvZHkgdGQgewogICAgcGFkZGluZzogMCAxMHB4Owp9CgouSG9zdFRhYmxlIHRib2R5IHRkLk5vUmlnaHRCb3JkZXIgewogICAgYm9yZGVyLXJpZ2h0OiBub25lOwp9CgouSG9zdFRhYmxlIHRyIHRkIHsKICAgIGxpbmUtaGVpZ2h0OiAxNnB4Owp9CgouSG9zdFRhYmxlIHRyLkV2ZW4gdGQgewogICAgYmFja2dyb3VuZC1jb2xvcjogI0Y1RjVGNTsKfQoKLkhvc3RUYWJsZSB0cjpudGgtY2hpbGQoZXZlbikgdGQgewogICAgYmFja2dyb3VuZC1jb2xvcjogI0Y1RjVGNTsKfQoKLkhvc3RUYWJsZSB0Ym9keSB0ZCB7CiAgICBwYWRkaW5nOiAwIDEwcHg7CiAgICBib3JkZXItcmlnaHQ6IDFweCBkb3R0ZWQgI0NDQzsKfQoKLkdyZWVuIHsKICAgIGNvbG9yOiBncmVlbjsKfQoKLlJlZCB7CiAgICBjb2xvcjogcmVkOwp9CgouU21hbGxGb250IHsKICAgIGZvbnQtc2l6ZTogOHB4Owp9CgovKioKICogQHN1YnNlY3Rpb24gIGRhdGEgdGFibGUgZWxlbWVudHMgd2l0aG91dCBob3ZlcgogKi8KCi5Ob0hvdmVyIHRib2R5IHRyOmhvdmVyIHRkIHsKICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogICAgLW1vei1ib3gtc2hhZG93OiBub25lOwogICAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lOwogICAgYm94LXNoYWRvdzogbm9uZTsKfQoKLk5vSG92ZXIgdHIuRXZlbjpob3ZlciB0ZCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjVGNUY1Owp9CgouTm9Ib3ZlciB0ci5HcmFuZFRvdGFsOmhvdmVyIHRkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNDRkNGQ0Y7Cn0KCi8qKgogKiBAc3Vic2VjdGlvbiAgc3BlY2lhbCB0YWJsZSBoZWlnaHQKICovCgouSGlnaENlbGxzIHRib2R5IHRkIHsKICAgIGhlaWdodDogMzBweDsKfQoKfSAvKiBlbmQgQG1lZGlhICov</File>
        <File Location="var/httpd/htdocs/skins/Customer/default/css/SaaSCockpit.Customer.Default.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKLyoqCiAqIEBwYWNrYWdlICAgICBTa2luICJEZWZhdWx0IgogKiBAc2VjdGlvbiAgICAgRGVmYXVsdCBTZXR0aW5ncwogKi8KCkBtZWRpYSBzY3JlZW4scHJvamVjdGlvbix0dixoYW5kaGVsZCB7CgovKioKICogQHN1YnNlY3Rpb24gIFRleHQKICovCgouV2FybmluZyB7CiAgICBjb2xvcjogI2ZmNTA1ZTsKfQoKLkdyZWVuIHsKICAgIGNvbG9yOiAjMDFkZjAxOwp9Ci8qKgogKiBAc3Vic2VjdGlvbiAgRm9ybQogKi8KZGl2IC5GaWVsZCB7CiAgICBsaW5lLWhlaWdodDogMS4yZW07CiAgICBtYXJnaW4tbGVmdDogMTI1cHg7CiAgICBtYXJnaW4tcmlnaHQ6IDA7CiAgICBwYWRkaW5nLXRvcDogM3B4OwogICAgcGFkZGluZy1sZWZ0OiAxMHB4OwogICAgcGFkZGluZy1yaWdodDogMDsKICAgIHBhZGRpbmctYm90dG9tOiAzcHg7Cn0K</File>
        <File Location="var/httpd/htdocs/skins/Customer/default/css/SaaSCockpit.Customer.Table.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEN1c3RvbWVyIEZyb250ZW5kCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKLyoqCiAqIEBwYWNrYWdlICAgICBTa2luICJEZWZhdWx0IgogKiBAc2VjdGlvbiAgICAgVGFibGUgU2V0dGluZ3MKICovCgpAbWVkaWEgc2NyZWVuLHByb2plY3Rpb24sdHYsaGFuZGhlbGQgewoKdGFibGUuSGlzdG9yeSB7CiAgICB0b3A6IC0xcHg7CiAgICB3aWR0aDogMTAwJTsKICAgIGNvbG9yOiAjNDQ0OwogICAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI0ZGRjsKICAgIHpvb206IDE7CiAgICBjbGVhcjogYm90aDsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQoKLkhpc3RvcnkgdGhlYWQgewogICAgYmFja2dyb3VuZDogI0E3QUFBQSB1cmwoIi4uL2ltZy9HcmFkaWVudFNtYWxsLnBuZyIpIHJlcGVhdC14IDAgLTMxcHg7Cn0KCi5IaXN0b3J5IHRoZWFkIHRoIHsKICAgIHBhZGRpbmc6IDA7CiAgICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOwogICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzk5OTsKICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzk5OTsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5OwogICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7Cn0KCi5IaXN0b3J5IHRib2R5IHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Owp9CgouSGlzdG9yeSB0Ym9keSB0ciB7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0ZGRjsKfQoKLkhpc3RvcnkgdGJvZHkgdHI6YWN0aXZlIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNEREQ7Cn0KCi5IaXN0b3J5IHRib2R5IHRyOmZpcnN0LWNoaWxkIHsKICAgIGJvcmRlci10b3A6IG5vbmU7Cn0KCi5IaXN0b3J5IHRib2R5IHRkIHsKICAgIHBhZGRpbmc6IDZweCA4cHggM3B4OwogICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgIGJvcmRlcjogMHB4IHNvbGlkOwp9CgouSGlzdG9yeSB0Ym9keSBhIHsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgIG91dGxpbmU6IG5vbmU7Cn0KCi5IaXN0b3J5IHRhYmxlIGE6aG92ZXIgewogICAgY29sb3I6ICMwMDA7Cn0KCi8qKgogKiBAc3Vic2VjdGlvbiAgSGlzdG9yeVRhYmxlIHplYnJhIHN0eWxlCiAqLwouSGlzdG9yeSB0Ym9keSB0ciB0ZCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkJGQkZCOwp9CgouSGlzdG9yeSB0Ym9keSB0ci5FdmVuIHRkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNGMkYyRjI7Cn0KCi5IaXN0b3J5IHRib2R5IHRyOm50aC1jaGlsZChldmVuKSB0ZCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjJGMkYyOwp9CgovKioKICogQHN1YnNlY3Rpb24gIFRhYmxlIFN0eWxlIEhvdmVyZWQKICovCi5IaXN0b3J5IHRib2R5IHRyOmhvdmVyIHRkIHsKICAgIC8qIGJhY2tncm91bmQ6IHVybCguLi9pbWcvdHJfaG92ZXIucG5nKSByZXBlYXQteDsgKi8KICAgIGJhY2tncm91bmQtY29sb3I6ICNGOUIyMzQ7Cn0KLkhpc3RvcnkgdGJvZHkgdHI6aG92ZXIgewogICAgYm9yZGVyLWNvbG9yOiAjQ0NDOwp9Ci5IaXN0b3J5IHRib2R5IHRyOmhvdmVyIHRkLAouSGlzdG9yeSB0Ym9keSB0cjpob3ZlciBhIHsKICAgIGNvbG9yOiAjNDUyQTAzOwogICAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI0Y0QjI1OTsKfQoKLyoqCiAqIEBzdWJzZWN0aW9uICBUYWJsZSBTdHlsZSBBY3RpdmUKICovCgouSGlzdG9yeSB0Ym9keSB0cjphY3RpdmUgdGQgewogICAgcGFkZGluZzogN3B4IDhweCAycHg7CiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBib3R0b207Cn0KCi8qKgogKiBAc3Vic2VjdGlvbgogKi8KLkNvbnRyb2xSb3cgewogICAgaGVpZ2h0OiAyNXB4OwogICAgbWFyZ2luOiAwIC0xcHg7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNENEQ0RDQ7CiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjRDRENEQ0OwogICAgLXdlYmtpdC1ib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzcHg7CiAgICAtd2Via2l0LWJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzcHg7CiAgICAtbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDogM3B4OwogICAgLW1vei1ib3JkZXItcmFkaXVzLXRvcHJpZ2h0OiAzcHg7CiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzcHg7CiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4OwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKLlNhYVNDb2NrcGl0T3ZlcnZpZXcgdGhlYWQgdGh7CiAgICBjb2xvcjogIzQ0NDQ0NDsKICAgIGZvbnQtc2l6ZTogMTFweDsKICAgIGhlaWdodDogMTBweDsKICAgIHBhZGRpbmc6IDFweCAxM3B4IDRweCA4cHg7CiAgICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjRUVFRUVFOwogICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKfQp9IC8qIGVuZCBAbWVkaWEgKi8KCgo=</File>
        <File Location="var/httpd/htdocs/skins/Customer/default/css/SaaSCockpit.Customer.Zoom.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKLyoqCiAqIEBwYWNrYWdlICAgICBTa2luICJEZWZhdWx0IgogKiBAc2VjdGlvbiAgICAgRGVmYXVsdCBTZXR0aW5ncwogKi8KCkBtZWRpYSBzY3JlZW4scHJvamVjdGlvbix0dixoYW5kaGVsZCB7CgovKioKICogQHN1YnNlY3Rpb24gIEJveAogKi8KIC5TYWFTQ29ja3BpdEJveCB7CiAgICB3aWR0aDogNTAlOwogICAgbWFyZ2luLWJvdHRvbTogMDsKfQoKLlNhYVNDb2NrcGl0QWN0aW9uQnV0dG9ucyB7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjQ0NDQ0NDOwogICAgYm9yZGVyLXJhZGl1czogN3B4OwogICAgbWFyZ2luOiAyMHB4IDA7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgcGFkZGluZzogMTBweDsKfQoKLlNhYVNDb2NrcGl0QWN0aW9uQnV0dG9ucyBmb3JtIHsKICAgIGRpc3BsYXk6IGlubGluZTsKfQoKLlNhYVNDb2NrcGl0QWN0aW9uQnV0dG9ucyBwIHsKICAgIG1hcmdpbjogMHB4Owp9CgouU2FhU0NvY2twaXRBY3Rpb25CdXR0b25zID4gZGl2ID4gZGl2IHsKICAgIG1hcmdpbi1ib3R0b206IDVweDsKfQoKLlNhYVNDb2NrcGl0U3RhdHVzIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgbWFyZ2luLXJpZ2h0OiA0MHB4Owp9CgouU2FhU0NvY2twaXRTdGF0dXM6Zmlyc3QtY2hpbGQgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgouU2FhU0NvY2twaXRTdGF0dXMgbGFiZWwgewogICAgd2lkdGg6IGF1dG87CiAgICBwYWRkaW5nOiAwcHg7Cn0KCi5TYWFTQ29ja3BpdFRvUyB7CiAgICBkaXNwbGF5OiBub25lOwogICAgYm9yZGVyOiAxcHggc29saWQgI0NDQ0NDQzsKICAgIGhlaWdodDogMjAwcHg7CiAgICBtYXJnaW46IDEwcHggMHB4IDBweCAxNDBweDsKICAgIG92ZXJmbG93LXk6IHNjcm9sbDsKICAgIHBhZGRpbmc6IDEwcHg7CiAgICAvKndoaXRlLXNwYWNlOiBwcmUtd3JhcDsqLwogICAgd2lkdGg6IDcyMHB4Owp9CgouU2FhU0NvY2twaXREaXN0YW5jZSB7CiAgICBtYXJnaW4tdG9wOiAxMHB4Owp9Cgp9LyogZW5kIG1lZGlhICovCgoK</File>
        <File Location="var/httpd/htdocs/skins/Customer/default/img/otrsondemand-invoice-logo.png" Permission="644" Encode="Base64"></File>
    </Filelist>
    <DatabaseInstall Type="post">
        <TableCreate Type="post" Name="saas_state">
            <Column Name="name" PrimaryKey="true" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="state_type" Required="true" Size="30" Type="VARCHAR"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="saas_isp">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="saas_location">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="state_name" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="isp_id" Required="true" Type="INTEGER"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <Unique Name="saas_location">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="saas_sequence">
            <Column Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="saas_mgmt_server">
            <Column Name="id" PrimaryKey="true" Required="true" Size="7" Type="VARCHAR"></Column>
            <Column Name="location_id" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="uri" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="state_name" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <Unique Name="saas_mgmt_server">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="saas_host">
            <Column Name="id" PrimaryKey="true" Required="true" Size="6" Type="VARCHAR"></Column>
            <Column Name="location_id" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="ipv4addr" Required="true" Size="15" Type="VARCHAR"></Column>
            <Column Name="ipv6addr" Required="false" Size="46" Type="VARCHAR"></Column>
            <Column Name="max_instances" Required="true" Type="INTEGER"></Column>
            <Column Name="state_name" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <Column Name="domain" Required="false" Size="255" Type="VARCHAR"></Column>
            <Unique Name="saas_host">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <Unique Name="saas_host">
                                <UniqueColumn Name="ipv4addr"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="saas_subscription">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="SMALLINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="version" Required="true" Type="SMALLINT"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="saas_instance">
            <Column Name="id" PrimaryKey="true" Required="true" Size="7" Type="VARCHAR"></Column>
            <Column Name="host_id" Required="true" Size="6" Type="VARCHAR"></Column>
            <Column Name="customer_id" Required="false" Size="150" Type="VARCHAR"></Column>
            <Column Name="state_name" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="setup_time" Required="false" Type="DATE"></Column>
            <Column Name="setup_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <Column Name="domain" Required="false" Size="255" Type="VARCHAR"></Column>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="setup_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="saas_alias">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="instance_id" Required="true" Size="6" Type="VARCHAR"></Column>
            <Column Name="state_name" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <Unique Name="saas_alias">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="saas_history_type">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Unique Name="saas_history_type">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
        </TableCreate>
        <TableCreate Type="post" Name="saas_history">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="location_id" Required="false" Type="INTEGER"></Column>
            <Column Name="mgmt_server_id" Required="false" Size="6" Type="VARCHAR"></Column>
            <Column Name="host_id" Required="false" Size="6" Type="VARCHAR"></Column>
            <Column Name="instance_id" Required="false" Size="6" Type="VARCHAR"></Column>
            <Column Name="job_id" Required="false" Type="INTEGER"></Column>
            <Column Name="fieldname" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="content_new" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="content_old" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="history_type_id" Required="true" Type="INTEGER"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="saas_job">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="operation" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="state_name" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="location_id" Required="true" Type="INTEGER"></Column>
            <Column Name="mgmt_server_id" Required="true" Size="6" Type="VARCHAR"></Column>
            <Column Name="priority" Required="true" Type="SMALLINT"></Column>
            <Column Name="precursor_job_id" Required="true" Type="INTEGER"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
            <Index Name="state_name_index">
                <IndexColumn Name="state_name">
                </IndexColumn>
            </Index>
            <Index Name="precursor_job_id_index">
                <IndexColumn Name="precursor_job_id">
                </IndexColumn>
            </Index>
            <Index Name="operation_index">
                <IndexColumn Name="operation">
                </IndexColumn>
            </Index>
            <Index Name="mgmt_server_id_index">
                <IndexColumn Name="mgmt_server_id">
                </IndexColumn>
            </Index>
            <Index Name="location_id_index">
                <IndexColumn Name="location_id">
                </IndexColumn>
            </Index>
        </TableCreate>
        <TableCreate Type="post" Name="saas_job_param">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="job_id" Required="true" Type="INTEGER"></Column>
            <Column Name="param_key" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="param_value" Required="true" Size="250" Type="VARCHAR"></Column>
            <Index Name="job_id_index">
                <IndexColumn Name="job_id">
                </IndexColumn>
            </Index>
            <Index Name="param_key_index">
                <IndexColumn Name="param_key">
                </IndexColumn>
            </Index>
            <Index Name="param_value_index">
                <IndexColumn Name="param_value">
                </IndexColumn>
            </Index>
        </TableCreate>
        <TableCreate Type="post" Name="saas_job_result">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="job_id" Required="true" Type="INTEGER"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
            <Index Name="job_id_index">
                <IndexColumn Name="job_id">
                </IndexColumn>
            </Index>
        </TableCreate>
        <TableCreate Type="post" Name="saas_job_result_param">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="job_result_id" Required="true" Type="INTEGER"></Column>
            <Column Name="param_key" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="param_value" Required="true" Size="50000" Type="VARCHAR"></Column>
            <Index Name="job_result_id_index">
                <IndexColumn Name="job_result_id">
                </IndexColumn>
            </Index>
            <Index Name="param_key_index">
                <IndexColumn Name="param_key">
                </IndexColumn>
            </Index>
        </TableCreate>
        <TableCreate Type="post" Name="saas_price">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="available" Required="true" Type="INTEGER"></Column>
            <Column Name="description" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="price_type" Required="true" Size="10" Type="VARCHAR"></Column>
            <Column Name="price" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="price_is_per_user" Required="true" Type="INTEGER"></Column>
            <Column Name="max_users" Required="true" Type="INTEGER"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="saas_billing">
            <Column Name="instance_id" PrimaryKey="true" Required="true" Size="7" Type="VARCHAR"></Column>
            <Column Name="active" Required="true" Type="INTEGER"></Column>
            <Column Name="payment_processor" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="first_name" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="last_name" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="street" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="street2" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="city" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="state" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="country" Required="true" Size="2" Type="VARCHAR"></Column>
            <Column Name="zip" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="card_type" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="account_number" Required="true" Type="LONGBLOB"></Column>
            <Column Name="expire_month" Required="true" Size="10" Type="VARCHAR"></Column>
            <Column Name="expire_year" Required="true" Size="10" Type="VARCHAR"></Column>
            <Column Name="subscription_id" Required="true" Type="INTEGER"></Column>
            <Column Name="add_on_packages" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="billing_day" Required="true" Type="INTEGER"></Column>
            <Column Name="account_balance" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="last_subscription_change_day" Required="true" Type="INTEGER"></Column>
            <Column Name="deactivate_on_next_billing" Required="true" Type="INTEGER"></Column>
            <Column Name="manual_billing" Required="true" Type="INTEGER"></Column>
            <Column Name="manual_billing_desc" Required="true" Size="255" Type="VARCHAR"></Column>
            <Column Name="manual_billing_amount" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="manual_billing_received" Required="true" Type="INTEGER"></Column>
            <Column Name="manual_billing_valdate" Required="false" Type="DATE"></Column>
            <Column Name="ip_address" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="free_trial_period" Required="true" Type="INTEGER"></Column>
            <Column Name="user_count" Required="true" Type="INTEGER"></Column>
            <Index Name="active_index">
                <IndexColumn Name="active">
                </IndexColumn>
            </Index>
            <Index Name="billing_day_index">
                <IndexColumn Name="billing_day">
                </IndexColumn>
            </Index>
            <Index Name="manual_billing_index">
                <IndexColumn Name="manual_billing">
                </IndexColumn>
            </Index>
            <Index Name="manual_billing_received_index">
                <IndexColumn Name="manual_billing_received">
                </IndexColumn>
            </Index>
            <Index Name="manual_billing_valdate_index">
                <IndexColumn Name="manual_billing_valdate">
                </IndexColumn>
            </Index>
        </TableCreate>
        <TableCreate Type="post" Name="saas_billing_history">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="instance_id" Required="true" Size="7" Type="VARCHAR"></Column>
            <Column Name="billing_time" Required="true" Type="DATE"></Column>
            <Column Name="amount" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="payment_processor" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="subscription_id" Required="true" Type="INTEGER"></Column>
            <Column Name="add_on_packages" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="status" Required="true" Size="200" Type="VARCHAR"></Column>
            <Column Name="ip_address" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="user_count" Required="true" Type="INTEGER"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="saas_billing_execution_date">
            <Column Name="execution_date" PrimaryKey="true" Required="true" Type="DATE"></Column>
        </TableCreate>
        <Insert Type="post" Table="groups">
            <Data Key="name" Type="Quote">saas-cockpit</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_by">1</Data>
            <Data Key="create_time" Type="Quote">2010-10-31 00:00:00</Data>
            <Data Key="change_time" Type="Quote">2010-10-31 00:00:00</Data>
        </Insert>
        <Insert Type="post" Table="saas_sequence">
            <Data Key="id" Type="INTEGER">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">LocationActive</Data>
            <Data Key="state_type" Type="Quote">Location</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">LocationInactive</Data>
            <Data Key="state_type" Type="Quote">Location</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">MgmtServerRunning</Data>
            <Data Key="state_type" Type="Quote">MgmtServer</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">MgmtServerDown</Data>
            <Data Key="state_type" Type="Quote">MgmtServer</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">MgmtServerRetired</Data>
            <Data Key="state_type" Type="Quote">MgmtServer</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">HostRunning</Data>
            <Data Key="state_type" Type="Quote">Host</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">HostDown</Data>
            <Data Key="state_type" Type="Quote">Host</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">HostRetired</Data>
            <Data Key="state_type" Type="Quote">Host</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceAdded</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceCreatePending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceCreateFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceCreated</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceSetupPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceSetupFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceOrganizationSetPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceOrganizationSetFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">OTRSInstanceDataSetPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">OTRSInstanceDataSetFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">OTRSRegistrationDataSetPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">OTRSRegistrationDataSetFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceStopped</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceStartPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceStartFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceStarted</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceReadyPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceReadyFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceRunning</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstancePackAndGoPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstancePackAndGoFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceStopPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceStopFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceRestartPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceRestartFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceMovePending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceMoveFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceUpdatePending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceUpdateFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceDeletePending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceDeleteFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">InstanceDeleted</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobQueued</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobClaimed</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobStarted</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobInProgress</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobFailed</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobSucceeded</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobStalled</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobRetry</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">JobUndefined</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">AliasReserved</Data>
            <Data Key="state_type" Type="Quote">Alias</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">AliasConfirmed</Data>
            <Data Key="state_type" Type="Quote">Alias</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">AliasDeletePending</Data>
            <Data Key="state_type" Type="Quote">Alias</Data>
        </Insert>
        <Insert Type="post" Table="saas_state">
            <Data Key="name" Type="Quote">AliasDeleted</Data>
            <Data Key="state_type" Type="Quote">Alias</Data>
        </Insert>
        <Insert Type="post" Table="saas_isp">
            <Data Key="id" Type="Integer">23</Data>
            <Data Key="name" Type="Quote">ISP 1</Data>
        </Insert>
        <Insert Type="post" Table="saas_location">
            <Data Key="id" Type="Integer">1</Data>
            <Data Key="name" Type="Quote">Location 1</Data>
            <Data Key="state_name" Type="Quote">LocationActive</Data>
            <Data Key="isp_id" Type="Integer">23</Data>
        </Insert>
        <Insert Type="post" Table="saas_mgmt_server">
            <Data Key="id" Type="Quote">m56abef</Data>
            <Data Key="location_id" Type="Quote">1</Data>
            <Data Key="name" Type="Quote">ManagementServer1</Data>
            <Data Key="uri" Type="Quote">http://example.com/saas_mgmt_server_soap.pl</Data>
            <Data Key="state_name" Type="Quote">MgmtServerRunning</Data>
        </Insert>
        <Insert Type="post" Table="saas_subscription">
            <Data Key="id" Type="Integer">1</Data>
            <Data Key="name" Type="Quote">S</Data>
            <Data Key="version" Type="Quote">1</Data>
        </Insert>
        <Insert Type="post" Table="saas_subscription">
            <Data Key="id" Type="Integer">2</Data>
            <Data Key="name" Type="Quote">M</Data>
            <Data Key="version" Type="Quote">1</Data>
        </Insert>
        <Insert Type="post" Table="saas_subscription">
            <Data Key="id" Type="Integer">3</Data>
            <Data Key="name" Type="Quote">L</Data>
            <Data Key="version" Type="Quote">1</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceAdd</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceUpdate</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceStateSet</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceCreate</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceSetup</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceOrganizationSet</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceStart</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceRunning</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceReady</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstancePackAndGo</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceAliasSet</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceAliasDelete</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceAliasStateSet</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceDelete</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceLock</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceUnlock</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceStop</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">HostAdd</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">HostUpdate</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">JobAdd</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">JobUpdate</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">LocationAdd</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">LocationUpdate</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">MgmtServerAdd</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">MgmtServerUpdate</Data>
        </Insert>
        <Insert Type="post" Table="saas_history_type">
            <Data Key="name" Type="Quote">InstanceFreeTrialPeriodUpdate</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">1</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">Free trial</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">0.00</Data>
            <Data Key="max_users">10</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">2</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">1-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">30.00</Data>
            <Data Key="max_users">1</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">3</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">up to 5-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">100.00</Data>
            <Data Key="max_users">5</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">4</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">up to 10-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">200.00</Data>
            <Data Key="max_users">10</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">5</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">up to 25-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">400.00</Data>
            <Data Key="max_users">25</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">6</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">up to 50-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">750.00</Data>
            <Data Key="max_users">50</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
        <Insert Type="post" Table="saas_price">
            <Data Key="id">7</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">up to 100-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">1500.00</Data>
            <Data Key="max_users">100</Data>
            <Data Key="price_is_per_user">0</Data>
        </Insert>
    </DatabaseInstall>
    <DatabaseUpgrade Type="pre">
        <TableCreate Type="pre" Name="saas_price" Version="1.0.71">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="available" Required="true" Type="INTEGER"></Column>
            <Column Name="description" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="price_type" Required="true" Size="10" Type="VARCHAR"></Column>
            <Column Name="price" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="max_users" Required="true" Type="INTEGER"></Column>
        </TableCreate>
        <TableAlter Type="pre" Name="saas_price" Version="1.1.35">
            <ColumnAdd Name="price_is_per_user" Required="true" Type="INTEGER"></ColumnAdd>
        </TableAlter>
        <TableCreate Type="pre" Name="saas_billing" Version="1.0.71">
            <Column Name="instance_id" PrimaryKey="true" Required="true" Size="7" Type="VARCHAR"></Column>
            <Column Name="active" Required="true" Type="INTEGER"></Column>
            <Column Name="payment_processor" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="first_name" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="last_name" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="street" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="street2" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="city" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="state" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="country" Required="true" Size="2" Type="VARCHAR"></Column>
            <Column Name="zip" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="card_type" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="account_number" Required="true" Size="20" Type="VARCHAR"></Column>
            <Column Name="expire_month" Required="true" Size="10" Type="VARCHAR"></Column>
            <Column Name="expire_year" Required="true" Size="10" Type="VARCHAR"></Column>
            <Column Name="subscription_id" Required="true" Type="INTEGER"></Column>
            <Column Name="add_on_packages" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="billing_day" Required="true" Type="INTEGER"></Column>
            <Column Name="account_balance" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="last_subscription_change_day" Required="true" Type="INTEGER"></Column>
            <Column Name="deactivate_on_next_billing" Required="true" Type="INTEGER"></Column>
            <Column Name="manual_billing" Required="true" Type="INTEGER"></Column>
            <Column Name="manual_billing_desc" Required="true" Size="255" Type="VARCHAR"></Column>
            <Column Name="manual_billing_amount" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="manual_billing_received" Required="true" Type="INTEGER"></Column>
            <Column Name="manual_billing_valdate" Required="false" Type="DATE"></Column>
            <Index Name="active_index">
                <IndexColumn Name="active">
                </IndexColumn>
            </Index>
            <Index Name="billing_day_index">
                <IndexColumn Name="billing_day">
                </IndexColumn>
            </Index>
            <Index Name="manual_billing_index">
                <IndexColumn Name="manual_billing">
                </IndexColumn>
            </Index>
            <Index Name="manual_billing_received_index">
                <IndexColumn Name="manual_billing_received">
                </IndexColumn>
            </Index>
            <Index Name="manual_billing_valdate_index">
                <IndexColumn Name="manual_billing_valdate">
                </IndexColumn>
            </Index>
        </TableCreate>
        <TableAlter Type="pre" Name="saas_billing" Version="1.0.75">
            <ColumnDrop Name="account_number"></ColumnDrop>
            <ColumnAdd Name="account_number" Required="true" Type="LONGBLOB"></ColumnAdd>
            <ColumnAdd Name="ip_address" Required="true" Size="20" Type="VARCHAR"></ColumnAdd>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_billing" Version="1.1.31">
            <ColumnAdd Name="free_trial_period" Required="true" Type="INTEGER"></ColumnAdd>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_billing" Version="1.1.35">
            <ColumnAdd Name="user_count" Required="true" Type="INTEGER"></ColumnAdd>
        </TableAlter>
        <TableCreate Type="pre" Name="saas_billing_history" Version="1.0.71">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="instance_id" Required="true" Size="7" Type="VARCHAR"></Column>
            <Column Name="billing_time" Required="true" Type="DATE"></Column>
            <Column Name="amount" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="payment_processor" Required="true" Size="25" Type="VARCHAR"></Column>
            <Column Name="subscription_id" Required="true" Type="INTEGER"></Column>
            <Column Name="add_on_packages" Required="true" Size="40" Type="VARCHAR"></Column>
            <Column Name="status" Required="true" Size="200" Type="VARCHAR"></Column>
        </TableCreate>
        <TableAlter Type="pre" Name="saas_billing_history" Version="1.0.75">
            <ColumnAdd Name="ip_address" Required="true" Size="20" Type="VARCHAR"></ColumnAdd>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_billing_history" Version="1.1.35">
            <ColumnAdd Name="user_count" Required="true" Type="INTEGER"></ColumnAdd>
        </TableAlter>
        <TableCreate Type="pre" Name="saas_billing_execution_date" Version="1.0.71">
            <Column Name="execution_date" PrimaryKey="true" Required="true" Type="DATE"></Column>
        </TableCreate>
        <TableAlter Type="pre" Name="saas_job_result_param" Version="1.1.36">
            <IndexCreate Name="job_result_id_index">
                <IndexColumn Name="job_result_id">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="param_key_index">
                <IndexColumn Name="param_key">
                </IndexColumn>
            </IndexCreate>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_instance" Version="0.0.20">
            <ColumnAdd Name="max_concurrent_users" Required="false" Type="Integer"></ColumnAdd>
            <ColumnAdd Name="max_sessions_per_user" Required="false" Type="Integer"></ColumnAdd>
        </TableAlter>
        <Insert Type="pre" Table="saas_state" Version="0.0.26">
            <Data Key="name" Type="Quote">InstancePackAndGoPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_state" Version="0.0.26">
            <Data Key="name" Type="Quote">InstancePackAndGoFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_history_type" Version="0.0.26">
            <Data Key="name" Type="Quote">InstanceReady</Data>
        </Insert>
        <Insert Type="pre" Table="saas_history_type" Version="0.0.26">
            <Data Key="name" Type="Quote">InstancePackAndGo</Data>
        </Insert>
        <Insert Type="pre" Table="saas_history_type" Version="1.1.38">
            <Data Key="name" Type="Quote">InstanceFreeTrialPeriodUpdate</Data>
        </Insert>
        <Insert Type="pre" Table="groups" Version="0.0.30">
            <Data Key="name" Type="Quote">saas-cockpit</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_by">1</Data>
            <Data Key="create_time" Type="Quote">2010-10-31 00:00:00</Data>
            <Data Key="change_time" Type="Quote">2010-10-31 00:00:00</Data>
        </Insert>
        <Insert Type="pre" Table="saas_state" Version="0.0.44">
            <Data Key="name" Type="Quote">JobUndefined</Data>
            <Data Key="state_type" Type="Quote">Job</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">1</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">Free trial</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">0.00</Data>
            <Data Key="max_users">10</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">2</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">1-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">30.00</Data>
            <Data Key="max_users">1</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">3</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">5-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">80.00</Data>
            <Data Key="max_users">5</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">4</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">10-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">200.00</Data>
            <Data Key="max_users">10</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">5</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">25-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">400.00</Data>
            <Data Key="max_users">25</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">6</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">50-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">750.00</Data>
            <Data Key="max_users">50</Data>
        </Insert>
        <Insert Type="pre" Table="saas_price" Version="1.0.71">
            <Data Key="id">7</Data>
            <Data Key="available">1</Data>
            <Data Key="description" Type="Quote">100-user license</Data>
            <Data Key="price_type" Type="Quote">Base</Data>
            <Data Key="price">1500.00</Data>
            <Data Key="max_users">100</Data>
        </Insert>
        <TableAlter Type="pre" Name="saas_job_result" Version="1.1.36">
            <IndexCreate Name="job_id_index">
                <IndexColumn Name="job_id">
                </IndexColumn>
            </IndexCreate>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_job" Version="1.1.36">
            <IndexCreate Name="state_name_index">
                <IndexColumn Name="state_name">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="precursor_job_id_index">
                <IndexColumn Name="precursor_job_id">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="operation_index">
                <IndexColumn Name="operation">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="mgmt_server_id_index">
                <IndexColumn Name="mgmt_server_id">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="location_id_index">
                <IndexColumn Name="location_id">
                </IndexColumn>
            </IndexCreate>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_job_param" Version="1.1.36">
            <IndexCreate Name="job_id_index">
                <IndexColumn Name="job_id">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="param_key_index">
                <IndexColumn Name="param_key">
                </IndexColumn>
            </IndexCreate>
            <IndexCreate Name="param_value_index">
                <IndexColumn Name="param_value">
                </IndexColumn>
            </IndexCreate>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_host" Version="1.4.8">
            <ColumnAdd Name="domain" Required="false" Size="255" Type="VARCHAR"></ColumnAdd>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_instance" Version="1.4.8">
            <ColumnAdd Name="domain" Required="false" Size="255" Type="VARCHAR"></ColumnAdd>
        </TableAlter>
        <Insert Type="pre" Table="saas_state" Version="1.5.2">
            <Data Key="name" Type="Quote">OTRSRegistrationDataSetPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_state" Version="1.5.2">
            <Data Key="name" Type="Quote">OTRSRegistrationDataSetFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <TableAlter Type="pre" Name="saas_instance" Version="1.5.93">
            <ColumnDrop Name="ux3_type_id"></ColumnDrop>
        </TableAlter>
        <TableDrop Type="pre" Name="saas_opm_pkg_texts" Version="1.5.93">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_opm_pkg_deps" Version="1.5.93">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_opm_pkg_installed" Version="1.5.93">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_opm_pkgs" Version="1.5.93">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_otrs_version" Version="1.5.93">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_ux3_type" Version="1.5.93">
        </TableDrop>
        <TableAlter Type="pre" Name="saas_host" Version="1.6.91">
            <ColumnAdd Name="ipv6addr" Required="false" Size="46" Type="VARCHAR"></ColumnAdd>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_mgmt_server" Version="4.0.3">
            <ColumnChange NameNew="id" NameOld="id" PrimaryKey="true" Required="true" Size="7" Type="VARCHAR"></ColumnChange>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_instance" Version="4.0.3">
            <ColumnChange NameNew="customer_id" NameOld="customer_id" Required="false" Size="150" Type="VARCHAR"></ColumnChange>
        </TableAlter>
        <TableAlter Type="pre" Name="saas_instance" Version="4.0.12">
            <ColumnDrop Name="max_concurrent_users"></ColumnDrop>
            <ColumnDrop Name="max_sessions_per_user"></ColumnDrop>
        </TableAlter>
        <Insert Type="pre" Table="saas_state" Version="4.0.24">
            <Data Key="name" Type="Quote">OTRSInstanceDataSetPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_state" Version="4.0.24">
            <Data Key="name" Type="Quote">OTRSInstanceDataSetFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_state" Version="5.0.6">
            <Data Key="name" Type="Quote">InstanceOrganizationSetPending</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_state" Version="5.0.6">
            <Data Key="name" Type="Quote">InstanceOrganizationSetFailed</Data>
            <Data Key="state_type" Type="Quote">Instance</Data>
        </Insert>
        <Insert Type="pre" Table="saas_history_type" Version="5.0.6">
            <Data Key="name" Type="Quote">InstanceOrganizationSet</Data>
        </Insert>
    </DatabaseUpgrade>
    <DatabaseUninstall Type="pre">
        <TableDrop Type="pre" Name="saas_billing_execution_date">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_billing_history">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_billing">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_price">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_job_result_param">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_job_result">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_job_param">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_job">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_history">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_history_type">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_alias">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_mgmt_server">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_sequence">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_isp">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_instance">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_host">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_location">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_subscription">
        </TableDrop>
        <TableDrop Type="pre" Name="saas_state">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>